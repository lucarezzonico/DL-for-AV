{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Hands Milestone 2 - Tracking","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"4yYcm6O-WG_6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652335909381,"user_tz":-120,"elapsed":3189,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"f1d3845b-7f58-4019-907f-95f8ebfd3810"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'yolov4-deepsort'...\n","remote: Enumerating objects: 143, done.\u001b[K\n","remote: Total 143 (delta 0), reused 0 (delta 0), pack-reused 143\u001b[K\n","Receiving objects: 100% (143/143), 76.84 MiB | 41.74 MiB/s, done.\n","Resolving deltas: 100% (41/41), done.\n"]}],"source":["# clone repository for deepsort with yolov4\n","!git clone https://github.com/theAIGuysCode/yolov4-deepsort"]},{"cell_type":"code","source":["# step into the yolov4-deepsort folder\n","%cd yolov4-deepsort/"],"metadata":{"id":"O6kA65TMWTGD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652335909383,"user_tz":-120,"elapsed":22,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"1dfead57-6c40-4f56-c653-8215d504c9f3"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/yolov4-deepsort\n"]}]},{"cell_type":"code","source":["!pip install tensorflow-gpu==2.3.0 opencv-python==4.1.1.26 lxml tqdm absl-py matplotlib easydict pillow mediapipe"],"metadata":{"id":"VjXoropiY2Ag","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1652335959683,"user_tz":-120,"elapsed":50313,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"441d6149-acbc-40e1-fadc-b0929a4092ab"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow-gpu==2.3.0\n","  Downloading tensorflow_gpu-2.3.0-cp37-cp37m-manylinux2010_x86_64.whl (320.4 MB)\n","\u001b[K     |████████████████████████████████| 320.4 MB 50 kB/s \n","\u001b[?25hCollecting opencv-python==4.1.1.26\n","  Downloading opencv_python-4.1.1.26-cp37-cp37m-manylinux1_x86_64.whl (28.7 MB)\n","\u001b[K     |████████████████████████████████| 28.7 MB 1.4 MB/s \n","\u001b[?25hRequirement already satisfied: lxml in /usr/local/lib/python3.7/dist-packages (4.2.6)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (4.64.0)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (1.0.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: easydict in /usr/local/lib/python3.7/dist-packages (1.9)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (7.1.2)\n","Collecting mediapipe\n","  Downloading mediapipe-0.8.10-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (32.8 MB)\n","\u001b[K     |████████████████████████████████| 32.8 MB 1.3 MB/s \n","\u001b[?25hRequirement already satisfied: google-pasta>=0.1.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (0.2.0)\n","Requirement already satisfied: tensorboard<3,>=2.3.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (2.8.0)\n","Collecting numpy<1.19.0,>=1.16.0\n","  Downloading numpy-1.18.5-cp37-cp37m-manylinux1_x86_64.whl (20.1 MB)\n","\u001b[K     |████████████████████████████████| 20.1 MB 1.2 MB/s \n","\u001b[?25hCollecting gast==0.3.3\n","  Downloading gast-0.3.3-py2.py3-none-any.whl (9.7 kB)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (3.17.3)\n","Collecting tensorflow-estimator<2.4.0,>=2.3.0\n","  Downloading tensorflow_estimator-2.3.0-py2.py3-none-any.whl (459 kB)\n","\u001b[K     |████████████████████████████████| 459 kB 61.0 MB/s \n","\u001b[?25hRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.15.0)\n","Requirement already satisfied: scipy==1.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.4.1)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.14.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (0.37.1)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.1.0)\n","Collecting h5py<2.11.0,>=2.10.0\n","  Downloading h5py-2.10.0-cp37-cp37m-manylinux1_x86_64.whl (2.9 MB)\n","\u001b[K     |████████████████████████████████| 2.9 MB 53.5 MB/s \n","\u001b[?25hRequirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.44.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (3.3.0)\n","Requirement already satisfied: astunparse==1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.6.3)\n","Requirement already satisfied: keras-preprocessing<1.2,>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-gpu==2.3.0) (1.1.2)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (0.4.6)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (1.35.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (1.0.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (1.8.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (2.23.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (3.3.6)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (57.4.0)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (0.6.1)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (4.2.4)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (4.8)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (4.11.3)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (4.2.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (3.8.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (0.4.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (1.24.3)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow-gpu==2.3.0) (3.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.8)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n","Requirement already satisfied: attrs>=19.1.0 in /usr/local/lib/python3.7/dist-packages (from mediapipe) (21.4.0)\n","Requirement already satisfied: opencv-contrib-python in /usr/local/lib/python3.7/dist-packages (from mediapipe) (4.1.2.30)\n","Installing collected packages: numpy, tensorflow-estimator, h5py, gast, tensorflow-gpu, opencv-python, mediapipe\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.21.6\n","    Uninstalling numpy-1.21.6:\n","      Successfully uninstalled numpy-1.21.6\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.8.0\n","    Uninstalling tensorflow-estimator-2.8.0:\n","      Successfully uninstalled tensorflow-estimator-2.8.0\n","  Attempting uninstall: h5py\n","    Found existing installation: h5py 3.1.0\n","    Uninstalling h5py-3.1.0:\n","      Successfully uninstalled h5py-3.1.0\n","  Attempting uninstall: gast\n","    Found existing installation: gast 0.5.3\n","    Uninstalling gast-0.5.3:\n","      Successfully uninstalled gast-0.5.3\n","  Attempting uninstall: opencv-python\n","    Found existing installation: opencv-python 4.1.2.30\n","    Uninstalling opencv-python-4.1.2.30:\n","      Successfully uninstalled opencv-python-4.1.2.30\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow 2.8.0 requires tf-estimator-nightly==2.8.0.dev2021122109, which is not installed.\n","tensorflow 2.8.0 requires numpy>=1.20, but you have numpy 1.18.5 which is incompatible.\n","tables 3.7.0 requires numpy>=1.19.0, but you have numpy 1.18.5 which is incompatible.\n","jaxlib 0.3.7+cuda11.cudnn805 requires numpy>=1.19, but you have numpy 1.18.5 which is incompatible.\n","jax 0.3.8 requires numpy>=1.19, but you have numpy 1.18.5 which is incompatible.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n","albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Successfully installed gast-0.3.3 h5py-2.10.0 mediapipe-0.8.10 numpy-1.18.5 opencv-python-4.1.1.26 tensorflow-estimator-2.3.0 tensorflow-gpu-2.3.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]}}},"metadata":{}}]},{"cell_type":"code","source":["# import dependencies\n","from IPython.display import display, Javascript, Image\n","from google.colab.output import eval_js\n","from google.colab.patches import cv2_imshow\n","from base64 import b64decode, b64encode\n","import cv2\n","import numpy as np\n","import PIL\n","import io\n","import html\n","import time\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import os\n","# comment out below line to enable tensorflow logging outputs\n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n","import tensorflow as tf\n","physical_devices = tf.config.experimental.list_physical_devices('GPU')\n","if len(physical_devices) > 0:\n","    tf.config.experimental.set_memory_growth(physical_devices[0], True)\n","from absl import app, flags, logging\n","from absl.flags import FLAGS\n","import core.utils as utils\n","from core.yolov4 import filter_boxes\n","from tensorflow.python.saved_model import tag_constants\n","from core.config import cfg\n","# from PIL import Image\n","from tensorflow.compat.v1 import ConfigProto\n","from tensorflow.compat.v1 import InteractiveSession\n","# deep sort imports\n","from deep_sort import preprocessing, nn_matching\n","from deep_sort.detection import Detection\n","from deep_sort.tracker import Tracker\n","from tools import generate_detections as gdet\n","\n","import mediapipe as mp"],"metadata":{"id":"l2MauJp3heKv","executionInfo":{"status":"ok","timestamp":1652335963331,"user_tz":-120,"elapsed":3658,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# download yolov4 model weights to data folder\n","!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights -P data/"],"metadata":{"id":"dQmWScHMWY7H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652335964910,"user_tz":-120,"elapsed":1586,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"062d650b-b243-4877-ed60-9c0727251455"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-05-12 06:12:48--  https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights\n","Resolving github.com (github.com)... 140.82.113.4\n","Connecting to github.com (github.com)|140.82.113.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/75388965/ba4b6380-889c-11ea-9751-f994f5961796?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220512%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220512T061248Z&X-Amz-Expires=300&X-Amz-Signature=53c25c1335c6cfc4644983aefdf1912182d04e070b364af4e38f1bd4f462530a&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=75388965&response-content-disposition=attachment%3B%20filename%3Dyolov4.weights&response-content-type=application%2Foctet-stream [following]\n","--2022-05-12 06:12:48--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/75388965/ba4b6380-889c-11ea-9751-f994f5961796?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220512%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220512T061248Z&X-Amz-Expires=300&X-Amz-Signature=53c25c1335c6cfc4644983aefdf1912182d04e070b364af4e38f1bd4f462530a&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=75388965&response-content-disposition=attachment%3B%20filename%3Dyolov4.weights&response-content-type=application%2Foctet-stream\n","Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 257717640 (246M) [application/octet-stream]\n","Saving to: ‘data/yolov4.weights’\n","\n","yolov4.weights      100%[===================>] 245.78M   239MB/s    in 1.0s    \n","\n","2022-05-12 06:12:49 (239 MB/s) - ‘data/yolov4.weights’ saved [257717640/257717640]\n","\n"]}]},{"cell_type":"code","source":["# Convert darknet weights to tensorflow model\n","!python save_model.py --model yolov4"],"metadata":{"id":"69tL2McqWcL9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652336033392,"user_tz":-120,"elapsed":68487,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"4592a754-ddc1-43b1-8e5b-9d8839e4b4d3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"functional_1\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_1 (InputLayer)            [(None, 416, 416, 3) 0                                            \n","__________________________________________________________________________________________________\n","conv2d (Conv2D)                 (None, 416, 416, 32) 864         input_1[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization (BatchNorma (None, 416, 416, 32) 128         conv2d[0][0]                     \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus (TensorFlo [(None, 416, 416, 32 0           batch_normalization[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh (TensorFlowOpL [(None, 416, 416, 32 0           tf_op_layer_Softplus[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul (TensorFlowOpLa [(None, 416, 416, 32 0           batch_normalization[0][0]        \n","                                                                 tf_op_layer_Tanh[0][0]           \n","__________________________________________________________________________________________________\n","zero_padding2d (ZeroPadding2D)  (None, 417, 417, 32) 0           tf_op_layer_Mul[0][0]            \n","__________________________________________________________________________________________________\n","conv2d_1 (Conv2D)               (None, 208, 208, 64) 18432       zero_padding2d[0][0]             \n","__________________________________________________________________________________________________\n","batch_normalization_1 (BatchNor (None, 208, 208, 64) 256         conv2d_1[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_1 (TensorF [(None, 208, 208, 64 0           batch_normalization_1[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_1 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_1[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_1 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_1[0][0]      \n","                                                                 tf_op_layer_Tanh_1[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_3 (Conv2D)               (None, 208, 208, 64) 4096        tf_op_layer_Mul_1[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_3 (BatchNor (None, 208, 208, 64) 256         conv2d_3[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_3 (TensorF [(None, 208, 208, 64 0           batch_normalization_3[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_3 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_3[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_3 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_3[0][0]      \n","                                                                 tf_op_layer_Tanh_3[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_4 (Conv2D)               (None, 208, 208, 32) 2048        tf_op_layer_Mul_3[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_4 (BatchNor (None, 208, 208, 32) 128         conv2d_4[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_4 (TensorF [(None, 208, 208, 32 0           batch_normalization_4[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_4 (TensorFlowO [(None, 208, 208, 32 0           tf_op_layer_Softplus_4[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_4 (TensorFlowOp [(None, 208, 208, 32 0           batch_normalization_4[0][0]      \n","                                                                 tf_op_layer_Tanh_4[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_5 (Conv2D)               (None, 208, 208, 64) 18432       tf_op_layer_Mul_4[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_5 (BatchNor (None, 208, 208, 64) 256         conv2d_5[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_5 (TensorF [(None, 208, 208, 64 0           batch_normalization_5[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_5 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_5[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_5 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_5[0][0]      \n","                                                                 tf_op_layer_Tanh_5[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2 (TensorFlowOp [(None, 208, 208, 64 0           tf_op_layer_Mul_3[0][0]          \n","                                                                 tf_op_layer_Mul_5[0][0]          \n","__________________________________________________________________________________________________\n","conv2d_6 (Conv2D)               (None, 208, 208, 64) 4096        tf_op_layer_AddV2[0][0]          \n","__________________________________________________________________________________________________\n","conv2d_2 (Conv2D)               (None, 208, 208, 64) 4096        tf_op_layer_Mul_1[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_6 (BatchNor (None, 208, 208, 64) 256         conv2d_6[0][0]                   \n","__________________________________________________________________________________________________\n","batch_normalization_2 (BatchNor (None, 208, 208, 64) 256         conv2d_2[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_6 (TensorF [(None, 208, 208, 64 0           batch_normalization_6[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_2 (TensorF [(None, 208, 208, 64 0           batch_normalization_2[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_6 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_6[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_2 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_2[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_6 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_6[0][0]      \n","                                                                 tf_op_layer_Tanh_6[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_2 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_2[0][0]      \n","                                                                 tf_op_layer_Tanh_2[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_concat (TensorFlowO [(None, 208, 208, 12 0           tf_op_layer_Mul_6[0][0]          \n","                                                                 tf_op_layer_Mul_2[0][0]          \n","__________________________________________________________________________________________________\n","conv2d_7 (Conv2D)               (None, 208, 208, 64) 8192        tf_op_layer_concat[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_7 (BatchNor (None, 208, 208, 64) 256         conv2d_7[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_7 (TensorF [(None, 208, 208, 64 0           batch_normalization_7[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_7 (TensorFlowO [(None, 208, 208, 64 0           tf_op_layer_Softplus_7[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_7 (TensorFlowOp [(None, 208, 208, 64 0           batch_normalization_7[0][0]      \n","                                                                 tf_op_layer_Tanh_7[0][0]         \n","__________________________________________________________________________________________________\n","zero_padding2d_1 (ZeroPadding2D (None, 209, 209, 64) 0           tf_op_layer_Mul_7[0][0]          \n","__________________________________________________________________________________________________\n","conv2d_8 (Conv2D)               (None, 104, 104, 128 73728       zero_padding2d_1[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_8 (BatchNor (None, 104, 104, 128 512         conv2d_8[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_8 (TensorF [(None, 104, 104, 12 0           batch_normalization_8[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_8 (TensorFlowO [(None, 104, 104, 12 0           tf_op_layer_Softplus_8[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_8 (TensorFlowOp [(None, 104, 104, 12 0           batch_normalization_8[0][0]      \n","                                                                 tf_op_layer_Tanh_8[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_10 (Conv2D)              (None, 104, 104, 64) 8192        tf_op_layer_Mul_8[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_10 (BatchNo (None, 104, 104, 64) 256         conv2d_10[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_10 (Tensor [(None, 104, 104, 64 0           batch_normalization_10[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_10 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_10[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_10 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_10[0][0]     \n","                                                                 tf_op_layer_Tanh_10[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_11 (Conv2D)              (None, 104, 104, 64) 4096        tf_op_layer_Mul_10[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_11 (BatchNo (None, 104, 104, 64) 256         conv2d_11[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_11 (Tensor [(None, 104, 104, 64 0           batch_normalization_11[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_11 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_11[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_11 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_11[0][0]     \n","                                                                 tf_op_layer_Tanh_11[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_12 (Conv2D)              (None, 104, 104, 64) 36864       tf_op_layer_Mul_11[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_12 (BatchNo (None, 104, 104, 64) 256         conv2d_12[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_12 (Tensor [(None, 104, 104, 64 0           batch_normalization_12[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_12 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_12[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_12 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_12[0][0]     \n","                                                                 tf_op_layer_Tanh_12[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_1 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Mul_10[0][0]         \n","                                                                 tf_op_layer_Mul_12[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_13 (Conv2D)              (None, 104, 104, 64) 4096        tf_op_layer_AddV2_1[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_13 (BatchNo (None, 104, 104, 64) 256         conv2d_13[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_13 (Tensor [(None, 104, 104, 64 0           batch_normalization_13[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_13 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_13[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_13 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_13[0][0]     \n","                                                                 tf_op_layer_Tanh_13[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_14 (Conv2D)              (None, 104, 104, 64) 36864       tf_op_layer_Mul_13[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_14 (BatchNo (None, 104, 104, 64) 256         conv2d_14[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_14 (Tensor [(None, 104, 104, 64 0           batch_normalization_14[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_14 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_14[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_14 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_14[0][0]     \n","                                                                 tf_op_layer_Tanh_14[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_2 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_AddV2_1[0][0]        \n","                                                                 tf_op_layer_Mul_14[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_15 (Conv2D)              (None, 104, 104, 64) 4096        tf_op_layer_AddV2_2[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_9 (Conv2D)               (None, 104, 104, 64) 8192        tf_op_layer_Mul_8[0][0]          \n","__________________________________________________________________________________________________\n","batch_normalization_15 (BatchNo (None, 104, 104, 64) 256         conv2d_15[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_9 (BatchNor (None, 104, 104, 64) 256         conv2d_9[0][0]                   \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_15 (Tensor [(None, 104, 104, 64 0           batch_normalization_15[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_9 (TensorF [(None, 104, 104, 64 0           batch_normalization_9[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_15 (TensorFlow [(None, 104, 104, 64 0           tf_op_layer_Softplus_15[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_9 (TensorFlowO [(None, 104, 104, 64 0           tf_op_layer_Softplus_9[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_15 (TensorFlowO [(None, 104, 104, 64 0           batch_normalization_15[0][0]     \n","                                                                 tf_op_layer_Tanh_15[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_9 (TensorFlowOp [(None, 104, 104, 64 0           batch_normalization_9[0][0]      \n","                                                                 tf_op_layer_Tanh_9[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_1 (TensorFlo [(None, 104, 104, 12 0           tf_op_layer_Mul_15[0][0]         \n","                                                                 tf_op_layer_Mul_9[0][0]          \n","__________________________________________________________________________________________________\n","conv2d_16 (Conv2D)              (None, 104, 104, 128 16384       tf_op_layer_concat_1[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_16 (BatchNo (None, 104, 104, 128 512         conv2d_16[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_16 (Tensor [(None, 104, 104, 12 0           batch_normalization_16[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_16 (TensorFlow [(None, 104, 104, 12 0           tf_op_layer_Softplus_16[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_16 (TensorFlowO [(None, 104, 104, 12 0           batch_normalization_16[0][0]     \n","                                                                 tf_op_layer_Tanh_16[0][0]        \n","__________________________________________________________________________________________________\n","zero_padding2d_2 (ZeroPadding2D (None, 105, 105, 128 0           tf_op_layer_Mul_16[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_17 (Conv2D)              (None, 52, 52, 256)  294912      zero_padding2d_2[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_17 (BatchNo (None, 52, 52, 256)  1024        conv2d_17[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_17 (Tensor [(None, 52, 52, 256) 0           batch_normalization_17[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_17 (TensorFlow [(None, 52, 52, 256) 0           tf_op_layer_Softplus_17[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_17 (TensorFlowO [(None, 52, 52, 256) 0           batch_normalization_17[0][0]     \n","                                                                 tf_op_layer_Tanh_17[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_19 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_Mul_17[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_19 (BatchNo (None, 52, 52, 128)  512         conv2d_19[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_19 (Tensor [(None, 52, 52, 128) 0           batch_normalization_19[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_19 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_19[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_19 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_19[0][0]     \n","                                                                 tf_op_layer_Tanh_19[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_20 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_Mul_19[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_20 (BatchNo (None, 52, 52, 128)  512         conv2d_20[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_20 (Tensor [(None, 52, 52, 128) 0           batch_normalization_20[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_20 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_20[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_20 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_20[0][0]     \n","                                                                 tf_op_layer_Tanh_20[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_21 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_20[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_21 (BatchNo (None, 52, 52, 128)  512         conv2d_21[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_21 (Tensor [(None, 52, 52, 128) 0           batch_normalization_21[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_21 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_21[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_21 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_21[0][0]     \n","                                                                 tf_op_layer_Tanh_21[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_3 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Mul_19[0][0]         \n","                                                                 tf_op_layer_Mul_21[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_22 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_3[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_22 (BatchNo (None, 52, 52, 128)  512         conv2d_22[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_22 (Tensor [(None, 52, 52, 128) 0           batch_normalization_22[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_22 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_22[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_22 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_22[0][0]     \n","                                                                 tf_op_layer_Tanh_22[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_23 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_22[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_23 (BatchNo (None, 52, 52, 128)  512         conv2d_23[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_23 (Tensor [(None, 52, 52, 128) 0           batch_normalization_23[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_23 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_23[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_23 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_23[0][0]     \n","                                                                 tf_op_layer_Tanh_23[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_4 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_3[0][0]        \n","                                                                 tf_op_layer_Mul_23[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_24 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_4[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_24 (BatchNo (None, 52, 52, 128)  512         conv2d_24[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_24 (Tensor [(None, 52, 52, 128) 0           batch_normalization_24[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_24 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_24[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_24 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_24[0][0]     \n","                                                                 tf_op_layer_Tanh_24[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_25 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_24[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_25 (BatchNo (None, 52, 52, 128)  512         conv2d_25[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_25 (Tensor [(None, 52, 52, 128) 0           batch_normalization_25[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_25 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_25[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_25 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_25[0][0]     \n","                                                                 tf_op_layer_Tanh_25[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_5 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_4[0][0]        \n","                                                                 tf_op_layer_Mul_25[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_26 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_5[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_26 (BatchNo (None, 52, 52, 128)  512         conv2d_26[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_26 (Tensor [(None, 52, 52, 128) 0           batch_normalization_26[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_26 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_26[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_26 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_26[0][0]     \n","                                                                 tf_op_layer_Tanh_26[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_27 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_26[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_27 (BatchNo (None, 52, 52, 128)  512         conv2d_27[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_27 (Tensor [(None, 52, 52, 128) 0           batch_normalization_27[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_27 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_27[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_27 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_27[0][0]     \n","                                                                 tf_op_layer_Tanh_27[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_6 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_5[0][0]        \n","                                                                 tf_op_layer_Mul_27[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_28 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_6[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_28 (BatchNo (None, 52, 52, 128)  512         conv2d_28[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_28 (Tensor [(None, 52, 52, 128) 0           batch_normalization_28[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_28 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_28[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_28 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_28[0][0]     \n","                                                                 tf_op_layer_Tanh_28[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_29 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_28[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_29 (BatchNo (None, 52, 52, 128)  512         conv2d_29[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_29 (Tensor [(None, 52, 52, 128) 0           batch_normalization_29[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_29 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_29[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_29 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_29[0][0]     \n","                                                                 tf_op_layer_Tanh_29[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_7 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_6[0][0]        \n","                                                                 tf_op_layer_Mul_29[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_30 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_7[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_30 (BatchNo (None, 52, 52, 128)  512         conv2d_30[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_30 (Tensor [(None, 52, 52, 128) 0           batch_normalization_30[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_30 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_30[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_30 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_30[0][0]     \n","                                                                 tf_op_layer_Tanh_30[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_31 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_30[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_31 (BatchNo (None, 52, 52, 128)  512         conv2d_31[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_31 (Tensor [(None, 52, 52, 128) 0           batch_normalization_31[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_31 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_31[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_31 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_31[0][0]     \n","                                                                 tf_op_layer_Tanh_31[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_8 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_7[0][0]        \n","                                                                 tf_op_layer_Mul_31[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_32 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_8[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_32 (BatchNo (None, 52, 52, 128)  512         conv2d_32[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_32 (Tensor [(None, 52, 52, 128) 0           batch_normalization_32[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_32 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_32[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_32 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_32[0][0]     \n","                                                                 tf_op_layer_Tanh_32[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_33 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_32[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_33 (BatchNo (None, 52, 52, 128)  512         conv2d_33[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_33 (Tensor [(None, 52, 52, 128) 0           batch_normalization_33[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_33 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_33[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_33 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_33[0][0]     \n","                                                                 tf_op_layer_Tanh_33[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_9 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_AddV2_8[0][0]        \n","                                                                 tf_op_layer_Mul_33[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_34 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_9[0][0]        \n","__________________________________________________________________________________________________\n","batch_normalization_34 (BatchNo (None, 52, 52, 128)  512         conv2d_34[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_34 (Tensor [(None, 52, 52, 128) 0           batch_normalization_34[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_34 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_34[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_34 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_34[0][0]     \n","                                                                 tf_op_layer_Tanh_34[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_35 (Conv2D)              (None, 52, 52, 128)  147456      tf_op_layer_Mul_34[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_35 (BatchNo (None, 52, 52, 128)  512         conv2d_35[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_35 (Tensor [(None, 52, 52, 128) 0           batch_normalization_35[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_35 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_35[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_35 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_35[0][0]     \n","                                                                 tf_op_layer_Tanh_35[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_10 (TensorFlo [(None, 52, 52, 128) 0           tf_op_layer_AddV2_9[0][0]        \n","                                                                 tf_op_layer_Mul_35[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_36 (Conv2D)              (None, 52, 52, 128)  16384       tf_op_layer_AddV2_10[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_18 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_Mul_17[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_36 (BatchNo (None, 52, 52, 128)  512         conv2d_36[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_18 (BatchNo (None, 52, 52, 128)  512         conv2d_18[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_36 (Tensor [(None, 52, 52, 128) 0           batch_normalization_36[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_18 (Tensor [(None, 52, 52, 128) 0           batch_normalization_18[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_36 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_36[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_18 (TensorFlow [(None, 52, 52, 128) 0           tf_op_layer_Softplus_18[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_36 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_36[0][0]     \n","                                                                 tf_op_layer_Tanh_36[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_18 (TensorFlowO [(None, 52, 52, 128) 0           batch_normalization_18[0][0]     \n","                                                                 tf_op_layer_Tanh_18[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_2 (TensorFlo [(None, 52, 52, 256) 0           tf_op_layer_Mul_36[0][0]         \n","                                                                 tf_op_layer_Mul_18[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_37 (Conv2D)              (None, 52, 52, 256)  65536       tf_op_layer_concat_2[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_37 (BatchNo (None, 52, 52, 256)  1024        conv2d_37[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_37 (Tensor [(None, 52, 52, 256) 0           batch_normalization_37[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_37 (TensorFlow [(None, 52, 52, 256) 0           tf_op_layer_Softplus_37[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_37 (TensorFlowO [(None, 52, 52, 256) 0           batch_normalization_37[0][0]     \n","                                                                 tf_op_layer_Tanh_37[0][0]        \n","__________________________________________________________________________________________________\n","zero_padding2d_3 (ZeroPadding2D (None, 53, 53, 256)  0           tf_op_layer_Mul_37[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_38 (Conv2D)              (None, 26, 26, 512)  1179648     zero_padding2d_3[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_38 (BatchNo (None, 26, 26, 512)  2048        conv2d_38[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_38 (Tensor [(None, 26, 26, 512) 0           batch_normalization_38[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_38 (TensorFlow [(None, 26, 26, 512) 0           tf_op_layer_Softplus_38[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_38 (TensorFlowO [(None, 26, 26, 512) 0           batch_normalization_38[0][0]     \n","                                                                 tf_op_layer_Tanh_38[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_40 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_Mul_38[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_40 (BatchNo (None, 26, 26, 256)  1024        conv2d_40[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_40 (Tensor [(None, 26, 26, 256) 0           batch_normalization_40[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_40 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_40[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_40 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_40[0][0]     \n","                                                                 tf_op_layer_Tanh_40[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_41 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_Mul_40[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_41 (BatchNo (None, 26, 26, 256)  1024        conv2d_41[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_41 (Tensor [(None, 26, 26, 256) 0           batch_normalization_41[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_41 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_41[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_41 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_41[0][0]     \n","                                                                 tf_op_layer_Tanh_41[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_42 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_41[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_42 (BatchNo (None, 26, 26, 256)  1024        conv2d_42[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_42 (Tensor [(None, 26, 26, 256) 0           batch_normalization_42[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_42 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_42[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_42 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_42[0][0]     \n","                                                                 tf_op_layer_Tanh_42[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_11 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_Mul_40[0][0]         \n","                                                                 tf_op_layer_Mul_42[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_43 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_11[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_43 (BatchNo (None, 26, 26, 256)  1024        conv2d_43[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_43 (Tensor [(None, 26, 26, 256) 0           batch_normalization_43[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_43 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_43[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_43 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_43[0][0]     \n","                                                                 tf_op_layer_Tanh_43[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_44 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_43[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_44 (BatchNo (None, 26, 26, 256)  1024        conv2d_44[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_44 (Tensor [(None, 26, 26, 256) 0           batch_normalization_44[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_44 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_44[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_44 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_44[0][0]     \n","                                                                 tf_op_layer_Tanh_44[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_12 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_11[0][0]       \n","                                                                 tf_op_layer_Mul_44[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_45 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_12[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_45 (BatchNo (None, 26, 26, 256)  1024        conv2d_45[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_45 (Tensor [(None, 26, 26, 256) 0           batch_normalization_45[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_45 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_45[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_45 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_45[0][0]     \n","                                                                 tf_op_layer_Tanh_45[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_46 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_45[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_46 (BatchNo (None, 26, 26, 256)  1024        conv2d_46[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_46 (Tensor [(None, 26, 26, 256) 0           batch_normalization_46[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_46 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_46[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_46 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_46[0][0]     \n","                                                                 tf_op_layer_Tanh_46[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_13 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_12[0][0]       \n","                                                                 tf_op_layer_Mul_46[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_47 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_13[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_47 (BatchNo (None, 26, 26, 256)  1024        conv2d_47[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_47 (Tensor [(None, 26, 26, 256) 0           batch_normalization_47[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_47 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_47[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_47 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_47[0][0]     \n","                                                                 tf_op_layer_Tanh_47[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_48 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_47[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_48 (BatchNo (None, 26, 26, 256)  1024        conv2d_48[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_48 (Tensor [(None, 26, 26, 256) 0           batch_normalization_48[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_48 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_48[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_48 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_48[0][0]     \n","                                                                 tf_op_layer_Tanh_48[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_14 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_13[0][0]       \n","                                                                 tf_op_layer_Mul_48[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_49 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_14[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_49 (BatchNo (None, 26, 26, 256)  1024        conv2d_49[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_49 (Tensor [(None, 26, 26, 256) 0           batch_normalization_49[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_49 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_49[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_49 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_49[0][0]     \n","                                                                 tf_op_layer_Tanh_49[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_50 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_49[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_50 (BatchNo (None, 26, 26, 256)  1024        conv2d_50[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_50 (Tensor [(None, 26, 26, 256) 0           batch_normalization_50[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_50 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_50[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_50 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_50[0][0]     \n","                                                                 tf_op_layer_Tanh_50[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_15 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_14[0][0]       \n","                                                                 tf_op_layer_Mul_50[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_51 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_15[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_51 (BatchNo (None, 26, 26, 256)  1024        conv2d_51[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_51 (Tensor [(None, 26, 26, 256) 0           batch_normalization_51[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_51 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_51[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_51 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_51[0][0]     \n","                                                                 tf_op_layer_Tanh_51[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_52 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_51[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_52 (BatchNo (None, 26, 26, 256)  1024        conv2d_52[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_52 (Tensor [(None, 26, 26, 256) 0           batch_normalization_52[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_52 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_52[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_52 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_52[0][0]     \n","                                                                 tf_op_layer_Tanh_52[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_16 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_15[0][0]       \n","                                                                 tf_op_layer_Mul_52[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_53 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_16[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_53 (BatchNo (None, 26, 26, 256)  1024        conv2d_53[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_53 (Tensor [(None, 26, 26, 256) 0           batch_normalization_53[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_53 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_53[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_53 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_53[0][0]     \n","                                                                 tf_op_layer_Tanh_53[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_54 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_53[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_54 (BatchNo (None, 26, 26, 256)  1024        conv2d_54[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_54 (Tensor [(None, 26, 26, 256) 0           batch_normalization_54[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_54 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_54[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_54 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_54[0][0]     \n","                                                                 tf_op_layer_Tanh_54[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_17 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_16[0][0]       \n","                                                                 tf_op_layer_Mul_54[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_55 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_17[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_55 (BatchNo (None, 26, 26, 256)  1024        conv2d_55[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_55 (Tensor [(None, 26, 26, 256) 0           batch_normalization_55[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_55 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_55[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_55 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_55[0][0]     \n","                                                                 tf_op_layer_Tanh_55[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_56 (Conv2D)              (None, 26, 26, 256)  589824      tf_op_layer_Mul_55[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_56 (BatchNo (None, 26, 26, 256)  1024        conv2d_56[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_56 (Tensor [(None, 26, 26, 256) 0           batch_normalization_56[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_56 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_56[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_56 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_56[0][0]     \n","                                                                 tf_op_layer_Tanh_56[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_18 (TensorFlo [(None, 26, 26, 256) 0           tf_op_layer_AddV2_17[0][0]       \n","                                                                 tf_op_layer_Mul_56[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_57 (Conv2D)              (None, 26, 26, 256)  65536       tf_op_layer_AddV2_18[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_39 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_Mul_38[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_57 (BatchNo (None, 26, 26, 256)  1024        conv2d_57[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_39 (BatchNo (None, 26, 26, 256)  1024        conv2d_39[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_57 (Tensor [(None, 26, 26, 256) 0           batch_normalization_57[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_39 (Tensor [(None, 26, 26, 256) 0           batch_normalization_39[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_57 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_57[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_39 (TensorFlow [(None, 26, 26, 256) 0           tf_op_layer_Softplus_39[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_57 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_57[0][0]     \n","                                                                 tf_op_layer_Tanh_57[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_39 (TensorFlowO [(None, 26, 26, 256) 0           batch_normalization_39[0][0]     \n","                                                                 tf_op_layer_Tanh_39[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_3 (TensorFlo [(None, 26, 26, 512) 0           tf_op_layer_Mul_57[0][0]         \n","                                                                 tf_op_layer_Mul_39[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_58 (Conv2D)              (None, 26, 26, 512)  262144      tf_op_layer_concat_3[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_58 (BatchNo (None, 26, 26, 512)  2048        conv2d_58[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_58 (Tensor [(None, 26, 26, 512) 0           batch_normalization_58[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_58 (TensorFlow [(None, 26, 26, 512) 0           tf_op_layer_Softplus_58[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_58 (TensorFlowO [(None, 26, 26, 512) 0           batch_normalization_58[0][0]     \n","                                                                 tf_op_layer_Tanh_58[0][0]        \n","__________________________________________________________________________________________________\n","zero_padding2d_4 (ZeroPadding2D (None, 27, 27, 512)  0           tf_op_layer_Mul_58[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_59 (Conv2D)              (None, 13, 13, 1024) 4718592     zero_padding2d_4[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_59 (BatchNo (None, 13, 13, 1024) 4096        conv2d_59[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_59 (Tensor [(None, 13, 13, 1024 0           batch_normalization_59[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_59 (TensorFlow [(None, 13, 13, 1024 0           tf_op_layer_Softplus_59[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_59 (TensorFlowO [(None, 13, 13, 1024 0           batch_normalization_59[0][0]     \n","                                                                 tf_op_layer_Tanh_59[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_61 (Conv2D)              (None, 13, 13, 512)  524288      tf_op_layer_Mul_59[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_61 (BatchNo (None, 13, 13, 512)  2048        conv2d_61[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_61 (Tensor [(None, 13, 13, 512) 0           batch_normalization_61[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_61 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_61[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_61 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_61[0][0]     \n","                                                                 tf_op_layer_Tanh_61[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_62 (Conv2D)              (None, 13, 13, 512)  262144      tf_op_layer_Mul_61[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_62 (BatchNo (None, 13, 13, 512)  2048        conv2d_62[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_62 (Tensor [(None, 13, 13, 512) 0           batch_normalization_62[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_62 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_62[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_62 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_62[0][0]     \n","                                                                 tf_op_layer_Tanh_62[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_63 (Conv2D)              (None, 13, 13, 512)  2359296     tf_op_layer_Mul_62[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_63 (BatchNo (None, 13, 13, 512)  2048        conv2d_63[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_63 (Tensor [(None, 13, 13, 512) 0           batch_normalization_63[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_63 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_63[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_63 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_63[0][0]     \n","                                                                 tf_op_layer_Tanh_63[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_19 (TensorFlo [(None, 13, 13, 512) 0           tf_op_layer_Mul_61[0][0]         \n","                                                                 tf_op_layer_Mul_63[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_64 (Conv2D)              (None, 13, 13, 512)  262144      tf_op_layer_AddV2_19[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_64 (BatchNo (None, 13, 13, 512)  2048        conv2d_64[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_64 (Tensor [(None, 13, 13, 512) 0           batch_normalization_64[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_64 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_64[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_64 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_64[0][0]     \n","                                                                 tf_op_layer_Tanh_64[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_65 (Conv2D)              (None, 13, 13, 512)  2359296     tf_op_layer_Mul_64[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_65 (BatchNo (None, 13, 13, 512)  2048        conv2d_65[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_65 (Tensor [(None, 13, 13, 512) 0           batch_normalization_65[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_65 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_65[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_65 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_65[0][0]     \n","                                                                 tf_op_layer_Tanh_65[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_20 (TensorFlo [(None, 13, 13, 512) 0           tf_op_layer_AddV2_19[0][0]       \n","                                                                 tf_op_layer_Mul_65[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_66 (Conv2D)              (None, 13, 13, 512)  262144      tf_op_layer_AddV2_20[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_66 (BatchNo (None, 13, 13, 512)  2048        conv2d_66[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_66 (Tensor [(None, 13, 13, 512) 0           batch_normalization_66[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_66 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_66[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_66 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_66[0][0]     \n","                                                                 tf_op_layer_Tanh_66[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_67 (Conv2D)              (None, 13, 13, 512)  2359296     tf_op_layer_Mul_66[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_67 (BatchNo (None, 13, 13, 512)  2048        conv2d_67[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_67 (Tensor [(None, 13, 13, 512) 0           batch_normalization_67[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_67 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_67[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_67 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_67[0][0]     \n","                                                                 tf_op_layer_Tanh_67[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_21 (TensorFlo [(None, 13, 13, 512) 0           tf_op_layer_AddV2_20[0][0]       \n","                                                                 tf_op_layer_Mul_67[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_68 (Conv2D)              (None, 13, 13, 512)  262144      tf_op_layer_AddV2_21[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_68 (BatchNo (None, 13, 13, 512)  2048        conv2d_68[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_68 (Tensor [(None, 13, 13, 512) 0           batch_normalization_68[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_68 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_68[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_68 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_68[0][0]     \n","                                                                 tf_op_layer_Tanh_68[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_69 (Conv2D)              (None, 13, 13, 512)  2359296     tf_op_layer_Mul_68[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_69 (BatchNo (None, 13, 13, 512)  2048        conv2d_69[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_69 (Tensor [(None, 13, 13, 512) 0           batch_normalization_69[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_69 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_69[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_69 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_69[0][0]     \n","                                                                 tf_op_layer_Tanh_69[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_22 (TensorFlo [(None, 13, 13, 512) 0           tf_op_layer_AddV2_21[0][0]       \n","                                                                 tf_op_layer_Mul_69[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_70 (Conv2D)              (None, 13, 13, 512)  262144      tf_op_layer_AddV2_22[0][0]       \n","__________________________________________________________________________________________________\n","conv2d_60 (Conv2D)              (None, 13, 13, 512)  524288      tf_op_layer_Mul_59[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_70 (BatchNo (None, 13, 13, 512)  2048        conv2d_70[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_60 (BatchNo (None, 13, 13, 512)  2048        conv2d_60[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_70 (Tensor [(None, 13, 13, 512) 0           batch_normalization_70[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_60 (Tensor [(None, 13, 13, 512) 0           batch_normalization_60[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_70 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_70[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_60 (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_Softplus_60[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_70 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_70[0][0]     \n","                                                                 tf_op_layer_Tanh_70[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_60 (TensorFlowO [(None, 13, 13, 512) 0           batch_normalization_60[0][0]     \n","                                                                 tf_op_layer_Tanh_60[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_4 (TensorFlo [(None, 13, 13, 1024 0           tf_op_layer_Mul_70[0][0]         \n","                                                                 tf_op_layer_Mul_60[0][0]         \n","__________________________________________________________________________________________________\n","conv2d_71 (Conv2D)              (None, 13, 13, 1024) 1048576     tf_op_layer_concat_4[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_71 (BatchNo (None, 13, 13, 1024) 4096        conv2d_71[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Softplus_71 (Tensor [(None, 13, 13, 1024 0           batch_normalization_71[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Tanh_71 (TensorFlow [(None, 13, 13, 1024 0           tf_op_layer_Softplus_71[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_71 (TensorFlowO [(None, 13, 13, 1024 0           batch_normalization_71[0][0]     \n","                                                                 tf_op_layer_Tanh_71[0][0]        \n","__________________________________________________________________________________________________\n","conv2d_72 (Conv2D)              (None, 13, 13, 512)  524288      tf_op_layer_Mul_71[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_72 (BatchNo (None, 13, 13, 512)  2048        conv2d_72[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu (TensorFl [(None, 13, 13, 512) 0           batch_normalization_72[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_73 (Conv2D)              (None, 13, 13, 1024) 4718592     tf_op_layer_LeakyRelu[0][0]      \n","__________________________________________________________________________________________________\n","batch_normalization_73 (BatchNo (None, 13, 13, 1024) 4096        conv2d_73[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_1 (Tensor [(None, 13, 13, 1024 0           batch_normalization_73[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_74 (Conv2D)              (None, 13, 13, 512)  524288      tf_op_layer_LeakyRelu_1[0][0]    \n","__________________________________________________________________________________________________\n","batch_normalization_74 (BatchNo (None, 13, 13, 512)  2048        conv2d_74[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_2 (Tensor [(None, 13, 13, 512) 0           batch_normalization_74[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_MaxPool (TensorFlow [(None, 13, 13, 512) 0           tf_op_layer_LeakyRelu_2[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_MaxPool_1 (TensorFl [(None, 13, 13, 512) 0           tf_op_layer_LeakyRelu_2[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_MaxPool_2 (TensorFl [(None, 13, 13, 512) 0           tf_op_layer_LeakyRelu_2[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_5 (TensorFlo [(None, 13, 13, 2048 0           tf_op_layer_MaxPool[0][0]        \n","                                                                 tf_op_layer_MaxPool_1[0][0]      \n","                                                                 tf_op_layer_MaxPool_2[0][0]      \n","                                                                 tf_op_layer_LeakyRelu_2[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_75 (Conv2D)              (None, 13, 13, 512)  1048576     tf_op_layer_concat_5[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_75 (BatchNo (None, 13, 13, 512)  2048        conv2d_75[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_3 (Tensor [(None, 13, 13, 512) 0           batch_normalization_75[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_76 (Conv2D)              (None, 13, 13, 1024) 4718592     tf_op_layer_LeakyRelu_3[0][0]    \n","__________________________________________________________________________________________________\n","batch_normalization_76 (BatchNo (None, 13, 13, 1024) 4096        conv2d_76[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_4 (Tensor [(None, 13, 13, 1024 0           batch_normalization_76[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_77 (Conv2D)              (None, 13, 13, 512)  524288      tf_op_layer_LeakyRelu_4[0][0]    \n","__________________________________________________________________________________________________\n","batch_normalization_77 (BatchNo (None, 13, 13, 512)  2048        conv2d_77[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_5 (Tensor [(None, 13, 13, 512) 0           batch_normalization_77[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_78 (Conv2D)              (None, 13, 13, 256)  131072      tf_op_layer_LeakyRelu_5[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_79 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_Mul_58[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_78 (BatchNo (None, 13, 13, 256)  1024        conv2d_78[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_79 (BatchNo (None, 26, 26, 256)  1024        conv2d_79[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_6 (Tensor [(None, 13, 13, 256) 0           batch_normalization_78[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_7 (Tensor [(None, 26, 26, 256) 0           batch_normalization_79[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_ResizeBilinear (Ten [(None, 26, 26, 256) 0           tf_op_layer_LeakyRelu_6[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_6 (TensorFlo [(None, 26, 26, 512) 0           tf_op_layer_LeakyRelu_7[0][0]    \n","                                                                 tf_op_layer_ResizeBilinear[0][0] \n","__________________________________________________________________________________________________\n","conv2d_80 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_concat_6[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_80 (BatchNo (None, 26, 26, 256)  1024        conv2d_80[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_8 (Tensor [(None, 26, 26, 256) 0           batch_normalization_80[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_81 (Conv2D)              (None, 26, 26, 512)  1179648     tf_op_layer_LeakyRelu_8[0][0]    \n","__________________________________________________________________________________________________\n","batch_normalization_81 (BatchNo (None, 26, 26, 512)  2048        conv2d_81[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_9 (Tensor [(None, 26, 26, 512) 0           batch_normalization_81[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_82 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_LeakyRelu_9[0][0]    \n","__________________________________________________________________________________________________\n","batch_normalization_82 (BatchNo (None, 26, 26, 256)  1024        conv2d_82[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_10 (Tenso [(None, 26, 26, 256) 0           batch_normalization_82[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_83 (Conv2D)              (None, 26, 26, 512)  1179648     tf_op_layer_LeakyRelu_10[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_83 (BatchNo (None, 26, 26, 512)  2048        conv2d_83[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_11 (Tenso [(None, 26, 26, 512) 0           batch_normalization_83[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_84 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_LeakyRelu_11[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_84 (BatchNo (None, 26, 26, 256)  1024        conv2d_84[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_12 (Tenso [(None, 26, 26, 256) 0           batch_normalization_84[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_85 (Conv2D)              (None, 26, 26, 128)  32768       tf_op_layer_LeakyRelu_12[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_86 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_Mul_37[0][0]         \n","__________________________________________________________________________________________________\n","batch_normalization_85 (BatchNo (None, 26, 26, 128)  512         conv2d_85[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_86 (BatchNo (None, 52, 52, 128)  512         conv2d_86[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_13 (Tenso [(None, 26, 26, 128) 0           batch_normalization_85[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_14 (Tenso [(None, 52, 52, 128) 0           batch_normalization_86[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_ResizeBilinear_1 (T [(None, 52, 52, 128) 0           tf_op_layer_LeakyRelu_13[0][0]   \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_7 (TensorFlo [(None, 52, 52, 256) 0           tf_op_layer_LeakyRelu_14[0][0]   \n","                                                                 tf_op_layer_ResizeBilinear_1[0][0\n","__________________________________________________________________________________________________\n","conv2d_87 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_concat_7[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_87 (BatchNo (None, 52, 52, 128)  512         conv2d_87[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_15 (Tenso [(None, 52, 52, 128) 0           batch_normalization_87[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_88 (Conv2D)              (None, 52, 52, 256)  294912      tf_op_layer_LeakyRelu_15[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_88 (BatchNo (None, 52, 52, 256)  1024        conv2d_88[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_16 (Tenso [(None, 52, 52, 256) 0           batch_normalization_88[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_89 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_LeakyRelu_16[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_89 (BatchNo (None, 52, 52, 128)  512         conv2d_89[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_17 (Tenso [(None, 52, 52, 128) 0           batch_normalization_89[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_90 (Conv2D)              (None, 52, 52, 256)  294912      tf_op_layer_LeakyRelu_17[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_90 (BatchNo (None, 52, 52, 256)  1024        conv2d_90[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_18 (Tenso [(None, 52, 52, 256) 0           batch_normalization_90[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_91 (Conv2D)              (None, 52, 52, 128)  32768       tf_op_layer_LeakyRelu_18[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_91 (BatchNo (None, 52, 52, 128)  512         conv2d_91[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_19 (Tenso [(None, 52, 52, 128) 0           batch_normalization_91[0][0]     \n","__________________________________________________________________________________________________\n","zero_padding2d_5 (ZeroPadding2D (None, 53, 53, 128)  0           tf_op_layer_LeakyRelu_19[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_94 (Conv2D)              (None, 26, 26, 256)  294912      zero_padding2d_5[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_93 (BatchNo (None, 26, 26, 256)  1024        conv2d_94[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_21 (Tenso [(None, 26, 26, 256) 0           batch_normalization_93[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_8 (TensorFlo [(None, 26, 26, 512) 0           tf_op_layer_LeakyRelu_21[0][0]   \n","                                                                 tf_op_layer_LeakyRelu_12[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_95 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_concat_8[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_94 (BatchNo (None, 26, 26, 256)  1024        conv2d_95[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_22 (Tenso [(None, 26, 26, 256) 0           batch_normalization_94[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_96 (Conv2D)              (None, 26, 26, 512)  1179648     tf_op_layer_LeakyRelu_22[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_95 (BatchNo (None, 26, 26, 512)  2048        conv2d_96[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_23 (Tenso [(None, 26, 26, 512) 0           batch_normalization_95[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_97 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_LeakyRelu_23[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_96 (BatchNo (None, 26, 26, 256)  1024        conv2d_97[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_24 (Tenso [(None, 26, 26, 256) 0           batch_normalization_96[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_98 (Conv2D)              (None, 26, 26, 512)  1179648     tf_op_layer_LeakyRelu_24[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_97 (BatchNo (None, 26, 26, 512)  2048        conv2d_98[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_25 (Tenso [(None, 26, 26, 512) 0           batch_normalization_97[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_99 (Conv2D)              (None, 26, 26, 256)  131072      tf_op_layer_LeakyRelu_25[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_98 (BatchNo (None, 26, 26, 256)  1024        conv2d_99[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_26 (Tenso [(None, 26, 26, 256) 0           batch_normalization_98[0][0]     \n","__________________________________________________________________________________________________\n","zero_padding2d_6 (ZeroPadding2D (None, 27, 27, 256)  0           tf_op_layer_LeakyRelu_26[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_102 (Conv2D)             (None, 13, 13, 512)  1179648     zero_padding2d_6[0][0]           \n","__________________________________________________________________________________________________\n","batch_normalization_100 (BatchN (None, 13, 13, 512)  2048        conv2d_102[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_28 (Tenso [(None, 13, 13, 512) 0           batch_normalization_100[0][0]    \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_9 (TensorFlo [(None, 13, 13, 1024 0           tf_op_layer_LeakyRelu_28[0][0]   \n","                                                                 tf_op_layer_LeakyRelu_5[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_103 (Conv2D)             (None, 13, 13, 512)  524288      tf_op_layer_concat_9[0][0]       \n","__________________________________________________________________________________________________\n","batch_normalization_101 (BatchN (None, 13, 13, 512)  2048        conv2d_103[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_29 (Tenso [(None, 13, 13, 512) 0           batch_normalization_101[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_104 (Conv2D)             (None, 13, 13, 1024) 4718592     tf_op_layer_LeakyRelu_29[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_102 (BatchN (None, 13, 13, 1024) 4096        conv2d_104[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_30 (Tenso [(None, 13, 13, 1024 0           batch_normalization_102[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_105 (Conv2D)             (None, 13, 13, 512)  524288      tf_op_layer_LeakyRelu_30[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_103 (BatchN (None, 13, 13, 512)  2048        conv2d_105[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_31 (Tenso [(None, 13, 13, 512) 0           batch_normalization_103[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_106 (Conv2D)             (None, 13, 13, 1024) 4718592     tf_op_layer_LeakyRelu_31[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_104 (BatchN (None, 13, 13, 1024) 4096        conv2d_106[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_32 (Tenso [(None, 13, 13, 1024 0           batch_normalization_104[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_107 (Conv2D)             (None, 13, 13, 512)  524288      tf_op_layer_LeakyRelu_32[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_105 (BatchN (None, 13, 13, 512)  2048        conv2d_107[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_33 (Tenso [(None, 13, 13, 512) 0           batch_normalization_105[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_92 (Conv2D)              (None, 52, 52, 256)  294912      tf_op_layer_LeakyRelu_19[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_100 (Conv2D)             (None, 26, 26, 512)  1179648     tf_op_layer_LeakyRelu_26[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_108 (Conv2D)             (None, 13, 13, 1024) 4718592     tf_op_layer_LeakyRelu_33[0][0]   \n","__________________________________________________________________________________________________\n","batch_normalization_92 (BatchNo (None, 52, 52, 256)  1024        conv2d_92[0][0]                  \n","__________________________________________________________________________________________________\n","batch_normalization_99 (BatchNo (None, 26, 26, 512)  2048        conv2d_100[0][0]                 \n","__________________________________________________________________________________________________\n","batch_normalization_106 (BatchN (None, 13, 13, 1024) 4096        conv2d_108[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_20 (Tenso [(None, 52, 52, 256) 0           batch_normalization_92[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_27 (Tenso [(None, 26, 26, 512) 0           batch_normalization_99[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_LeakyRelu_34 (Tenso [(None, 13, 13, 1024 0           batch_normalization_106[0][0]    \n","__________________________________________________________________________________________________\n","conv2d_93 (Conv2D)              (None, 52, 52, 255)  65535       tf_op_layer_LeakyRelu_20[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_101 (Conv2D)             (None, 26, 26, 255)  130815      tf_op_layer_LeakyRelu_27[0][0]   \n","__________________________________________________________________________________________________\n","conv2d_109 (Conv2D)             (None, 13, 13, 255)  261375      tf_op_layer_LeakyRelu_34[0][0]   \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape (TensorFlowOp [(4,)]               0           conv2d_93[0][0]                  \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_1 (TensorFlow [(4,)]               0           conv2d_101[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_2 (TensorFlow [(4,)]               0           conv2d_109[0][0]                 \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice (Tens [()]                 0           tf_op_layer_Shape[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_1 (Te [()]                 0           tf_op_layer_Shape_1[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_2 (Te [()]                 0           tf_op_layer_Shape_2[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape/shape (Tens [(5,)]               0           tf_op_layer_strided_slice[0][0]  \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_3/shape (Te [(5,)]               0           tf_op_layer_strided_slice_1[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_6/shape (Te [(5,)]               0           tf_op_layer_strided_slice_2[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape (TensorFlow [(None, 52, 52, 3, 8 0           conv2d_93[0][0]                  \n","                                                                 tf_op_layer_Reshape/shape[0][0]  \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_3 (TensorFl [(None, 26, 26, 3, 8 0           conv2d_101[0][0]                 \n","                                                                 tf_op_layer_Reshape_3/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_6 (TensorFl [(None, 13, 13, 3, 8 0           conv2d_109[0][0]                 \n","                                                                 tf_op_layer_Reshape_6/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_split (TensorFlowOp [(None, 52, 52, 3, 2 0           tf_op_layer_Reshape[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_split_1 (TensorFlow [(None, 26, 26, 3, 2 0           tf_op_layer_Reshape_3[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_split_2 (TensorFlow [(None, 13, 13, 3, 2 0           tf_op_layer_Reshape_6[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid (TensorFlow [(None, 52, 52, 3, 2 0           tf_op_layer_split[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile/multiples (Ten [(5,)]               0           tf_op_layer_strided_slice[0][0]  \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_3 (TensorFl [(None, 26, 26, 3, 2 0           tf_op_layer_split_1[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile_1/multiples (T [(5,)]               0           tf_op_layer_strided_slice_1[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_6 (TensorFl [(None, 13, 13, 3, 2 0           tf_op_layer_split_2[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile_2/multiples (T [(5,)]               0           tf_op_layer_strided_slice_2[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_72 (TensorFlowO [(None, 52, 52, 3, 2 0           tf_op_layer_Sigmoid[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile (TensorFlowOpL [(None, 52, 52, 3, 2 0           tf_op_layer_Tile/multiples[0][0] \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_76 (TensorFlowO [(None, 26, 26, 3, 2 0           tf_op_layer_Sigmoid_3[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile_1 (TensorFlowO [(None, 26, 26, 3, 2 0           tf_op_layer_Tile_1/multiples[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_80 (TensorFlowO [(None, 13, 13, 3, 2 0           tf_op_layer_Sigmoid_6[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Tile_2 (TensorFlowO [(None, 13, 13, 3, 2 0           tf_op_layer_Tile_2/multiples[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_Sub (TensorFlowOpLa [(None, 52, 52, 3, 2 0           tf_op_layer_Mul_72[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Cast (TensorFlowOpL [(None, 52, 52, 3, 2 0           tf_op_layer_Tile[0][0]           \n","__________________________________________________________________________________________________\n","tf_op_layer_Sub_1 (TensorFlowOp [(None, 26, 26, 3, 2 0           tf_op_layer_Mul_76[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Cast_1 (TensorFlowO [(None, 26, 26, 3, 2 0           tf_op_layer_Tile_1[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Sub_2 (TensorFlowOp [(None, 13, 13, 3, 2 0           tf_op_layer_Mul_80[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Cast_2 (TensorFlowO [(None, 13, 13, 3, 2 0           tf_op_layer_Tile_2[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_23 (TensorFlo [(None, 52, 52, 3, 2 0           tf_op_layer_Sub[0][0]            \n","                                                                 tf_op_layer_Cast[0][0]           \n","__________________________________________________________________________________________________\n","tf_op_layer_Exp (TensorFlowOpLa [(None, 52, 52, 3, 2 0           tf_op_layer_split[0][1]          \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_24 (TensorFlo [(None, 26, 26, 3, 2 0           tf_op_layer_Sub_1[0][0]          \n","                                                                 tf_op_layer_Cast_1[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Exp_1 (TensorFlowOp [(None, 26, 26, 3, 2 0           tf_op_layer_split_1[0][1]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_25 (TensorFlo [(None, 13, 13, 3, 2 0           tf_op_layer_Sub_2[0][0]          \n","                                                                 tf_op_layer_Cast_2[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Exp_2 (TensorFlowOp [(None, 13, 13, 3, 2 0           tf_op_layer_split_2[0][1]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_73 (TensorFlowO [(None, 52, 52, 3, 2 0           tf_op_layer_AddV2_23[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_74 (TensorFlowO [(None, 52, 52, 3, 2 0           tf_op_layer_Exp[0][0]            \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_77 (TensorFlowO [(None, 26, 26, 3, 2 0           tf_op_layer_AddV2_24[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_78 (TensorFlowO [(None, 26, 26, 3, 2 0           tf_op_layer_Exp_1[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_81 (TensorFlowO [(None, 13, 13, 3, 2 0           tf_op_layer_AddV2_25[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_82 (TensorFlowO [(None, 13, 13, 3, 2 0           tf_op_layer_Exp_2[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_10 (TensorFl [(None, 52, 52, 3, 4 0           tf_op_layer_Mul_73[0][0]         \n","                                                                 tf_op_layer_Mul_74[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_2/shape (Te [(3,)]               0           tf_op_layer_strided_slice[0][0]  \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_11 (TensorFl [(None, 26, 26, 3, 4 0           tf_op_layer_Mul_77[0][0]         \n","                                                                 tf_op_layer_Mul_78[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_5/shape (Te [(3,)]               0           tf_op_layer_strided_slice_1[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_concat_12 (TensorFl [(None, 13, 13, 3, 4 0           tf_op_layer_Mul_81[0][0]         \n","                                                                 tf_op_layer_Mul_82[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_8/shape (Te [(3,)]               0           tf_op_layer_strided_slice_2[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_1 (TensorFl [(None, 52, 52, 3, 1 0           tf_op_layer_split[0][2]          \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_2 (TensorFl [(None, 52, 52, 3, 8 0           tf_op_layer_split[0][3]          \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_4 (TensorFl [(None, 26, 26, 3, 1 0           tf_op_layer_split_1[0][2]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_5 (TensorFl [(None, 26, 26, 3, 8 0           tf_op_layer_split_1[0][3]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_7 (TensorFl [(None, 13, 13, 3, 1 0           tf_op_layer_split_2[0][2]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Sigmoid_8 (TensorFl [(None, 13, 13, 3, 8 0           tf_op_layer_split_2[0][3]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_2 (TensorFl [(None, None, 4)]    0           tf_op_layer_concat_10[0][0]      \n","                                                                 tf_op_layer_Reshape_2/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_5 (TensorFl [(None, None, 4)]    0           tf_op_layer_concat_11[0][0]      \n","                                                                 tf_op_layer_Reshape_5/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_8 (TensorFl [(None, None, 4)]    0           tf_op_layer_concat_12[0][0]      \n","                                                                 tf_op_layer_Reshape_8/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_75 (TensorFlowO [(None, 52, 52, 3, 8 0           tf_op_layer_Sigmoid_1[0][0]      \n","                                                                 tf_op_layer_Sigmoid_2[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_1/shape (Te [(3,)]               0           tf_op_layer_strided_slice[0][0]  \n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_79 (TensorFlowO [(None, 26, 26, 3, 8 0           tf_op_layer_Sigmoid_4[0][0]      \n","                                                                 tf_op_layer_Sigmoid_5[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_4/shape (Te [(3,)]               0           tf_op_layer_strided_slice_1[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Mul_83 (TensorFlowO [(None, 13, 13, 3, 8 0           tf_op_layer_Sigmoid_7[0][0]      \n","                                                                 tf_op_layer_Sigmoid_8[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_7/shape (Te [(3,)]               0           tf_op_layer_strided_slice_2[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_concat_13 (TensorFl [(None, None, 4)]    0           tf_op_layer_Reshape_2[0][0]      \n","                                                                 tf_op_layer_Reshape_5[0][0]      \n","                                                                 tf_op_layer_Reshape_8[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_1 (TensorFl [(None, None, 80)]   0           tf_op_layer_Mul_75[0][0]         \n","                                                                 tf_op_layer_Reshape_1/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_4 (TensorFl [(None, None, 80)]   0           tf_op_layer_Mul_79[0][0]         \n","                                                                 tf_op_layer_Reshape_4/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_7 (TensorFl [(None, None, 80)]   0           tf_op_layer_Mul_83[0][0]         \n","                                                                 tf_op_layer_Reshape_7/shape[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_3 (TensorFlow [(3,)]               0           tf_op_layer_concat_13[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_14 (TensorFl [(None, None, 80)]   0           tf_op_layer_Reshape_1[0][0]      \n","                                                                 tf_op_layer_Reshape_4[0][0]      \n","                                                                 tf_op_layer_Reshape_7[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_3 (Te [(2,)]               0           tf_op_layer_Shape_3[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Max (TensorFlowOpLa [(None, None)]       0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_4 (TensorFlow [(3,)]               0           tf_op_layer_concat_13[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Prod (TensorFlowOpL [()]                 0           tf_op_layer_strided_slice_3[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_5 (TensorFlow [(3,)]               0           tf_op_layer_concat_13[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_GreaterEqual (Tenso [(None, None)]       0           tf_op_layer_Max[0][0]            \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_4 (Te [(0,)]               0           tf_op_layer_Shape_4[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_15/values_1  [(1,)]               0           tf_op_layer_Prod[0][0]           \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_5 (Te [(1,)]               0           tf_op_layer_Shape_5[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_10 (TensorF [(None,)]            0           tf_op_layer_GreaterEqual[0][0]   \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_15 (TensorFl [(2,)]               0           tf_op_layer_strided_slice_4[0][0]\n","                                                                 tf_op_layer_concat_15/values_1[0]\n","                                                                 tf_op_layer_strided_slice_5[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Where (TensorFlowOp [(None, 1)]          0           tf_op_layer_Reshape_10[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_9 (TensorFl [(None, 4)]          0           tf_op_layer_concat_13[0][0]      \n","                                                                 tf_op_layer_concat_15[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Squeeze (TensorFlow [(None,)]            0           tf_op_layer_Where[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_GatherV2 (TensorFlo [(None, 4)]          0           tf_op_layer_Reshape_9[0][0]      \n","                                                                 tf_op_layer_Squeeze[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_9 (TensorFlow [(3,)]               0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_10 (TensorFlo [(2,)]               0           tf_op_layer_GatherV2[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_6 (TensorFlow [(3,)]               0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_9 (Te [()]                 0           tf_op_layer_Shape_9[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_10 (T [()]                 0           tf_op_layer_Shape_10[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_6 (Te [(2,)]               0           tf_op_layer_Shape_6[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_13/shape (T [(3,)]               0           tf_op_layer_strided_slice_9[0][0]\n","                                                                 tf_op_layer_strided_slice_10[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_7 (TensorFlow [(3,)]               0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Prod_1 (TensorFlowO [()]                 0           tf_op_layer_strided_slice_6[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_8 (TensorFlow [(3,)]               0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_13 (TensorF [(None, None, None)] 0           tf_op_layer_GatherV2[0][0]       \n","                                                                 tf_op_layer_Reshape_13/shape[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_7 (Te [(0,)]               0           tf_op_layer_Shape_7[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_16/values_1  [(1,)]               0           tf_op_layer_Prod_1[0][0]         \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_8 (Te [(1,)]               0           tf_op_layer_Shape_8[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_12 (TensorF [(None,)]            0           tf_op_layer_GreaterEqual[0][0]   \n","__________________________________________________________________________________________________\n","tf_op_layer_split_3 (TensorFlow [(None, None, 2), (N 0           tf_op_layer_Reshape_13[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_concat_16 (TensorFl [(2,)]               0           tf_op_layer_strided_slice_7[0][0]\n","                                                                 tf_op_layer_concat_16/values_1[0]\n","                                                                 tf_op_layer_strided_slice_8[0][0]\n","__________________________________________________________________________________________________\n","tf_op_layer_Where_1 (TensorFlow [(None, 1)]          0           tf_op_layer_Reshape_12[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_14 (T [(None, None, 2)]    0           tf_op_layer_split_3[0][1]        \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_11 (TensorF [(None, 80)]         0           tf_op_layer_concat_14[0][0]      \n","                                                                 tf_op_layer_concat_16[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Squeeze_1 (TensorFl [(None,)]            0           tf_op_layer_Where_1[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_13 (T [(None, None, 2)]    0           tf_op_layer_split_3[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_RealDiv (TensorFlow [(None, None, 2)]    0           tf_op_layer_strided_slice_14[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_RealDiv_2 (TensorFl [(None, None, 2)]    0           tf_op_layer_strided_slice_14[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_GatherV2_1 (TensorF [(None, 80)]         0           tf_op_layer_Reshape_11[0][0]     \n","                                                                 tf_op_layer_Squeeze_1[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Sub_3 (TensorFlowOp [(None, None, 2)]    0           tf_op_layer_strided_slice_13[0][0\n","                                                                 tf_op_layer_RealDiv[0][0]        \n","__________________________________________________________________________________________________\n","tf_op_layer_AddV2_26 (TensorFlo [(None, None, 2)]    0           tf_op_layer_strided_slice_13[0][0\n","                                                                 tf_op_layer_RealDiv_2[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_11 (TensorFlo [(3,)]               0           tf_op_layer_concat_14[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Shape_12 (TensorFlo [(2,)]               0           tf_op_layer_GatherV2_1[0][0]     \n","__________________________________________________________________________________________________\n","tf_op_layer_RealDiv_1 (TensorFl [(None, None, 2)]    0           tf_op_layer_Sub_3[0][0]          \n","__________________________________________________________________________________________________\n","tf_op_layer_RealDiv_3 (TensorFl [(None, None, 2)]    0           tf_op_layer_AddV2_26[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_11 (T [()]                 0           tf_op_layer_Shape_11[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_12 (T [()]                 0           tf_op_layer_Shape_12[0][0]       \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_15 (T [(None, None, 1)]    0           tf_op_layer_RealDiv_1[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_16 (T [(None, None, 1)]    0           tf_op_layer_RealDiv_1[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_17 (T [(None, None, 1)]    0           tf_op_layer_RealDiv_3[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_strided_slice_18 (T [(None, None, 1)]    0           tf_op_layer_RealDiv_3[0][0]      \n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_14/shape (T [(3,)]               0           tf_op_layer_strided_slice_11[0][0\n","                                                                 tf_op_layer_strided_slice_12[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_concat_17 (TensorFl [(None, None, 4)]    0           tf_op_layer_strided_slice_15[0][0\n","                                                                 tf_op_layer_strided_slice_16[0][0\n","                                                                 tf_op_layer_strided_slice_17[0][0\n","                                                                 tf_op_layer_strided_slice_18[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_Reshape_14 (TensorF [(None, None, None)] 0           tf_op_layer_GatherV2_1[0][0]     \n","                                                                 tf_op_layer_Reshape_14/shape[0][0\n","__________________________________________________________________________________________________\n","tf_op_layer_concat_18 (TensorFl [(None, None, None)] 0           tf_op_layer_concat_17[0][0]      \n","                                                                 tf_op_layer_Reshape_14[0][0]     \n","==================================================================================================\n","Total params: 64,429,405\n","Trainable params: 64,363,101\n","Non-trainable params: 66,304\n","__________________________________________________________________________________________________\n","INFO:tensorflow:Assets written to: ./checkpoints/yolov4-416/assets\n","I0512 06:13:54.955647 140003583874944 builder_impl.py:775] Assets written to: ./checkpoints/yolov4-416/assets\n"]}]},{"cell_type":"markdown","source":["####Import mediapipe library for joint detection"],"metadata":{"id":"57B_GFdKuX_Q"}},{"cell_type":"code","source":["mp_hands = mp.solutions.hands"],"metadata":{"id":"K2DxINQsuQQI","executionInfo":{"status":"ok","timestamp":1652336033400,"user_tz":-120,"elapsed":120,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Store the indexes of the tips landmarks of each finger of a hand in a list.\n","fingers_tips_ids = [mp_hands.HandLandmark.INDEX_FINGER_TIP, mp_hands.HandLandmark.MIDDLE_FINGER_TIP,\n","                    mp_hands.HandLandmark.RING_FINGER_TIP, mp_hands.HandLandmark.PINKY_TIP]"],"metadata":{"id":"x0Uul_8fuWgw","executionInfo":{"status":"ok","timestamp":1652336033401,"user_tz":-120,"elapsed":109,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# function to convert the JavaScript object into an OpenCV image\n","def js_to_image(js_reply):\n","  \"\"\"\n","  Params:\n","          js_reply: JavaScript object containing image from webcam\n","  Returns:\n","          img: OpenCV BGR image\n","  \"\"\"\n","  # decode base64 image\n","  image_bytes = b64decode(js_reply.split(',')[1])\n","  # convert bytes to numpy array\n","  jpg_as_np = np.frombuffer(image_bytes, dtype=np.uint8)\n","  # decode numpy array into OpenCV BGR image\n","  img = cv2.imdecode(jpg_as_np, flags=1)\n","\n","  return img\n","\n","# function to convert OpenCV Rectangle bounding box image into base64 byte string to be overlayed on video stream\n","def bbox_to_bytes(bbox_array):\n","  \"\"\"\n","  Params:\n","          bbox_array: Numpy array (pixels) containing rectangle to overlay on video stream.\n","  Returns:\n","        bytes: Base64 image byte string\n","  \"\"\"\n","  # convert array into PIL image\n","  bbox_PIL = PIL.Image.fromarray(bbox_array, 'RGBA')\n","  iobuf = io.BytesIO()\n","  # format bbox into png for return\n","  bbox_PIL.save(iobuf, format='png')\n","  # format return string\n","  bbox_bytes = 'data:image/png;base64,{}'.format((str(b64encode(iobuf.getvalue()), 'utf-8')))\n","\n","  return bbox_bytes"],"metadata":{"id":"oSiy1MeOOXZp","executionInfo":{"status":"ok","timestamp":1652336033402,"user_tz":-120,"elapsed":107,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# JavaScript to properly create our live video stream using our webcam as input\n","def video_stream():\n","  js = Javascript('''\n","    var video;\n","    var div = null;\n","    var stream;\n","    var captureCanvas;\n","    var imgElement;\n","    var labelElement;\n","    \n","    var pendingResolve = null;\n","    var shutdown = false;\n","    \n","    function removeDom() {\n","       stream.getVideoTracks()[0].stop();\n","       video.remove();\n","       div.remove();\n","       video = null;\n","       div = null;\n","       stream = null;\n","       imgElement = null;\n","       captureCanvas = null;\n","       labelElement = null;\n","    }\n","    \n","    function onAnimationFrame() {\n","      if (!shutdown) {\n","        window.requestAnimationFrame(onAnimationFrame);\n","      }\n","      if (pendingResolve) {\n","        var result = \"\";\n","        if (!shutdown) {\n","          captureCanvas.getContext('2d').drawImage(video, 0, 0, 640, 480);\n","          result = captureCanvas.toDataURL('image/jpeg', 0.8)\n","        }\n","        var lp = pendingResolve;\n","        pendingResolve = null;\n","        lp(result);\n","      }\n","    }\n","    \n","    async function createDom() {\n","      if (div !== null) {\n","        return stream;\n","      }\n","\n","      div = document.createElement('div');\n","      div.style.border = '2px solid black';\n","      div.style.padding = '3px';\n","      div.style.width = '100%';\n","      div.style.maxWidth = '600px';\n","      document.body.appendChild(div);\n","      \n","      const modelOut = document.createElement('div');\n","      modelOut.innerHTML = \"<span>Status:</span>\";\n","      labelElement = document.createElement('span');\n","      labelElement.innerText = 'No data';\n","      labelElement.style.fontWeight = 'bold';\n","      modelOut.appendChild(labelElement);\n","      div.appendChild(modelOut);\n","           \n","      video = document.createElement('video');\n","      video.style.display = 'block';\n","      video.width = div.clientWidth - 6;\n","      video.setAttribute('playsinline', '');\n","      video.onclick = () => { shutdown = true; };\n","      stream = await navigator.mediaDevices.getUserMedia(\n","          {video: { facingMode: \"environment\"}});\n","      div.appendChild(video);\n","\n","      imgElement = document.createElement('img');\n","      imgElement.style.position = 'absolute';\n","      imgElement.style.zIndex = 1;\n","      imgElement.onclick = () => { shutdown = true; };\n","      div.appendChild(imgElement);\n","      \n","      const instruction = document.createElement('div');\n","      instruction.innerHTML = \n","          '<span style=\"color: red; font-weight: bold;\">' +\n","          'When finished, click here or on the video to stop this demo</span>';\n","      div.appendChild(instruction);\n","      instruction.onclick = () => { shutdown = true; };\n","      \n","      video.srcObject = stream;\n","      await video.play();\n","\n","      captureCanvas = document.createElement('canvas');\n","      captureCanvas.width = 640; //video.videoWidth;\n","      captureCanvas.height = 480; //video.videoHeight;\n","      window.requestAnimationFrame(onAnimationFrame);\n","      \n","      return stream;\n","    }\n","    async function stream_frame(label, imgData) {\n","      if (shutdown) {\n","        removeDom();\n","        shutdown = false;\n","        return '';\n","      }\n","\n","      var preCreate = Date.now();\n","      stream = await createDom();\n","      \n","      var preShow = Date.now();\n","      if (label != \"\") {\n","        labelElement.innerHTML = label;\n","      }\n","            \n","      if (imgData != \"\") {\n","        var videoRect = video.getClientRects()[0];\n","        imgElement.style.top = videoRect.top + \"px\";\n","        imgElement.style.left = videoRect.left + \"px\";\n","        imgElement.style.width = videoRect.width + \"px\";\n","        imgElement.style.height = videoRect.height + \"px\";\n","        imgElement.src = imgData;\n","      }\n","      \n","      var preCapture = Date.now();\n","      var result = await new Promise(function(resolve, reject) {\n","        pendingResolve = resolve;\n","      });\n","      shutdown = false;\n","      \n","      return {'create': preShow - preCreate, \n","              'show': preCapture - preShow, \n","              'capture': Date.now() - preCapture,\n","              'img': result};\n","    }\n","    ''')\n","\n","  display(js)\n","  \n","def video_frame(label, bbox):\n","  data = eval_js('stream_frame(\"{}\", \"{}\")'.format(label, bbox))\n","  return data"],"metadata":{"id":"5NYtGhrZOYbA","executionInfo":{"status":"ok","timestamp":1652336033404,"user_tz":-120,"elapsed":106,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def take_photo(filename='photo.jpg', quality=0.8):\n","  js = Javascript('''\n","    async function takePhoto(quality) {\n","      const div = document.createElement('div');\n","      const capture = document.createElement('button');\n","      capture.textContent = 'Capture';\n","      div.appendChild(capture);\n","\n","      const video = document.createElement('video');\n","      video.style.display = 'block';\n","      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n","\n","      document.body.appendChild(div);\n","      div.appendChild(video);\n","      video.srcObject = stream;\n","      await video.play();\n","\n","      // Resize the output to fit the video element.\n","      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n","\n","      // Wait for Capture to be clicked.\n","      await new Promise((resolve) => capture.onclick = resolve);\n","\n","      const canvas = document.createElement('canvas');\n","      canvas.width = video.videoWidth;\n","      canvas.height = video.videoHeight;\n","      canvas.getContext('2d').drawImage(video, 0, 0);\n","      stream.getVideoTracks()[0].stop();\n","      div.remove();\n","      return canvas.toDataURL('image/jpeg', quality);\n","    }\n","    ''')\n","  display(js)\n","\n","  # get photo data\n","  data = eval_js('takePhoto({})'.format(quality))\n","\n","  # Initialize a dictionary to store the status (i.e., True for open and False for close) of each finger of both hands.\n","  model_statuses = {'LEFT_THUMB': False, 'LEFT_INDEX': False, 'LEFT_MIDDLE': False,\n","                      'LEFT_RING': False, 'LEFT_PINKY': False, 'RIGHT_THUMB': False, 'RIGHT_INDEX': False, 'RIGHT_MIDDLE': False, 'RIGHT_RING': False,\n","                      'RIGHT_PINKY': False}\n","\n","  with mp_hands.Hands(min_detection_confidence = 0.5, min_tracking_confidence = 0.5) as hands:\n","      # get OpenCV format image\n","      img = js_to_image(data)\n","      \n","      img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","\n","      model_statuses = process_img(img, 0, 0, 639, 479, hands, model_statuses)\n","\n","      # Image back to BGR for rendering\n","      img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n","\n","      # save image\n","      cv2.imwrite(filename, img)\n","\n","  return filename, model_statuses"],"metadata":{"id":"XZInQx8Mvhax","executionInfo":{"status":"ok","timestamp":1652336033405,"user_tz":-120,"elapsed":103,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def countFingers(results, fingers_statuses):\n","    '''\n","    Params:\n","        image:            The image of the hands on which the fingers counting is required to be performed.\n","        hand_landmarks:   The output of the hands landmarks detection performed on the image of the hands.\n","        hand_label:       'Left' or 'Right'\n","        fingers_statuses: A dictionary containing the status (i.e., open or close) of each finger of both hands.\n","    Returns:\n","        fingers_statuses: A dictionary containing the status (i.e., open or close) of each finger of both hands.\n","    '''    \n","\n","    for hand_index, hand_info in enumerate(results.multi_handedness):\n","\n","        hand_label = hand_info.classification[0].label\n","\n","        hand_landmarks = results.multi_hand_landmarks[hand_index]\n","\n","        # Iterate over the indexes of the tips landmarks of each finger of the hand.\n","        for tip_index in fingers_tips_ids:\n","            \n","            # Retrieve the label (i.e., index, middle, etc.) of the finger on which we are iterating upon.\n","            finger_name = tip_index.name.split(\"_\")[0]\n","            \n","            # Check if the finger is up by comparing the y-coordinates of the tip and pip landmarks.\n","            if (hand_landmarks.landmark[tip_index].y < hand_landmarks.landmark[tip_index - 2].y):\n","                \n","                # Update the status of the finger in the dictionary to true.\n","                fingers_statuses[hand_label.upper()+\"_\"+finger_name] = True\n","        \n","        # Retrieve the y-coordinates of the tip and mcp landmarks of the thumb of the hand.\n","        thumb_tip_x = hand_landmarks.landmark[4].x\n","        thumb_mcp_x = hand_landmarks.landmark[2].x\n","        \n","        # Check if the thumb is up by comparing the hand label and the x-coordinates of the retrieved landmarks.\n","        if (hand_label=='Right' and (thumb_tip_x < thumb_mcp_x)) or (hand_label=='Left' and (thumb_tip_x > thumb_mcp_x)):\n","            \n","            # Update the status of the thumb in the dictionary to true.\n","            fingers_statuses[hand_label.upper()+\"_THUMB\"] = True\n","\n","    # Return the status of each finger\n","    return fingers_statuses"],"metadata":{"id":"PW25PTcxvr_M","executionInfo":{"status":"ok","timestamp":1652336033406,"user_tz":-120,"elapsed":102,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def process_img(cropped_img, left, top, right, bottom, hands, m_statuses):\n","    # create transparent overlay for bounding box\n","    # bbox_array = np.zeros([480,640,4], dtype=np.uint8)\n","\n","    cropped_img = cv2.flip(cropped_img, 1)\n","\n","    # Make Detections\n","    results = hands.process(cropped_img)\n","\n","    # Initialize a dictionary to store the status (i.e., True for open and False for close) of each finger of both hands.\n","    fingers_statuses = {'LEFT_THUMB': False, 'LEFT_INDEX': False, 'LEFT_MIDDLE': False,\n","                        'LEFT_RING': False, 'LEFT_PINKY': False, 'RIGHT_THUMB': False, 'RIGHT_INDEX': False, 'RIGHT_MIDDLE': False, 'RIGHT_RING': False,\n","                        'RIGHT_PINKY': False}\n","\n","    if results.multi_hand_landmarks:\n","        fingers_statuses = countFingers(results, fingers_statuses)\n","  \n","     \n","    # if m_statuses != 0:\n","    #     if check_symbol(fingers_statuses, m_statuses):\n","    #         center_x = left + round((results.pose_landmarks.landmark[12].x + ((results.pose_landmarks.landmark[11].x - results.pose_landmarks.landmark[12].x)/2)) * (right - left))\n","    #         center_y = top + round((results.pose_landmarks.landmark[11].y + ((results.pose_landmarks.landmark[23].y - results.pose_landmarks.landmark[11].y)/2)) * (bottom - top))\n","    #         bbox_array = cv2.circle(bbox_array, (center_x, center_y), 5, (0, 255, 0), 5) #class_colors[label]\n","\n","    return fingers_statuses"],"metadata":{"id":"EpDuudVWvuY1","executionInfo":{"status":"ok","timestamp":1652336033408,"user_tz":-120,"elapsed":98,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def check_symbol(statuses, m_statuses):\n","  correct_symbol = True\n","  for hand_label in ['Right', 'Left']:\n","      for tip_index in fingers_tips_ids:\n","        # Retrieve the label (i.e., index, middle, etc.) of the finger on which we are iterating upon.\n","        finger_name = tip_index.name.split(\"_\")[0]\n","            \n","        # Compare the status of the fingers.\n","        if statuses[hand_label.upper()+\"_\"+finger_name] != m_statuses[hand_label.upper()+\"_\"+finger_name]:\n","            correct_symbol = False\n","\n","      # Check for thumb\n","      if statuses[hand_label.upper()+\"_THUMB\"] != m_statuses[hand_label.upper()+\"_THUMB\"]:\n","        correct_symbol = False\n","\n","  return correct_symbol"],"metadata":{"id":"sUfkMdz4vwkn","executionInfo":{"status":"ok","timestamp":1652336033409,"user_tz":-120,"elapsed":97,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### Main Program"],"metadata":{"id":"D9UbkkI5wJUq"}},{"cell_type":"markdown","source":["#### Step 1 - Define symbol"],"metadata":{"id":"KIQRzlzvwMjX"}},{"cell_type":"markdown","source":["Take a photo in order to have the reference symbol"],"metadata":{"id":"ih17eKc6wPcK"}},{"cell_type":"code","source":["try:\n","  filename, model_statuses = take_photo('photo.jpg')\n","  print('Saved to {}'.format(filename))\n","  print(model_statuses)\n","  \n","  # Show the image which was just taken.\n","  display(Image(filename))\n","except Exception as err:\n","  # Errors will be thrown if the user does not have a webcam or if they do not\n","  # grant the page permission to access it.\n","  print(str(err))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":552},"id":"fz42CpAHv9I0","executionInfo":{"status":"ok","timestamp":1652336128512,"user_tz":-120,"elapsed":95197,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"d47fbfe9-fa33-446b-83d8-645dcbbd1b28"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function takePhoto(quality) {\n","      const div = document.createElement('div');\n","      const capture = document.createElement('button');\n","      capture.textContent = 'Capture';\n","      div.appendChild(capture);\n","\n","      const video = document.createElement('video');\n","      video.style.display = 'block';\n","      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n","\n","      document.body.appendChild(div);\n","      div.appendChild(video);\n","      video.srcObject = stream;\n","      await video.play();\n","\n","      // Resize the output to fit the video element.\n","      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n","\n","      // Wait for Capture to be clicked.\n","      await new Promise((resolve) => capture.onclick = resolve);\n","\n","      const canvas = document.createElement('canvas');\n","      canvas.width = video.videoWidth;\n","      canvas.height = video.videoHeight;\n","      canvas.getContext('2d').drawImage(video, 0, 0);\n","      stream.getVideoTracks()[0].stop();\n","      div.remove();\n","      return canvas.toDataURL('image/jpeg', quality);\n","    }\n","    "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saved to photo.jpg\n","{'LEFT_THUMB': False, 'LEFT_INDEX': False, 'LEFT_MIDDLE': False, 'LEFT_RING': False, 'LEFT_PINKY': False, 'RIGHT_THUMB': False, 'RIGHT_INDEX': True, 'RIGHT_MIDDLE': True, 'RIGHT_RING': False, 'RIGHT_PINKY': False}\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Image object>"],"image/jpeg":"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/2wBDAQICAgICAgUDAwUKBwYHCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgr/wAARCAHgAoADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6Tj86WJJrUyI//TL/AJZ1Nb2E11J+9m3vVyOKGLtRHa+VJiKCinT/AHpw8n85j6h53meTmR0qt9g8oPNW9cWsMUf72Gqclr+8efzvkp+09n7gU9KvOZslrDax+TNWbc6XD5aTS+XWxcWs00nn2s3zx0XFr5sf+leXvj/5axVtCpp75vCt+9OektfN5qGPzrX998n/AG0rVvMf8tdlU5LXyv31Z89Iic/3vIVpLU3X+tNMjtZrWPEVXP8Aln/z0pkctnay+T5NOnX9obc5QuIoZT532yTf/wBMqZZyeVJ5Mvmf9das6pYf8t4pqZGJoo/9T5lEA5w82GKSppJfssafvqhjlm/541N+5uo/9TV8/swVSkTW9/5Vv53nP70y3uphJjzqhki82NIZf+WdQ+V5Uf7qrnU+wFOpVqGrZ6z9lvP/AI7Wlb69/wA9Zq5i4ihikx9s+emf2pNayJ5VFOuH7z7Z1sWsff8ALFZWoaziTyfOffWb/ak0tx+9P/fqmXl15X777ldE8VVmRyVahW1i6+0yVj3EQ/5ZVfvJvN3zYpn77y/OirknOrULh/fM2Swmi/1sNVrm1hi5MPyVq3HnXX/x2WofsnlR81EP750QKEcQ8v8AdffojtfNj8kQx/8Afqrkdh5UnnVZji4/e0BAxLjw5CJKfb6N5WzyRJXQx2v/ADyh38VNb2n/ADygoN/4hgx6NZxfvvJ+eiTS/wB5/t10n2XzeKhuLCHr/BXP9Ypi/wCXZzdzpc8X76iSw823T+N63r2whlHnVm3Hk2snkxU6c18cCeQypLCby/3o+SjyvKj84w1ZuPO/13nVW/e/89v1pVKhmU5PJi/7aVWuIpvLfyv3dWZLXzZafHEZY/KrTnAypIZvL/e1DHEa27mKHy6p3Fr5UXIqP4gGV5XlSPTJLX/ltL+VX/svlSedRJD5sfWrhMzgY/lebHTLewhmjrV8qGKTEsNMEP3/ACqzNChHYTRfvv4KJIhdc+T89XLfz8fvaJIZif3Xl1pz1aZmZUkU0UmB/wAtKPsHm3CebN/q61fssN1J1/1dH2Xyt+RWcKftKvOX/EM37L/pGZIfMSOmXH+lXDzCrkf+s/56VDJF5Un72GtP3JBWk/ex/vvv0SRQ/Z6m8r97+9pnk+bJ+6ho/dVAX98hjiF1/wAsf9XT4/4/Nhk2VNL5P2d84plvF/y2mFROmaENxawzW3kxD56rf2X5UdaUdr+8840XEWf+WNLkAzY7XzZP3tTeVDhKsyWv7v8AczeXRLa/c801pMz5x9vawxRf67e9Tfvotn9+iP8Adcxipo/3smMVc6lU0GCL7V++uppKuWfk+X5MVHl/9Mqs29rN5f8Az0rk56s6oBH50sb8eXT7P90fJl8yrllpfm/62bZVyPw55X737ZHI9BnzmVLa/wDTHZR9l82P97Wx/YsMuyb7Ym+n3nhfUorf7ZhNla0J1ahnOf70xI4rPzE/c1ZtzDDxFD5dFvaxS1Zj/dSYhrfn/ej/AMYRxTG4875N/tWrZ2Gbj/Stkb1Ts/3376Ly3ermly/arjzpaOcznU+xA3tDlHn/AOurv/Cd/DLeJDLNHJXAafaiK486KH5K7bwZdQ2F4k0vyP8A6uKWr9p+9D+IfTfwB1SGw8TWMvkp+8uo/wDWV9pWriS38wdwK+BPhnf2drqEM1/+/hkr7d+Eep2+r+BLGa2uZJEWHYWl+/x616uYfv8ALqNX+XQ5aE/9sZ1K9B9KKAMDFFeGeiFDdD9KKG6H6UAfH37SfhOytvEGqkRPA0cmc/8APSvnjxhYQ/Z3MVnI9fYn7VmgiLURqMMKP58W7mvlbxpFeSyP9rhreHtTDE/Hc8xvB5Vv5OdlUJLD7VJ/pM3lpHXQ6pagyfuoXj8v/plWbqFr5R/dbHrT2lX2fvmCn9uZ1tzD/wAsZh89Mt4sXCf6vfVmPzpZHmuf9dTPKP2jzf4K5P3nxh/EC5i+1fuf3eyqFxFDFJ5MsPyf8squSXU3mf6moby1zJ+6mrfn+2FOnUgZV5FDFJ5JHyVWktZot/lTeZDVy8i/56zR1Tllm/1P+rSo5PaF0/75TuPeGq1xF5UdX7iL94gqteRf89aPZ/bD2f70p/av3fH/AJDqsksPmeTLDVmSL93VaOKaLfNFD89VzqmOcKo+SKYyf7FQ3lrkJNFNOlFvdeVHTJ/OupKft/5C1T9oEcXmx/uvnqzcSjy/Jih8uq0cXlfvvO2U+4uvNP7qf/trV07VPfmFuQrSXX+keTF9/wD5ZVDcRTeZ+9+//wA86mkMPmf6756pySwxSf8APSpDk9nsPji/efvf3fl1D5vmyf6nrT4/tl1J+6p/9lzS/wDH19yuef7uqblaSXypP+elMkuvNk5xsrSj0az+en3EUP8AqYoKv2nsw/wFAWE0sbzD7kdH+pjqzJaiKTmoZYofM/5Z1HOaFaOWai4ihljqa4iqtF+9k/10caVoc/8ADqk0drDTI7DH76WiS6hi7VD9vxJmX7lZwOg0jF5WzmrPm+ank/6uqccsMverkfm+V++oc6cDaEPZk0f/AB7/AO3VO4+2f8tfnrSs4sR+dLNRJazdhXDbkfuGnJ7Qx/K82PFU57US9K3o7Dyt/wDcqneWvk1uv3ZiYMkXlf79ULi1m8zzq25IvKH7yqdxEDJ51ROHtDOZlSWvmx+dLLsqKrd5awmT/XfnUNxF+88mKuqnOkkHIVv3Mv8ArafceT8n7ny6ZJ50Un72jyvN/wCW1H98OQp3kXaoY8eX+9q7ef6r8aqxxfvKjn9oZ/xBl5a/u8xfPVbzZvLqzLEPL/dVD53m96ITqfbNBlvEf9dLTJPJ8yn+b+78mX7lEnP7mKb5K3Mwk8mKT/RTJTJIvNt/Oimojx5n7qj7V/yxlrOf8U0K1n+6k/e0Sfuv33+rei5tf++KLgeVzij91UMyGT990+/TP9VHT/K/56zUz/llRT9kAeSPaiT9zGhpnmzS9KuWelXkuzzZqtz/AJAmVqsxyzRSfuv+/taVvoM0Uj+bTLf7Ha7/ACpo/wDprXnTqagZtxazS/6v50p9vo15dD91BJvj/wCetaUl/pkRT9z8/wD0zoluryK3+2Dy40/6aVpObYQmFv4cm8vN1NVmOwhi/wBdMlYOofEHwro2+bXvF9jB5f8A09R1yWqftQfDewk/0Ca71F/uRRW1r5lXChianwke3PVJLrTYo3/0OPfTLa/s5en7vzK8ck/aM8ba9vh8JfDHy0jl/wCPnUqm8J/Ev4kX+of8Vbead9j+/wCVFL/q5P8ApnXoLBKnS98z9pV+wezR/vth86OP/rpU0fneW/lfO9YOj6pDf6Wl4Jvnq4bqby/+Px4/+uVc1Ogb8hsaX5J/fXUNXLbzv7QSb/l2kl/exRS1m6XLD5f72atXT7qzuZPIlm3pXVQp1afwHJOFQp+ONGs9Gn+2WHmJDcf9NayreW8r0s6DZeI/C832Wz8x7f8A1XmxV5j++ivJoZYf9XUTnr741D2hpafL+786L5KuWcsIk/dVm/vfs/nebVzT5fKjTENYG0ze0+WbzEEszx11Why/6Qk1gPk/6a1xNnLD5f8Az0rodDv/ACrhJovM2R1HP7Mw5PsHuXw31SytZ4fNm8uvtf8AZl8R3Wp+G5rC7gjURybo3jPUV8FfD/VPLkhm+TZX1Z+yv42+z6zb6XNePJ9p/wCmVfQYR/W8rnS7anLWhUoShM+n6KF6D6UV4R6oUUUUAeM/tWWMw0201KKPKhDGfzr5N8cedLb+dFNHHN/y1j8qvtL9o7TRdeCRqA3Zt5c8e9fGfjwzeY/2r/v3Vt3SFPVHl2sSzS3P72sqSUxR/wCuk31q+IP9Yn73y6wbyLyv+W1b0PafBM8/2Z6XHa+VGkN1D89Q6p+6k/0WpPOm96pC683/ALZ1jP2VSkHtGVpPNiPneTVOTzvMq/cedLJiLy9lU7j+tc5dO5WuIoZY35+f/npWbJD+8/246v3lrNFH51U7iPyo38r79dHP7Mopx/615pPMqtJL5sf/ADzqzJEbW3eaaeqcl15sf+xSnUK5/wB2MPkyx+T9sePy/wDll/z0qhcedHJVy4i+5VbzZvM8nFRA6qcCnJ/osnnSTUWd1+8erNxa3nmf6n5Kfb2sPmP9qh8ujnMP4ZTuPO+f9w/vUMdrefPNLWrHFDj/AG6Psv8Ay2/jqJv96b/xDN+yiWT99U0cUP8Azxj/AHf/AC1qaSLyv9VDT7mrI/iDPOmlj8n5N/8Az08qmRxTxf8ALaOSnySwxfvqhuLqGKRP+mlRCnz7m5DIZorj/XVNH5Pmf66OqdxLN/1zqneXX7xJov3lKBmXNQuofL86KH/v7WVJqkMv/TN6L2Xzf9bM/wD1zqtJEK0mEv7hZkupvkxNTJJfO586q0mPL/e0Ry/u/OPejnAs+V+7p8n7n/VTUyOWGWOmRffop06p0Glp/nS/79b2nyzS1laf5PmJ5sPmV2fgvw3NrMfnWEPmeXL+9op0KteryFqHIQ2ejT3UfNXP7Gmlt/8AU/J/z0r6F+F37G/xF8U29te3Ghx2ltJFv8y9Gw165oP7A+mw2ky+IvE8ReT/AFRtrX/V/nVfUlB806nIVdU1yHwxqHhyaK2rH1DQZoo/3s3yV9lfGD9h7W/Ddv8A2l4buzqNt/y1kjtf3kf/AACvn3xJ4IvLWSaGWHzPL+T91WlXDRVLnTHCdKoeOXml/wDTHmqEth1xXbeINBvLqTMUOyue1DS5oo/3v/kKo5PZmE4HPXlh/wA9apyRQxHya3ri1ilj/wBT8lZV7YeVXIQY9wfK4zUPm4/1tXLi1/eVDJF+8xLDWinSmECtJL5vH8FVpIvOjqzcGHHky/nUP/Lv/n1pv3PgArZ/eeT53l1DcRVNJF+7/wBuq0najn/dGYSTeVH/AKn56ZGJpf8AljTPNh9amjFlFH5/nVfJyByDJP3Uf7qjyv3X72kTp+NNkuqj4PfCA+P/AFf73rVa4imzmL79PEsPmJ5X360rm1hi/ffY/MeslOpT980gZVvYXkv/ACxqaPRoT/rZvpVyS/EX+t/dvJ/yyqtJdeb/AK2nzVjPnDzdH0uRP+Wj0f8ACR3l1J50MPl/9da5vxhrOvaDpd5e+HNHtLu8/wCWUVzL5deaeIJfjb4j06H/AITLxh/wj6eb/wAe2kReZJJXVChUqUvjM/3k6p7BrHjfTdGt3/tnxhYwJH8kv+lV57rn7UHwxsJJrPQYbrVbmP8A1X2a1kk/eVxml/BvR7q8mvP7B1LXJpJd/wBt1uXZ/wCQ67PR/Ac1rZpZ2M1poaR/62OxirT2eBp0/wCcOSrUM24+N3xs8R3Hk6N4DsdGh/5ZSalL+8rKvLDxhr14k/i34qXzv5v+r0n955dd/Z+DfB1hI+pX80+pXMn/AC83Mv8A7Tq4l/o1h++sIY0/65RUTxq/5c0yfYHnWj/Cqzu/+PDwTqN99n/5edbl8uOuz0v4c6lFInlTWti8n+tisotlaUniP7LH/rvnqtceKJpdnmTVhOpia5Rct/Aejw+dPrOvX18//LWO5l/d1f0/S/B9r++i02CPy/8Av5XPSazeXUn72Z9lM+1Qy/62aTZThBwH/gO80fVIfs/k2sNTfb/t9m8NrN++/wCWUVcZoeqfZrz91NJsrp7f/WJP9yl/DLX8L3yh4D8ZTeI9QufDes+Za39n5iS/9dK0vBfiO80bXZtH1Sbe8kv+tllrlfiJFNoPiyw+LWmalJ+78u11S2li/dyR/wDPStXxJLZ6pp8Pjew/13/LWOKt6eLMIUT2/wAJ6zPay/vZv9Z8ktY/xA0yztdUe7tfkS4+esHwH4oh1TT083/lnXbaxFpvijwv50UPmPb/ACf62ifsqlT3yKi+1A4OO66f36vxy+bH+6rKjP2W48mtKzlg8t5pfkT/AJZf9NKj91TN6cP3Xvmlp8U2Urb0eXyrhPKvPLT/AJa1g2eqQ/JDFNJV/S5fN/fC8+eP/Wx+VWcJ/wA5nyI9X+H+qWc0nkmGTZH/AMta+gfgZ4iNtr9sB9yOWOvlTwvr0Nrss4/Lr2n4b+I5oryGbzkRP+WsXm17GUVk8ZCmcNf2fsz9HPD+pxaxoltqMfSWJHrQwWz71wnwF8R6f4j8B239nz+Z5BCSf98Cu7XoK8/GUfYYmcPM7cNP2mHhIUdOaDyMUUVznQcn8YLb7T8OtS/cpIUh37JOlfDnxAi/4mD+V9yv0A8Q2sd7o13aSD5Jbdwfyr4O+MH+i+ILmGL7n/LKtFImr/C5jxzxZ/xL43u/tn/fquP1DWZpY/Ol311XjG68qPJ8v/tr+8rhtY1X7/mw/JXQefUPYPNvJbdJrSb/AK6xVP5I9qd9lmll8nH/AH9ouJf3fE3yVwU6fs/jOuHsinJF5v76KqF5F5sj/wCsjq/PdTRSeT/z0/55VDcWE02/7L5lLk/e++RD3zNkimi/fVm3mnzS78Tf6ytuTS5pf+W2ymSWtaU5/veSZfJz/Gc9JazS27+cKpppd5LG4/grqo7aH/Umq2oWkMUf+xWky5017IwbPS4fL8nyfko+yw+X5EUNX5M/8Aqt/wBdcdKzMadQp3H+ix1Tx5X76X79WdVv/wDSP3X/ACzqneX/AJp84UG0/wB58AR/uv30s0bpRcX8Nr++l+/VP7VDL+5x/q6p6h+9k/2Kj2dWoECzJr32W4f+Oq1xrN5LH5MU0lMzB5f+poj8nzP3v36uf7sdOAzzf3aebNJ/10pn2uaLi1mp8ssIkfzarJHP5nnRfcop1Oc3H+b5v+tmqtLFdyyfuj8lPkm7RUebN5f+pqaAcgy4lmiP73+VQxnzf3wqa4/ex+TTJIvKrb9yE4fuiG4l83f5VQ+VNFH+9p587zf3X40/99LH5NZwBEOnzQ/89q0reSH/AFUs1ZX+pk/2Ks2dr5UefOohUqgdV4fixeJDdTyR/wDXL/WV+lP7Ffwk+CeifBPSNd8Eabb6lPd2we+1G8iR5fP/AOWif9M+e1fmJo9/NayJ5U3z19Ofsm/tR+IvhDfJo13OjaReSl3hf7g+le3gsK8fhJxpz5Zrp3Ma0/ZvnP0WC7VzjFJwwGTzWX4T8XaH410eLW/D2pR3VvIPlljPBrVOwHpXiyjUpz5ZomE1UXNEVwMZrxD4+fsz6T4ot7nxP4asylz9+5s4x/rf9z0Ne4U07QcYpwq+zdzeE3Teh+aPxA+F82jSPNFDXmOuaNNFI/nQ1+mPxs+A2nfEbT5LzR2FtqIO/P8ABP8AWvjH4r/C+88MX82nanZujxy7JY5Iv3lPEx9rS56J0X9ofPFxYTRf62srVLDzf9VXea7oP+keTXN6pa/ZpPJNctOBfxnGXlr5X/LGqcv3K2NY8nzX/cVlXlrNROh/IY8hQki82T97Vd+v4VYuIv8AptVO5rSh5mcB9xD+7qn5Xm7zLVnzf3fk1WuP9X/t+9E/ZFzK3lQxS0zyvvwxU+P9z/rafJL5v+qhrfkIGW/nRHpRJHBLzLTJIjU0fnWsfNYT9n9sIEMUubj/AEqtvTvJutk0U3yf8tf+mdc9/wAtP3sNTafqH2WR/NFZzhTL5P3fuHx/8bP2bv20rD4u3msf8JVrOs2H2qSeK903VP8A0XHXuv7Nel/HjRvBXkfGTUpHfzf9Fiuf9f5f/TSvVNY87Pned+EVclbeLZpbyaz1DzEmj/1VdM8wxFelychHs6dMs6xaQX9x/pQ+eobzVLOwj/1Pzx0+T/icx/vfM3/9MqzdQimurd/K/dzR/wDPWslP90Ay88UWcv8Aqi++s2TxH5v/AD0jrNkhmiuHElMjimijfyv3dWvZUzMuSX80v+pmfZT9PupvM9KoJF5vAmqb9x5aebR/ENDb1GOGWNJoqzZCIpOtXNKv4Zf3MpqteRf6Y4i+5QKH7sfHLBKOJo6PO8qP/YqGOXyv+WPWj/W7M1oMv2d1Ds6/9+q6TwvL5tl9jlvH/wC2tcrZ/vZErS0/VJtLvEmk+5Wc5mZ1X2Cz1nS7zQdZHmJcRbP+ulcl8K9QvLDT7z4e3/lu9nL5EUkn+srsI5YZZEvLX92kntXMeNIv+Ec8eWGvWv8AqbyLZLL/ANNKF/IQ/wC4bfgvWZtK1R9Hv4fkr2P4f3UN/I9n5PySRV4VrEv9l65bXn/PxXqPw7v/ACpIZv3kfmf9Na3p0/5zkre1p++ZviiKbS9Yms/4PNqG3lml/wBaPkrp/jZYfZtUhvLXY8MkX+srjLe6h8xP7klYW9obQ1RqwRfZeIv+WlX7O6mm/ffPHWVb3X7vyYpv+uUlWY5f3f8At1pA05DsNDuvKuIRFN5byV6v8P7/AO5NLD++/wCuteIafqgl2ebD5b13/hPWPuebqUdaYP8Ad1jOpBWP0L/Y98azGyHhaUwCHy3kj8r+/wDu6+gsnINfBX7LvxAm8O69aSiZ3SO5j82P/pnX3fZ3K3Nulyh+V49wNevxDh/Z1oV4rSaOLL6zdScJFmikyvqKWvAPVGr9w18FftKWs1h40v8ATfsex47qTyq+9V+6RXw5+2kYdN+JWo2nzp5snmeaK0plr+FM+b/GF/NFG80sv+rrhtUv/Nj87zvk/wCWXm10+v3UMtu9n/HXH6xf+VGkMsPl/wDXKtKEHU9w86cD6E/fS/6oU+PRvN/ff9/a1bOwhiP+u8tP+etWfKhl5i+RP+mtclaFWodfJzmD/Y1nFcfvP3iU+SL/AEfyYoPkq5eReV1qtcS/u/3vyUoQ9pUEY9xa5/1XmVDefurd4asyXUPl4rN1Dzpd9afwx/xCH97s71W1C7hl/c+TUNwZpY/3Uz/u6hk/e8/vKucP3XOHJ7MoXkt5/wAArNuJbyWR5q0ryKaKPyfO+SSsq4imiPked8lRzmfIitJKbr/Wn56p+V+8qb9zLcP/AMs0o8qHCUU51PjLh/cK37qq0nnTSVZucRSf89Epkcvm/wCrq51DT+GQyRTeX1qt++lk8mWtK4/c7KrebLNL5wh/1f8Az0qJ/vC/8Azyv3fk/wCsqGM/Zd8NXI/O/wCB0y4h82T/AFNL2dMZWkHld0qtcSzSv/rquXH7rj+CmXEX+jpDF9+ohOp7IU/fKtRSGaXtVmSPyuahk86WiAxtQedNLI/9ypv9THTJD5UeKOQIQKdzF+8/e1ZSXyu9VpPJ8z97jZT4/wB7/uU5zAv2915X76L79dP4T8UTWsn737lcZZxfvPOlrV0+6hi58mtFVdLWAH1P+z1+0f4i+GWpQ6ho+og2skv+n2Mv+rkj/wDadfdnw0+Kvhb4oaCmt+GbwOMfvYGPzxmvyW8PeI5tPlTyv3lezfBz40a74J1uG60LV/JY9q9j63hs3pqFf3Kn8/8A8kYTo+zXPA/SsBRyT9KdXmnwN/aE8PfFvSIY5nS11UL+9tT/AB+6eteknhcLzXlVqNWhU5ZhCamh1cN8X/gp4Y+K+lPBfxCG8QfubmM9/RvUV3NB4GayhPkLPzn+LfwT13wfqdxpOpWghaAZBk714h4s0v7KH83e9fq18Ufhd4a+KPh59K1qzTzdn+j3Pl/PFXw5+0L+z3rfw4mFtrcUZEo/dSxf6ut+Vez5obnVT998x8sahF+787+OsTVf9V+Fdn4o0aawvHhlhrldRhPmP+5esfb+zp6lGOIvN/5Y1T+yzi4/dQ1vRxWdhG95dQ70jqnceN/B8X+hyw+XN/5Drhr4qma0MLVmYmqQ/YI+ap5g/wCWU3mVQ8UeKIbq8/e/crEs/G+m6XqKQ6hNH5MledDMWvcOj6j+65zpPKmuv9VDT/8Aj1j/AHo2IKx7j4teD9L/AOPr/lpTP+F1eD9Zt/7H+/5ldc8xZnTwX7v3zb8k+9P/AOWf72sfw/rNna3nk/2lG9n/ANNJf9XWrHr2gXQ8m11KB8/6ryqqGN9ojOeE9mVriLzZOlVpLUy/8t99dDJa2f2fyRD89Y95FDa3nk+fHWftyPYfyE1ndQxR+TXN+ONBvPM/t6w/dzR/PL+68zzKZrHxB0HRrh/NvE/d/J/ra0vC/jLQfEcf2OG8jkS4/wCmtdFCvTXvzCdCpT+MxNP1T7Xbw6lD5n/XKSrkhMsfnYSq2qaD/wAI5qD3lrM8kMn/AJDp+n3Xmn/pjJXdOdKpS5zCZla5pc0Uf2yL7lYkv/XHfXbSS+bA9n/BJ/z1rm9QsJrWTz/4Kj90QZUgh8r/AFPl1DJLmRP3PyU+4izJRHNl+mxKKdQz5CazuprW486tv7dDLZvNLD5lYMcMPz/vfMq5Z3XlSJ/cq60/3nvmg/8A75p9vdf8sYqf/YM3med50knmVcsPCV7f3H+pfZ/z1o9pS9l7gf8ALkz6u2fnS1qx+EoftH72b5K0rPQdHikz9yoU/aUzOcx+iS/8St4bqHzP3v7qWn65pcPiPS3s5Ts/55f9M5KsxxQ2sf7qprP/AFfneSmz/plWyp8nvl25PfK1vYebb20Oqwo6W/8Aqq6TRrqzi8kRHfWP5pw/lfIlPstUm8vyf+edae0qUDmnRp1KZ23xI1mz1TQ7Dyod80cWyWSuDt/3sj+bDso1C/vJY0/fUy3uph++86s/afujanT9matmPK/6ZpU0d/8AvP8AXVlfb/NkeHH+rp8Uvm7P3yUQh+6MzpLPVIvtHSun8NapDFH52PM/661wGn3XlSfva29L1mbzE/ff9+qKf7v3yeSmfQ/wf8eTaXcW03neW8f/AG08yv0a/Z+8eWXj34aafqcU3mTQwpFdD+7Jivya8L+KJraRMzR/9/a+pf2W/wBty0+FyT+Hdd0mS6sbqbMVzFL/AKuvt40f9YcjVCgr16Z4an9TxXtZ/AfeqK4ONifgakBVRyOfpXzzq3/BQf4XafChtbKea5k6RCSMD/vuuK8Z/wDBSWO0ZB4f0ZW8zqTJv2V48eE88npKny/4rL9TZ55hF8ClL5H1vu2jllA9K+Bf+ChfjG0HxPvYNNHnmNYo5sS1g/FX9ub4seJNOmsh4q+yxXHyGO3tdn7uvnrxJ4ovNUjeaXUvMf182oxWVUMsp3qV4Tn2hqdVDG4nEa8nJANc8UQ7POis/LeuV1DVDfyczSb6syXRlt/JlP41j3l15Nx/qfkry6dQOSr9s+yf31rH5P8Az0p/kzeVnyfnqtJN+8QRVpW9rNNGk0v3K4eeqekYl59sm/8AtVVriw+1x/6V5n/bSuk+wQ3Vxi1mqzb+EpdUk8mUSR0U5up8Bn7M4aS1ml/c4+eq1xYTf67ya7m48D3nlv8A6H/q/wDW/uqx9U8OXlr+5/grq9g4fGE2cZcWsMJ/1P8ArKzbiL929dVeaDeeX+7hrK1Cw8qN6xnc3/iHN3EU3/Paq0sU3meR5EZrSkimEfnTVQltfNHSSsvaVP5CCheRQmPHkxyP/wBNap3lr5X/ACxrVuIoevk/PVa8i/d+d51af3wMe4tfNiT/AJZ1DeWsMUSQ1f8Asp8zPn1WvIiP3MvmbKw5L/AaFOQ/8sRD+dHmzevyVZjihx+6qGTyf+WNRf2dXkF/DJPOHtUckX7ymed+8oklml71vD2owkls/LqGSL95+6hp8kR/11En+qNZByFC5im8ymSRTRd6s3EXlR+d53z1D/yz86Wf56cJ0y+SkV7zr+FRyf6v/XUSRTeXj+Oq0nneX5Pk1v7QjnCPyZY/3tTRw+VG/HyVDbedFG9M+1ebJWfIdX7r2Q+SbzeLWpre6P8Ay1/d1Q/1NTW83/PWj+IYch0On6h5X+qre0PxHNFJ58VcTHczRR+cPuVcs7+aL99Ufw6oQPe/h38X9S0qWGG1mntXjl3xSRS19ofs9ftZaF42SHwv4z1GNL6Q7LW8/gnP9xvSSvzP0/WZhKnlT13/AIL8e3mjf8tvkr16OMWJp+yxO5hOhz+/A/WcbNvegBQCetfJn7N/7Zi2SQ+GPiBdh7WMeWbr/ngP759q+qtM1XT9asItR0u5WaGdN0UiHgj1rmxGFq0Hr8JEJ3RbwPSue+Inw58MfEzw5N4Y8TWXmQSjhwMPH7qa6GgnHaufn5Niz86f2lf2Z/EXwy1t7S906efTX4sdSij+R/8ArpXz/wCLPC//AAjdx/pXlxpJX6++LvC+leNPD134Z1eLdbXlu8UvZ1yMbl96/If9un4bfE79nHxbcaH4mvJL7T0kzp97GP8AWR1xY32lT3z18I6dfRnA+INU02w3wy3keyvOvih/wjcujzTS3kcb/wDPSvK/HnxahivH/tSGeSGT/lrFLXMePPGWj6poEOvaDrySTeV/x7XP+sry/wDl4dpt6p4o1K1/49ZvPT/llXE+JPiDqdhcOb//AL+Vg+F/GepS3Dw3955nmVzfxE8RzfaHsxNHv8qtZ06n2xTqDPEnxpvI7j91N8lZtn43mutmpWGpSQTR/wDPKWvKPEGszXWqP5u/93VOPxHeWEn7qZ0SuinTqVKfuHF7R+1Ppbw38ZNetdkOs3nn/uv9bV+4+LWpeZj7ZJ5Mn/TWvnXw/wCN5vtfnS3nmf8APWu21TWbP+y4dSi/eQyf8tKj2dP2ht7Y918N/HjWNL09NNm155Ej/wBVL5tP1X9ozUjef6VqW9P+elfPcms6ldR+RYQeYlVri61iK4/0qGTZXPAunCke0+LPiDpuvagkP2zzIbz/ANGV0nwuutY8OSJNa3m+Hzf9Z/zzr5j1zWbz7H5Pnf6v/lpU2h/EvXrWP/RdSngf/plLWnsKlT4DB1v3nvn6I+Gtas/F3h9/3PmfwS1g3Fh/wjlx9iigkjT/AJ6ebXy1+z/+0Pr3hfxZ9jv7yfybyWP/AFkv7uvrHQ/Hmg6p/rZoN8kX+qllrqhN0FyGNShSZCLqb/lrTLy1+32/ky1Z+1Wd1J+68v8Ad1DJ5Msn+vrrh7KZw/wznpNGlMjmn2fhzzeDWx9l8qT/AF1Mt7r949X7Op7X3A5xlv4Xhij/AH1X7bTNNtbfyYj5n/XSq0d1N3NPjPmyf66tP8YF+3/ddav2cvmx/vZv+2VULfE0mJfuVcji/wCeVYTgHOWY4oZR50dTRf6397UNn/01mp8ks/l/uq056fwGZZjtfNojimik8n3qG3lnH+to82bzMedS9oaE0n7qTGKI4oZY/Oiqncy+bJTLeXMn+u+enUqe0My5+5it8S0yObzeIoap3EsUQ86WZ6sx3UMX76Kb56yMyzHLD/qYqfHLDs84zbHqnJLNJ/8AHKZ5s/l+TitV7Uf8Q1Y7qGWOrOny+VcZirKt/Olk8kw1ct4ry1u/Ph+5SnXMjp7e6EX+qmStWz16a1kT7JN/5FrlbfH2jp5dXI7rypP3W/8A66V2YfF4rDfwyPYJ1PfOq/4S3WPtCGW8+eP/AJ50y8168v43m+2eW/8A0zrB+1ebL+9mp9tF5vSb/WV0V8yzDEfHUInh6XwGlb6pqRt0hub153/6ay1DJfzRSeT+7/eVDHyfJl/eU+SKaWP+CvPm+Qun+7pchDcCby+f3dULyX/lt52+rN51z52+qFzFN6VpTCp+8pH2ZbVsafFmSues7/7Lbp5v363vD919vuEmk8uPy6woU6tRneej/C74Zar451NLXSdPd4f+Wtz/AMs4P9+vc/Bf7NnhzQ1S48Q3ZvZUHCRrsj/Kp/2cdf8AD178PrbTrE20d1Hv+1RwxbPMOfv4969HLccY/Ou2pUqYV8kIcgp11XOSvvgv4B1Cz+x/2PsT0jfFcD8Q/wBlrTL+Ga58MKRJj/V+Z8/517UqHOTSOCT1ohj8TTd783qc0qNNnxB4r+EGr+HJJvt9m8CR/wDPzFXAax4S8qN5pa/RHVNB0XXLZrXVLCKdD2kjzXkvxH/Zc0u+srmbwrMQJDvNme3+56V2e1wWL3XJMtTqU17x8N3mg/vfJirK1S1+ynyfJ+evdfG/wX13Qp0iudCnh/55eZ8leb6x4Xmi3+bXJWwVWiryLh7KoedahF+887yai8k+9dNqFhDFz5Pz1lTxCLr9+vN5Eb25PcMS8tYfMz/HVOWI+X+9rSuIfNk5qG8tf3dXz0qZBm/uYo/3UPzyUy4sBFxFDJI9WY7Wa2l88U+4Hlc4rCH7yqHIZvlTRdahkiP/AD2q/JF+8qF4v9J/0qGt/wDlyXTncp/66i5p9x50Un+ppkkU03enyfugn+7IZP3vH7uoZP3sb+b+7Sn3EU0RebNQx/vY/wB7XPOYfxCH/lm/lVDc/uY/3tWfKmtf30UNQyReaf3lHJ9sZQuZYYo/3UNVvM9qs3n7p/JqF4vK7U6cP3RoM/1sn+3RH53meSaZ/qqm833FXyIzH/6qptOl/wCetQx/6v8A11CReUP3VI0Ni3uvsstatnrM3mJ++rm47ryqfb6hMZPpT5/Z0+dlQpnpfhPxle2En7q8+T/lrX0N+z9+1j4p+Gc8MGTqOkY/0mzeXkf9c6+N5PFFnpcbzSz10ngv4q6FYXCXn9pJP5f/ACztpfMrqw+aJK0vgMJ4Wr9o/YDwH460D4heGLfxV4fl3Q3Eedj/AH0P9w1qX+pWOl2j6hqN7BDFGMySzybFUfU1+POpft3ftHaHqaWPg/4jx6Bp8Ev7uKOTP7uvK/2i/wBsH9on4p3FnoF78TdV1uX/AJ9opd/mf9s4q3oRyyvLmnXUF+JosLUP1P8Ajj/wVH/ZU+CsV1Zt4zXW9Rt0/wCPLSTuUv8A3N/QH86/M39vP/gqKv7UgUXGg6dY2emIVsbKM+ZJIT/fkr4++PFr8Tvh9J9s+IOj6lpv2z5/MuYv3deRW/jezl1D7HLe+X5n/TWpxeLymNL2eEi35s7qeF9hrM7bxh490HxHvs5YY0fzf9VXB+IDNoMbzWsPmJJXAeNPGN5YeJJvN8yNI5dnm1pRfEGG60tIbq8r5+dHk+MJ1zVi8ZWcUTzeT5Dx1xnxI8efb4/tn+spms6zDLG80VcNrl1NL/y2+StofvDOdQx7zXry6uPOi/d1fs/tmqW6TWsO/wD561lXEUMsfnWtM8P6zNpWqf6L9yT/AJ6VpTp/u/jMKftPjOwuNBvIrdJovuf88q3tP16HRvDb6PL/AMtKp6f8QbPzPsUsEeymeIPseqW7/wBlzR76z/ee15JnW50qlL3Cbwv8UIdBvPsd186Sf6qun1D4g6bfxpDdTbE/56V4tc2upRXHnS/8s6m0/VJraPHnb0retQXszkhX9nSO28WapB9ieGwm8yubs9UmtbjyRWPceKJrXf5t58lZtnrM11cJDdXm/wDe/wDLOnTo8lLkgYfxPfPRbjXrzS5bab+P79fSfgvxJeX/AIPsNetTvf8Ad/vf+edfKOoazBFo3nSzyPNXvHwT8ZTS/D9Ib+aONPK2eX5tcs9zuoVvZn0b4X8bzX8lnDF/zy2V1smqQyyZz89fMeh/FCbRtYSaX50j/wBVXrXgPxbqXijZqUsOxPN/5610r2lP3zDEHoUnnVN5eJPO87Z5lQ283/LGX56muPscWzM9aQqfyHKPt4ofLfj/ALaVNbS/ZarRy/8APKnx/vY/3U1XOoKcy5H/AKxJvJ3pWkPJ+TyfxrKs/wB0a0rOWEx/6mN6OcZZj8n/AJazU+SWYn91TIzD5f7r/lpU32Wb7P8AuoaIf3zMLeUy/wCtouJfNk/2KZb2s3mf6mppLARSf66sfZgU5If3n7qoZJZhcJ5NX5LX/ntRHEIt9X7Or7I0GSRebH52fnpkcXm/6779SeZ/01p0cv7urp0A/ck1nL+7/wBK+epvs0P+ulqh9q83/Vf8s6f/AGh+76+XWnIc/OaUctnFszv/AOutEVziTyfuVm/b5oo6fby/89T5j0QoGn8Q2/8Arl/rKsx+d5af6v8A7+1iWcoupK3tLi/d1pzmHOibT/8ASrjyZf8Av7W3Z2E3l/6nfR4W0G81nVIdHsIZJLm4l8uK2ii/eSSV9MfCj9gj4yeNtPtrz/hHI7G2k8uTzNS+T/8AeV6FHLMZWpc7fJD++YzxVOD5D55t/C83mf8AHnHH5cX/ACyqnJoM0MnO/fJ/zzir7/07/gmMAyXGp+LLaHy+v2aJ33/nUvij/gmRbS+G7k+F/GqJfCL91E9oUR/q/mZFKeAwkaX8aHP/ANvmfO6lTk5D88rjQfsv76by/wDrnWVqtrexSfbIofLhr1/4pfCfxR4B1aXwz4v0l7K9tJNklu58wEf9dK818UaXNYWafua8m/s/cO6dD2a5Jn0bb3X7yuh0fVJoo/3U0cdcfZ3UPl/vZpK0o7/yo0/c/wDbWt4T5/fRZ618PPifqHhkfa7HUXSaP54oo/3n7yvon4W/tJaD4lt107xWE0+8SP78h/dvXxRp91NFJ50s3mV0On+KJrXZ5M3+rrvji6WJp8mI959zFUaftOeB+gllqFlqVut3Y3CSxSDKSI+QasFc8rXxp8PPj34u8HjydHu45If+faSvfPAP7RuheIlWDW4/sr+Vv3t0qauXNe/RlzoXtZw+M9PCk04DjB5qrpmradq1st7pt3HNC/SSM1byD0IrzmuTc1U1MyvE3hXQfFdkbLXLCOdP9r+GvBPi7+yVdss2p+DsXS/fNvJ9+vo2TaR8xowuzNdWFzDE4V8q+EznSU/ePzb8UeDbzS7h4bqzeN4/kljl/wCWdcTq+lzeZX6IfGH4X/CrVYZPE3irwvFcTGLYT5mzeK8G134YfBDxE6Wi28+nf9PFlN/8crnzPEYKlyVoLkhI+hy/KMbmWGc4dD5QubX/AL7qtJazRF/Nhr1z4tfAnWPhjdJPdSw6jptx/wAe2pWX/tT/AJ5153qFhN5nleTXN+6r0vbQPPqUKuDq8kznri1/d1Tkwf3NdDcaXN/y1+5VC40uH/lrWdOt/ORyGbceTUNzD9qkq5eeT/zxpn2X931opzLp0zKki/dvTfJHtV77L/yxm+5TLjyIv9bDV+0qfBMX+Mx7jiTJmpklr/y2iHlvV+S183f+5qGSLyqcF7QiEKhQklmMmZZqZJLRJF+8pkkv7vFROh/OaTKdxa43zVT/ANb/AKoVf1D/AFdUX6/hWc4ewM/jEk/6ZVFUskX7vNFvFW//AC79wv46gvmf9NaljE0veoYovKkfzaPNEv8AqaOdFBJLNvqz5s3l9ahj/wBZ/wA9KmjlhijeGKsf+XXvlU5mP4pv4bXT/Ov7zYlfPHxY8ZXl3eTTeF/Pjmj/AOXm2+SvY/ihqmm2tm81/eeX/wBMq+Y/iR43vLqSaz0ubyErghE9KnqH/C5PElrGn9val9reP/lrc1c0v9q+80vWIbzS9SSC5s5Y3iltq8K8SX+pyyvNLeTo9cleX81r/qpvn/561cPZGE5/vT7q+Jn/AAUd+JHxa+Hf/CvfHkOj6lpskWyX/iVx+Z/38/1lfLXjC18H6hqEwsLNLVLj/VeVL/q680s/FGvWv/LaTZTI/EcJvPOi/d1pCnyfAFSoHxYsBa2aTedIj1yul6peXVukMU1bfjzxR/b9v9j87565KzuodPk8j+Ot4a0/fMP3Z08nni3/ANdXN6pLD/qfO/1lTXfiP7NH5MU3z/8ALWuJ1zXpv7Q/11XCnU+wYVDof3NrJ5MX/LSqF7/0yqto+sQXUfky/wDLOptQvwP+PWtOSpTLphLqk1rJ/rqm0vxReRR/63Z5lYmqXRl/10NVrOWGaPyf463pqm/fmROZ20mszX8f+i/frm9Q1S8i1DybqqFn4i+wXCQ/x0/WLr7VH50Wyj2HtPgMJzIdY1n/AEfp/wBs6h8PXU0tyk1ZUl15sjwy1t+H4v7Pt/tgm+ejkNIHVahL5tmkMU0e+vVPhvrMOg6fDpsWpJJ5kX72vE9Hv5tUvPOlh/65V6Rp8v2GS280bHrlnD7BftDv9R1nFxmOHeler/BPx3Da2aQXW/ZH/qovNr57uNevLXWHm879zJ/yzr074J2v/CR65bQxTIiSS/vZaw5P3ptz+0Ppnwvr15rMiajN+7Suhjl+1SVwdx4p0fRryHwr4cmjke3i/e12fhuwmurfz77en/TKumFiPZ+0pe4atna4/wBbU3ledJ/rulVvtcNr/qv3lP8A7U82Onz0pnKaVt5MX+tNX9Pi/wCWMWxKwbfUP+eRrSs7qb/lrNV8gG3HL5MlWY5f3f72aseOXyv3NWY4v3bzVoA+S5/ecTfPT5LoeX+68uSqcf8ArPONTSXXm8RQ0TMwkv5pf9bTLiU/6mXy6hvP3UaDyaoSSzS/uc0fvagfxCaSURXCTSz1NJLLdSZtZqofvpZEqz5X/PKb5KiF6YfxCzJ50Vu/2UJvpnm/u08r7/8Ay1pnlDy/3U1Pt/Jw/m/frcOQfHLN/wA8as28v7z/AFP1qskvlH91Vm3l+570c9Uh+/8AAaunxQxf63zK6Tw9L5txxXPafn5PNrp/DcU0t4nlUU/ZOr74v+XJ9U/8E/Ph1o/if4uaXe6ppwdLO5jusmL/AJaR/wCrr9LI8EDHpX5zfsJapDo/j7S7v+0nTy7nZ/rf3cnmV+i8JBhBBzmvouJafIsNyfByI8/BSTqTJaQgYIApQcjNFfMnqHxz/wAFDvAdmviCDxHbWqK89riU+XnzK+IPGmg3nz5+dJP+WtfpZ+3X4a/tr4eQarHs/wBGkdZM+hH/ANY1+dfj+LypP4JHt/8AVSVn+79pqdmJnUnhYTO5+3+b/wAsf9irNvLDFB/z0rBs7/zf9ytK0v8A95+5hrT97TPP5zVt7/zesNXI7/vH+lYMd1NL/qquW9/5UePJq4fzhA6HS9Zntbjzq1dP8WzWtx+61J4P+2tcf9q+1bPKvPLqb7fDD/rZsVl9aqpmh7L4R+PeueGrVU07UJjKRiMGT7lexeAv2r9PmFvaeLxHtlO37anyAn6V8ff2pDF+5jm8yr9n4tntY8CavRhmFGouStDnMZ4amqvPA/Q/w14x8N+MbBNT0DVo54n5BU1pkqeHIx9a/PXwv8VdS0GT/iX3k+z7/l+b+7rrNR/bA+I2l+Eby1ttXjeTypPKl/551dPCYKu/crKC/vinLEX5IQ5zuP24/wBprRfCaf8ACEaLfxtcwH/Sf3n3JP7hr5Z8N/G7Urq88mLUt9eIfFz4ta9r2uXN5rOpf6T/AMta5Lwv8QZv7Q/dTSV5vFOLy5YSng8K7xhu+7P1jhaFTCYXkn8Z9veF/ihqPi3yfBN/ZyXyahL5EVtF/rPM/wCWdaniP9lv4saPb/bb3wVMU9v3lcb/AME/9V03xH8ZdHvNZnSR45z9l8yX/lpiv0pjClVI6Yrnyj2dDC+9A8HjOovrcFA/MHVPC95EXxD88fySx/8APOsTUNLm/wBRLD/2zr9IPHnwB+H/AI5/fXelJbXJJJuLOMIX/wB/HWvnD4pfsWeLvDKPqOilNRtvN6RxfvI469VYXC4h81CVn2PjfbP7Z8rSaXD5n+pqneRGKT/VfPXpHiDwHeaXcPDdeZH+98uuV1TRvssn+p+SuKvTq4f44HTTqHJXlrNLUMlrNFH1rbuLWb/lrDWr4D+F+vfEbXE03RoUgh/5a3tzL+7jrkr18LTpe0mdFChVxlX2MDhpP3Uf7qobiKYx+dL/AMtK+jbb9jPQZkx/wseHzpPW1/d15F8Y/g542+DuuPpHiKzjkhk+e1vbaXfBcR1y4XHYbFP3Jndjcnx+DXvnntxF/wAsfJqtJ+661q3kXP8AqaoXEX7v6V6PJ7Q88yriISyfvarXFqIq0/KP/TP8qpXn+t/CuX2n2Jk+0KnlTf3hSR+dLJ1qbyfN7UW8Xnbz51aQn7Mj2YR/velPki/d/uqZ5v7v/wCvT7f/AK7VnOHtDULf97H/AKVVPUL/AOwRvMIaueVN5n7qmXlhDs86WaicP3RjTn+9PGfiZLD4y1H+zb+aTZ/yyii+SvFtYis9GvLmzurOP93XuvxE8OTeKNUuf7G02eC2s/8AW30v7uvnjx5p81rbvZxXnmfvf3sVeVOielQ/eHnXjSL7VcPeWsMdcN/pktw8NrZpJXc67F/Zdu81/N89cHea99guHmtZquh7MKn8g+8i+zW//Hnsrj/EEsMUj/363tQ8eXt1bvZ3U0eyuP1W6/tT/j1/eV3UDCpTMq81Sb7R/qah82GHfNLN5dasfgi8v4/Olh+SsTxJaw2Ejwjy5Ero56UzD2ZiahrEPzzed89c3rF/MZPOx89XNU/dSfuqzZLWaUf6l639pT9n7gVC/oEs0vWb563pL/7JXN6X5NreVq3uqQy9tlKBJDql/wCb+5/jos5YbC3+2XX/AGy82qfnfaZKZqksHl+TL9yugzM3UNTmmu/9dVmPVJvs/wDfes2eMyScGn2cWZP3ktHtP3RmX7OLzpPtl1Vy41nzf3MX3Kp/avK6zfJVa3l86T91Wf8AfLhM63wfLDa3CGX7kddt/b00sfnV51Zyw2tukMs3z10kWs+bZpgeXWfJcg7nw3L/AMJHZzQyzfPb/PXYfCfxHNo2oP5c0iP/AMsq8f0fWZrW8T99/rK9U+Gel2evapDDLebEkl/5ZVhXo+zOqEz6B+E8t5rOqfbPse//AKaRV7ro+qTS26QmH5K4DwfFo+g6PZ6P4X8uBPK/df8ATT/ppXeaHLeWEfkyzI7/APPSuH96nzzL9ujSuLWHy/O+5VOSWH/UirN3debs82ffVOT91JjFelQ/nMia3/j/AHyR1q6fLN5dc9H+9k/e1safL+8SH+Ct+Q5+Q2LeX/nrNV+3uofL8nzqyo/9aKt1E/fCf9wtRy/vKPtUPpJTLeXzpPJojP8A2zq+f2BmVpJf+es3yVD9q8rfNF9ypriaGX9z5NUJJYYpOKOcA82HzKfb3Uwk8n+Cq0nky/8ALemW/nSyOPO+SjkA2PtcP+qih/7a1H9qHoKqRyirMEn/ADxq4e1CECbzfKj/AHUNXLf91H538dULe78q886r/m+dxWM7wD+IbGl3Uw2TTQpsrsPD91/xMEm/1af8ta4bT5YYo0rp9Dv4Ygk3nVvTCEFT9w+ivgx4il0zV7aXTJtnly+fFJ/y08yv0++H+sHXPB2m6u/3p7NHb8q/Iv4T+I/7P1BPNmjdK/Tr9krxVaeIvhZa20N3HI9oPLk8uvqcyhUxnDtOrJawnb5M8em/q+ZNfznq1FA6c0V8keweaftS6PNrHwV1iC1/1kMSyfkRX5k/FAQ2uoPDNN/q6/Vz4sWP9qfDnWNN27vNsJBj8K/Kb40WsNreXNnL+4/e/wDPWsJ39p7h2JKpgmplbS7/APdpDmtizv5v+WXyVwel+I/tU/70bK29P8Rw3W+GWaSPy/8AlrJ/y0rSn7X7ZxnW/aoZbf8Ajp9vdQxR8Vzdvf8AlR5/jq5b3/lR+dL+8er5/aGcIVTYkuobWTzpd++pjqkOf3vmVg/2zD/y1+/T49UhlkoNOc25NQ8qPHnU+O/hlj/11YMl1g/upqsxyw+X53nb6whCnMuc6RsfavesrxBfzf2Hc+V+7/dVDc3/AJsiTGb/AL9VW1y6mtdLufKm/wBZFJWHPz05nRh/4yPnLxpf/wCmTTSzeZ+9rE0/VPKvE8qn+NJZotQmhl71iW9/5UiTYryv4h+kYTaB9LfsqfFTUvAnj/TvFOmTIj2l1G8ttJ/y0jr9ifBPinSPHPhuz8U6HPvtryEPGfSvwW8D+KIYryHE3l/va+6f2Xv2ovF3gHw8ljpGozyQxy/8e1x88EleplNehUX1aU/fPI4woKph4V/5D9GaawXPI6968f8Ahz+2B4B8Wwww+ID/AGXcyR5wW3x/mK9X03UNP1O2W7028jnibpJHJuFetVw2Iw799H5/GVOZxHxN/Z0+HfxNsmh1DT/sc/mb/tNn8jZ/CvmD4w/sgeM/Bcc2o2lpJfWMcv8Ax8W/zkR/Svt5VPQnNNeNJE2v+INbU8wqpezq+/DzGo8nwH5Yax4cvLXUPscsNGr/ABV034fW8Og2E3zx/wCt8uvvL4wfsm+BfHdtc6l4fsodP1N8vG3lfuZJP+mgHWvzC/ansNd+HXjPUvDmsGNL6zupIZIxXg8QYGjWw3tcH8PVH33BlalDE+/8Z6FH+02Ps6fYLz/lr+9q/rHx9HxL8Hv4P8R+RdeXLvil/wCedfJD+N7yWPyfJ+f/AJay+bV/wf431K11RPKm+T/nlXx2Ew3s6p+mZrWwuLwnJM9UvPJEj+V+8qnceT/y1h+erkkoljSf/plVa4h/d19bTv8AGfheI/d1uQx5Iv3n7qqdx/WtN/vv9aq/u66dDn9mUfOPvRViS1h8zHk0zyoc/vamftKhqQ+V5vSiOLEnk1ZjsYam8v8A6ZUezJ9mU/8AVyfuvMplx5MMf+l1cuD5XGax9UtbyXfeXUPl20f/AC1q/aclLkBU/wB4cN8ePiXo/gPwHeXcvzp9yKKL/lpJXxt4k+JfmyTXnk/vpP8AlnXrX7TvjKHxbriaNazf6NZ/6q282vnXWIvN1R7OL78deden8B6NOnyGJ4wurzXrjzv3lcZrnnWv+tr0jULCHS7P7ZL9+vN/FmqebI95LD/1yq6f7yp7hzV/Z3MTyob+TyZZvkre0/8A4RvQbNJpYf8Av5/y0rB0uGzsLebxJ4j/ANTH/qoo/wDlpWJ/b974ouPOlh8iH/nlWsDLn9odPrnxLvLqP+zdGs0jT/npXH3ml6lqlx+9rb0uwhq5JD5XFdPPSgaQpmJH8OdHtQk2szef/wBMoqreINL02wt/+JXDBAlbximl/wCWNY/iCwvL+PyRD8lRD+IZzpnDXkXlXHBp/kmT/WVqyeF7zzP9S9WbPw5NLH1kreFcj2f8hgxxC16zVWktZpf9VXT3HheaWPyZam0fwbNnyvJog/tmlOmcT/Zd7/z7/rTP7LvIpP8AYr13T/hJNdRpmGr9t8G5vtH+lUfW18Ap4WqeP2fhy8v5MWsP+r+eWmfZf3n+or3LVPh9DoOlvZ2H/LT/AFtcTqHgOa1kf9zR7bn9yBH1dzOJjwP3NX7e6mMfkmrmoeF7y1/5c5KrWUXlSfvYa39p7OkZzoezLml3XczfPHXpHwf8XRaNqCV5Fb380V75J+5W94fi14aol55P7mOsIU70+cmB+h3wHim1TQ/tk0+95P8AnrXpflfZf9bXz9+yX8S4bDT003VNS+eT/nrXv1xL9vj86L94klcvJ+9NpwCSajzfNjzUMcvlSeTimSS8f67vXbyGJM8vld6uafL/AM8qyuZXq5pcv7ynyezM5nQ20vlR1ft5f3f0rEiuoav2c3/PKrp/vDMucRSedT5JpjH50tMjlm/6Z0z99LH+9+d60NCGP/prTLzyYv8AltGlPk4fp5b1TuOif36zmZ/xCG4lqG2l+R/31PuZT5nky1Db/vZP3VacgFm2l82OrP7nyqoR/uo8w0+OWbzP3s1BoX47r7n77y6uW8v7z/Xb6yo/3v8ArasxywxSJD+8pez5DOB0P2r930q/o91D5n+3XN2915o/2Kv2dz+8SGLy/wDrpWi9wJzPV/Ad/wCVcJ++dE/5a+VX6D/8E5vH1rO954Rnm/eSRedEDJX5l+F9ensLhIbqbzHjr6//AGEviLF4e+Jul6jIYI7eSSOC58yX/npX2OSU55jleJwz6Qv81qeLjPZ05QrH6YjoKKbGwkjBNOyPWvh9j2U7oqarbC/0y4sj/wAtYnT88ivyV/aY0uHQfGl/ZxQ/6u6kT95FX64n7p+lflj+31o/9kfGPW7WW8kd0v5JIov+ulOCO/CrnoTR4XcaDeaXJ+5ot7+8sLivSNQ8JebJ5Ih+f/nrWVqHgn7V++lmj/6612+wTpc8Dxvb/vTm4/EflSfvRsrSj8UWcO/99/rKp6p4IzxazeZXPXGl3lhJx5m//lrXDCnU9odCqU5nc2esC6j/AOelWbe//ef7f/PKvOv7U1KwkrSt/FGY/wB7NsetJ0zNfvKnMd5Hf8vmiS//AHiYm+SuSs9ehl/cyzVcjv8AzZE/ffJ/0zrnr0ef3DrOnkuv3f8Arqrapqk02nzQy/OnlVmx380Vx5PnU/7efLeGX955lctf2ipckDen/FPnX4o3Xlaq/lfc8391XAXGvZk86vWviZoNnLcTfufL/e15veaDpsNxiOvNp1OQ+/wNT90TeC7+8utQTyoa+uvgnfzWvg9PNh2JXzN4TsLO1kS9ihr6H+G9/wDavDaeVL/2yriVelTxfOXnH7/LD1HS/Ft5YD91K+z/AKZS16h8Mf2lPFHgaeEabqzokf8Az1/eeZH/ANNK8IjupquWeqTQ/wC5/wA9a+vweZ4hL2aleB+czoc/xH3T8Of25fC2seVaePNPFg5Ow3kcmYya9j0f4jeBtesv7R0rxLZSw93EwUfrX5i2/iP/AEfyR5lX9L8eXejfubXUnjT/AJ5eb+7rsqVctru8o8hj7Gr9k/RfxV8cPhf4UtJpdW8V24MP3oozvevyP/bs+NemfFb4waz4g0rQ0W2mdwDL1NelfET4q6lF4PvJvtjyTSfJXyR8QPEf2u8mE00eySvLzPHYLDYb2NJ35z7rhbLqlN+3mcl9vmiuK6fwP5Mt5D5v/PWuP+1ZuP3Vdn4PuoTIn/tOvk6f8U+7xH7zCnvFvFBLZQ/x/uqJIjKnMNaWh6XDLpdt/wBcqmksLOvZoVz8jr+z9tM5UWEMu/EPmVQudLm8wV2dxpcPlvNLDs/651lXFqYo/wBz9yuip7Op8Bz0zno7Ganx6X+8rV8nyu1M8r95RTgFQrR2MNPtrWGLvU0lrMP9VRJFNV0w/eENxa2cv9yuD+NOqXn/AAjd5o+lzIieVsllrv5O1cx408EQ+KI/Jupnjh83fLH/AM9K5ahdOfsz4S+IGizaXqFzqUs3yf8ALKX/AJ6VwGjaNZzXj6nL9yOXf/10r3L9rTSryXxQ+j6Dpscemxy7PMii/wCWleFeINU/sa3+xw/8s6w5PaHdTqVGM8YXVndSfva8Z8eTf6Y8Pk/6uu5vLrU9U1DzvO/7ZVyvjSx/0h4Ts31vQp+zM6/7w831i61K6k8mW8fZHVzw3pc3mf7FXJNLN1eeTXp3wz+HM11Ek8tkmytq9el8JjQwvtKpieH/AARNdBPNhkjroY/hfqV1H/qd9eu6H4D02KP/AI866238EQxaO94YPn8qvH+tntrAHzlb/DmeLfDFZ/PT4/hLN/y2h+SvfrfwH5Wn82f+s/1tQyeEoof+WPyVf1s0p5b/ADniEfwgEcfnQ2VMj+EsH/PH569y/wCETh/yams/BH7xP3NY/XTSeWnhUnwWhupEm+x/P/z1rV8J/BGa61Dyooa9+t/BAlTyZoK3vD/gOGwt/wDU0QxxdPLaZ45H8KTo0fkeSj1Tk8Bw/aP3tnXuuoeEoYv33k1jyeDZjI800Mb+ZRDF+0LngfZnid58NJruX/U+ZVbVPhB9q2fufn/65V7xp3g3zf3MVmm+tLSvhz5twh8mOOuqnX/vnL9X/kPlTXPgPeahv+y2e+vMfGHwvm0aR/tUP/kKv0O1z4VQy2bz/Y/+WX/PKvB/ix8IIfs73kMNdFPFXqnDXwJ8haf4c02K4/dWe+b/AKa1q65dalpdolnLNXZ6p4I/sa5mmMPyR1514g+2XWoPNL9yvU50eJOmz1f4D+I9SikTzf3lfYHwf8eabqif2Dqk377yv3VfEPwb1WfQdUh/0Pz0k/1v/PSOvqv4J3/2/wAQfutN3/uv9bXJXqGsP757HeWsX+uiFZsg8q4/e/PWr+5urf8A12x6yryLypOvz110J+0pHHMLjzv+e3yU+zuobWTFVvN+T97RHNDLvrrMzS+3/vK1dPv/ADa5L7fDFV+z1nyo6z/fByHYW91VnzZoulYOn6oJY85q5Hfj/lrNXVyclICzqMp8vzovv1m3F1NVzHmx/wCuqhcWv7zz/v1ic8/7hTkl8qRKPN/e/uqfcRTeXUMdrNLx/H/z0o/hmkJlmL/W0/zZoqhjtppf+W1TR2s0Vbc4c/tB5upvkx+8qzbxTeX+9pltYZk/jqynn+Z+6rGFS9UIQCKX95+6m+erltLNFJ/zzoj0uGYedLV+zsLPH72urn9mR/ENjQ5f3aV7N8C/Fs2j6vDeRfvHt/39eM6PFDFH/qa7nwnqn2WdP32yu7IMw+o5lCp0ZyYrC+3w3sj9nPgv4wtvHvw30bxHbTqwuLGN5B/dbHIrrQqj7vB9cV+ZP7OH7bXiv4OxTeGtP1CO4024k3xWV7/yzf0ST0r0u+/4Kc+M3Di10aCDEeRxvr0sZwvUqYuc8PWg4X/nR58M0qYW1GdGZ90PLGiM7sAo61+X/wC3t8QfC3jH4y6pqPh3V4763jufLIh/jrR+Iv7c3xj8cafeaZP4ieO2vIv+PaPy0/d184+INU/tm4eYQvJ5n/PKKvOxOXYfLF+8rc8/7h7eFxVTk5/gPoeTwv8Au/3o8ysq88L+VJ++/eJ/zyr0u80b92n/AEzqhJo0M2+e6g3vXmzh7P4DCnTpfbPLtV8L2Zt/Jhs/LSue1TwvDLH5MsMez/nrXsGoaDCf9VDXPap4cNrvPk/6z/W1lT/ii9mjxbVPBolP7qfzP+mlYOoeHLyLfCfv17ZqHhf7Vb/6jZXPax4I/wBHz/zzp8/tPcNPZ+zPHP8AiZWH7kw/6utKz8UfZY/9LhrqtQ8L+b+58mue1jwlN8+Yajk9p7hp/DH2fiOGX/ltWrp/iP7n75K4mTRryw/ffx/8sqfod14ktdUSKWzj3yS/8s6469A3w9apUZW+Jgmlkea68yRJP+mVeb/ZYYpH/c1618VIpvLTzfv/APLWvJdQimhuP9ivBhCmff4Of7rkNjw/awxSJ5Ve3/DO6ml0dIfJT/tlXg/huX7XJ+6mk31618J7/wD0xLTzn/eS1wzocjOypD2+FnA9FjurzzPJNX/9M+TzfLjrKvNQgtbjyYqm/tn91+9n319LhJ89I+Cqfu/cNKK1/wCm1UNYuprWNIbWHzHpkeszeXT/ALf9q2VDqfvDOnTOe+MGqXkXg94Yv3b18weKJbyK4826r6W+MH/ID/ew/PXgPiC1+1Sfvf8AlnXh4iuqlU+/yd/7NyHJWV1DLXZ/DuWa61Szs/J2eZLsrBs9B/0zrXqPwn8L2f8AblnNdQ/6uXfFWNM9jF1/Z4Q9+0+L7Lp8MPk/J5VXLfRofL+2SzfJVa3v4fM8kfcr3b9jSb4N3vxQitfinZQySPFnRpLwfuPtHmfx+/8A10r3sDR51yxPy+pUpe15ziPCf7PHxB8bx+doPhC+uof+esdrVjxZ+yF8WfDulzalc+BNUSGP/WSi1r9JrWCztoVhto0SMDEaoKmKqOBXrqGHj9g5PrX8p+RmqeA5rX/Wwyb/APnn5VY954c+y/8ALGv1M+JP7N3wv+J0W7WtCSG58zf9ss/3cmfrXzJ8XP2GvGfhWR7vw5CdbsZZM4s7X94n++neoWBpVP4U7GkK58hXNrNFJ+9hqGS1r0jXPhpeWtw8Mv345dnleVXN6h4XmtZH/cvvrgmquHq++br2kDm5LCYbKoaxYfard4ZYa6T7BNFJmWGoZLDMn7qlOdP7ZhP+4fPf7RHwg0fVPBc15dXk6PH/AKry6+A/ihaw6Xrk2m/6zy5a/UT44aNNdeA7+G1h+eT/AFX/AEzr8uPjhpc3hfxJcwzff82SsKNH957h1U6hxOqa99gt/Otf3dcr5s9/I8so31paj51/J51avg/wvPdb4fK3vJWlSp7MdOnVr1Sn4P8ACX9qagn7n/lrX0V8P/h99gs4Zoofnqh8I/hLmRLyWFESOve/C/heG1jTyoa8PFYv+c+pwmB9nSOY0fwRN5aHya6r+wIf7P8AJ8munt9Fh/11WZLATRcw/JXj/Wj1qdA4aXw55tm/m7Kyv7Bhik/e13mqaN+78jHl1j3el/vP3VbU2X7A5iTQYf8AlkfnrY0vQf3aebD/AKytjT9Bhl4rej8LCWPMs3zx05zpAqdUwbfQfK2eV5dTR2v7ytuPS5sc0R6XMP8Alj0rOmXP92YklhDNvpkWg+b/AK2ukt9BhP76rMeg+aP9TR7Sqqo5wpnN2Xhzyo8RbK29D0aztZPPlhSrlvo3lceTU0dhxXdA5PZ+zGap/pUDww/JXmniT4fXl/I83yP/ANdK9at7X5/Jlhqa88Ofao/9TXo4Wfs6Z5WLp+0Pjn40fCWaXQ7maKzj/wC/VfLWueHPsF4/mV+lnxY8Dw3fhe8/5Zv5X+t8qvz9+KmgzaXrFz++jk/e/wCtr0qFT29XkPGr0/ZnK+G7qaO4/dfu/wB7X11+zXpd5a6Ok3nSedJXyR4P0ueW44r7V/ZrtftXhaGaXfH/AM8q66lA8T42ehRkxR9ahki87/VVsf2Z/tUf2Z/tVmp+zCczm7y1hij/ANus28E8X7mI1095pf3/ANzVOTQfNxOa61Xp1DCZzHmzeZ1o+1TRf66tiTwleSyedFZu9ZuoaXNayeTLC8bx/wDLKWKtwLmhapNF/rd9dJYXUN1HXK2cUx/5Y1t6XF+7/dVpzgbHm/u6Z5vm/uSfnp9nFNLH+6h+erlnpd5L++z5b0v4Zn/DKcv+q/e0yO6hik/dTR1NeeCNSluPOivPLh/55U+P4fTRR+dLN5lQHOQ/2pDF/rfv0f29pvl+TJKkfmf89a0rfwPpvl+TLD8//TWWtK38B6D/AMstHj3/APPWX95W/tKU6fuGftP3pj2d/pssn/H5G7/9M60rf/j4z5NdJo/hLTbX/VWXz1vW/hKCWT/U1nyUiL85x9va3n/PGtWPS7y62Q+T5b13Nn4Dh/541vaX4N03Gb+aCP8A661HtqZfOee6f4c1K6j/ANT/ANcq6Twv8PteupPKuofLf/nnXc6fF4J0u8/0/wASacnlxf6rza2LP4q/Bnw5ceddeKoI3/5ZeX89FDEunU9ymHtP5zH0P4QalLcQzRQyfu/+mtdnp/wbvZrdPtUPz+bWJ/w198B9Lk8m01id3j/1sscVQx/8FFPAesSTab4D8Bz6q9v8n7v/AJaSV6uFyziDH4nkw9E4q+Kw1Cnzzmdtb/Az/ltLpvmf9NPNqG8+EGmxSJN/Y8Eaf884/wB3SWnx3/al8a6W934Y/Zg1QJJFstZLfTJP/aleI/Hv9oP9sbwT4gTwt478H6r4V+0fv7U3Nhs8yP8A6ZyV24zh7PMM+bEOnBkU8ZQrrkguc+3pNG/eed5NMuNB9K6qTRjL++iNVpLD/SP3teHD2p21IezpHDahpflSv+58yqEmjGWN/Nh/7ZV215oM0Un7qs240uWKPyaJ/vCKczzrVNB83/YrB1TR4Zd8MsNenapo03r8lY9x4c8qN5vJqP4dM6uc8uuPDgij8nyax9U8LeVG/mw+Yn/PKvS7zRpppP3Xz1m3mhebH+9+/RT9lAzPIrnwv5u8RQx7P+edU4/C/wBl1BJvJ/1deo/8I5Z+W8Pk76yrzw59/wA2GuHFQvSOjD/u6vvni3xc8mWT9zeb5v8Alr+9rxbxBdfvfJin+SvXfi5FN/aFzD5NeV3ml3ksfk+TXzj0pn6RQhpDkKGj6zNayf7FekfDPxHDa6ik00zp5lee2/hfWDJ50Xl10nhfS7y1uErP+JS5zuqQ50e2ahrX+mJN/HT49Zgl/c1x9xd3ktkkwhkqaz1maLZxXq4WFT6tCZ+dY/8Ad4rkgdtZy4if99V/Q4prq4TyvneuMs9e83nzq7Dwfdf6Z+6mj/661pi506dIjCQq1K3JA5v4+ap9ljTTYv3nl/62vFtQ8mWvRfi5r0MuuTQ/wf8APT/npXmmoXUJkzFNXzM/ZzP0XCU/Z0g06w/eV6d8MopvtkXlfvK4PR4vN/1td58O5f8ATPJ87ZW9Mzx0/wDZpnq9nL5Uif8AoqtXS9ZmtZH8qby/MrnrOWb7N+9ok1S8i/c179OvVw654H517M+mvgL+2j8SvhvHaaT4kkfWNISHHkSdYx/0zkr6n+FX7Vfwj+LCR2mm66lnqL9dMvjsl/D+/wDhX5j6XrM3Xzv9XWxZ+N7y1k/10e+P/wAh16tHF0av+8aMFQpVD9bdynv+lKwPQCvgf4Qfts/EbwLb2cN3q6arYRxbJbK9/wDaclfTXwu/bG+E/wARIbezvtROk38nyeTenEe/0D9K09jzrmpPmOSdP2bOn+InwB+GnxNjeXX9AjF04/4/bf5JR+NfNHxd/Yk8Z+GrqTUfCv8AxNbGTef9Gh+ePP8AfTv+FfZMEkcqLLHIGVhwwNSsARzUuX8wQr1Eflr4g8B3mnyPZ3VnJHNH/wA9YvLrntQ0Ga16Q1+mnxF+A3w7+Jsby67pCLduP+P2AYkH4181/Fn9h7xp4fje78JBNYtD/wA+8Plzx/8AAOlc1bB+1X7qdjrhUpTPjL4iWFnF4Tv7y6h/c/ZZPNir8o/2iNLs9Z8UXM1reP8Au5ZP3VfsZ8aPh9Na+D9VhuoZI3jtZPNjlir8jvjRYQ/8JZeQ/Y/L8uWT/VV5c1Vw/uTO6hCmeOWel+VJ5P8ABXrXwk+HP2+4Sbya4bT9L83VEFfUX7OfhKGXS0m/eb5K4MdX9hSPVwND2lU2/B/gj7LGkNd/4f0GGG3/AHtaVn4Xs7X/AFVbFho3/PKvAqV6dQ+qp0PsGJ/Zflfuc/JR9g8rfmauz/4ReaWNPNh+SmSeHIYuJa5Du5Ejz3VNLm8z97WbHo32qT91DXeahpcEsnNVrfSoIv8AVQ06dRzM50zntL0GWLZNFDsStv8Asub7NWxbWtn5dXPssPl/uvLquf2iNIQ9mcZJFNF3qzp9rNL0+5V/VLWH7R5NTaPYQ+Z5PnRx1vQX2yOT2g+z0H1h8ytKPS/3f+pqzp9h5X/LarNxdQxf6oU+T2hRlSaDDR/wjkMsfnQj56ufb7PzP3v36v28sUtdVOv7M5ZzXtTHj0GGL/fqzHYQxf62uh0uwhuuv36m1DQYbX/W7K7qdelUZy16HtKR5d8QNBF1p81n5yJ5kX/LSvzf/ac0Gbwl4subKXf+8l31+pXizw5Z39u/m18E/wDBQjwRDpd5baxFNJH6eV/q5K9jCfxD5zHQ+wfOXg+L955Mo+SvtL9mOw/4pe2hx/q/+edfE/heX/TEhlr9CP2L9Bh8R+A4fK2fu4q9Wt7SZ8zOFqZ21tYeVJ1+SgaXNLJ5xrubPwR/pDjyasyeDIbWJ5vJrhn+7qkHnp0a8ikxFTI/Dk0tx+9rtpNGghkqGT+zLW5Tzb2DfJ/yy82tKczMoReG4YrNPK/dpUPijwRZ6zZp5sXzx/8ALSu2k0uGXT0MNTf2XD9irrwVH2m5nUqezPHJPCVlYSfuoqms9K8qT91DHHXeax4XhlOYv3f/AE0rw3x58W/GHw18Wf2DrPhZ9n/LK5j/ANXJXV7Cp8ECJ1P3Z6XHany/3tPktYYe1eXH406xLb+f+43yf9NahvPi1rEvMusRp/21q/YVTP23P7kD13+5/pcGz/npLLQbrR4pPOl1OPZ/y1/e14bceN9Sut/2rWJ9lVrfXppi5/tKR/8Anr+9ohhadT7Yv3sKh7lJ4y8K2tw8P9pfPTI/i14JsJHhF58//POvDftw96Pt8MXWGtKeFw32gPZpf2jNNil/0XR/k/6axVW1T9pHxVFGn9jWUcbyf8tfueXXj9vfzYf99V+z1DvL9ytJrCkQ/eUjs9Q/aC+KmsyeT/bDwf8ATSKX/WVT1D4g+MNUj/0rXp9//TSWueuJYftHnRTf9+6Z5vmyfva6qao/YIpw/dF/Ub/WL+3SGXxJdbPN3y+VL/rKLe/EMn/H3JO//TWWqFxdQRS/ujRHL5sn7qrmsR8HOUdPoelw/bEhz8kn+tlr9jv+CP3w0+Dy/sk6Vqmi+AtIj1C31K7S/vvssTzyyeYf3jyYySa/GvTL/wDdw+b9+Ov1g/4Ib/E3TNa8D+Lvh+jlWttRivo4nkyfnTY/6gV9PXTxHCtWpTn78HD/ACPMVOl9ah7Y++Y4EiQJGoH4V8v/APBWf4f2njD9l19b+xpLfaJq8E9iSmcbz5b/AJg/pX1GevA7V5x+1B4Zj8U/A/XtIOwE2LPH5keQpTnNfm87s+sylxjmNFdLo8sktfKkouNL/d+d5Nb0drCLdPNs/n/561DcWs0tx/8AHK7IfuzxKlf7Byt3pc3lVm3Glkf6353rs7iwhG/zfv1myWHm/uZYaiE/Zm1OaOMuNL/eVlXlr/yyENdzeaXWPeaN5Mn72Gj+Iaw9w4m40aHy3/c1j3lhD/37rvNQ0uaWTMX3KzZdGm8x6gvnOAvNGh8x5vJrNuNG/edN9d5qOjT+YnlTR7P+WtU7yws8f6mud+0fwAvbXPlf44eF5rDWbnzYfLf78X/TSvKLmw/ePX1F+0BoM37m9l+fzPkrwHVNLhinc+TXzuNp2+M+/wAqr+3wxysdqYrjj79XLOKb7RRcWE0Vx+6+5V/T4oY7hJpa8pV/Z1OSZ78v4R23hvSzf6Wnm0ah4S8qT91D8ldn8MtLh1Tw/wD9ta29Q8Lw+lfVZdC9I/Os4/348ZuNB1KL/j18yuh8D3V5/Z9z9qh+SOut1Dwd/wA8v3lZuoWH9l6W81LMf4R15D/vx4/44tby6vJv33mJ5tcfcaXNDJ+9rufFF/8AatQeaKGqHlQyx4lhr46dQ/SOQ57S7rypK7DwXfwxXiTfu3/6Z1g6hpdnF/yxrm9c8UHwbJ/os3+s/wCestelhKbqP3D5zNJ2w0z6B0/xZ7VfOoeaa+ctD+L+veZ5I3xp/wA9K7bQ/iXeSxp9q+/Xt1qdWHxnwkIHq8d/5W/99s/6a1D/AGp+88nzvMrmNP8AFsN1H+9FMk1mGK486KnQp1YF/wAM9F0PWZov/tldb4a8b3lrJ+6/79V5Rp2vebs82tWPWYfkhirRN06vuEclKofTfwx/as8c+AZ0g8PavP8AZu1vey74H+idq+n/AIT/ALaXwz8c2UcPiW4TSL4/LLFMfkz9a/N2z8R/9NnrodL8XTR/uPOroeZpvkrQM50z9YrPULLULdLywuUmhkH7uSKTerD6irOVavzi+Ff7S3xC+GsePCfimdLWSXfLFL+8j/8AItfRvwv/AG+/Dmpxw2fxN0o2LySbBqFmd8ef+midY66qfJW/hMxcGeqfFb9nv4Z/GHR7nTfFWiIJbiJkN5b/ACSAH3r+dD/gpL+y34v/AGXP2hvEfwt8RfZZ0gufPsL23i8v7RbyfvI5K/o0t/2hvgvdacurRfETTfJI6+fX4Q/8FyP2t/h/+0L+1ZdweAYXex0iwjso9Skj2CeSP/WVtKjOpSnCqjqws6qZ8EaPLDa6wkP+sfza+0vgfaw2Hhe2m8n56+LfCd19q8YQ/wDX1X3D8J4Zv7Dh83/nlX55n8/sQPtMjh/Od/Zxfaj+6hrp9H0GGKPzrquejuobCz87zvL/AHVcT4g+Kt588MV4/wC7rysLQqVKR9BOv7M9a1zxnoOg2fky/vP+uVcHrnxk0f55rqby0rzHxB8Rteuu/wA//oyvKPiZ4t8SRRP5W/8A7ZRV6VPBUjOeN9pS98911T43aDLL50U1Gn/FXQbsfuryNP8ApnLLXxVqnxQ8VWF5+9hn/wC2lU/+Fq+KvtHnf2k8dbQy6oed/aVWn8B952/xGs/k8qb5K2LfxlDdR/66OviTwt8ftRtdkN18/wDz1r2DwH8UIdZj8mKbzKxqYH2dM3p5p7c9vk1T7VJ50VPj1ma1k/19cfoevfaq1dUvzFb+d/q65IU6p3e0peyOqj8W+VJ50U1VrzxkfMeaWavMdY8cf2XG9cN4s+NP2CP91N8/rXdQwtUwqYulTPfpPG9n5n72ZNlQyfGTw3o1x9ku9R/8i18VfED9pvXvM/s21vHTy/8AlrFXGSftEaxdSf8AH5PP5f8Az1lr1aGVfzniYrNT9GtL/aH0Gwj/ANFmgd/+utatp8fdN1T/AFkNfnp4L+N2sazef6iSvUdD8ZaxdRpNFvjo/sul7XngL69ivZH2xB488K+JNPm8qZN//PKvmD9vHwvDf/Dt7y1mfZ5v7qofC/xBvLWTyf46ufHjVJvFHwbvPtUPzx/P/ra71hXTp+4cFevep758K6Hpf/EwSEfvP3tffP7Kfxks/hL8P7Ozl8Nx3byRfvZK+ErewmuvECQ2sP8ArJf+Wstft98W/wDgit8RNM/Zn8GfF39m7Vl1u/8A+EPsLzXfDHkbJrmV7eOSSSAj/Wf9czivXVGpOlaZ87Xh+9PmHUP2ufEkt5NNYaDaQQ/89fK/eVzGuftGeNdZ3w/bEtIf+mdcxrFhqVheXOm6po8lpeW8uy6srmLZJHJXN6pKIpP3v36f1WkYVqfs/jOkvPir4qupHh/4SWf/AL+1QsvEc0uoW3m6jP8Au7qPzZfNrmLi6hqbS5YZbxJrr7nm0Qp8nwEH3PoVhDdeC4byWHy/3UdXLO1h+x/0pnw3lm1T4d2f7n5PssflVsaPYf6O8Pk1GEv7Uzn+8pnJa5a/u3rzr4i+DbTxHp/2PXrPz0/5Zf8ATOvZtU0v79cfrml+dI/m17cKH85yzhY+S/iR8MNS8G6o80V3I9nJ/qpP+edcqYvK/wBbNX1d4g0Gzurd7O6s450k+SWOSvBPih8NZvC94+paXDJPYSf6qX/nnT9nU+AVOamclHdfu6s2c3lf9tKzZLrypfIip9vdTf8ALKuf2f700n+8NWT91/y24oi7VT+3+VH++p8cvH72tIQqfZLL8c1Pj86WTzhN8lU7eWrNvdTSz1cF/OR7A2IxDLH+6FM8395UMd15VPkuof8AnjWn1WpvAw/uD5PO+SH93T/N82fyaZb+T5nnSzUySL9750VEKf2w/eG9o919lj/enzK+5/8Agi78VJvBP7UkXhbVYEhtvEelyW0T+sn+sSvgbR7/AMq48mvWf2ePj5L8Evi34c+I000nkaRrNvNdSx/8s4/M/eV9jw77PEYevg5fbhy/M8jGVPZtT/kP6Ii0hHCdKoa/pNvr+i3ekzr8t3bSQZP+2hFcRpH7U/wB1jRbbXtO+KmhyW11ErxSpqCEEH8a5L4mf8FEv2SfhbplxqHiT4q2jSwxb47O2R3ln/3BjmvhI5LnFZ8sKE//AAFnr0czwLn7tY1JLWz8z97DTJbDMn+u+Stu40aHtDJs/wCetH2CGW3zLXm1K3s6vJAupTOV1DS4fMTyqpyaN52/yq6q40vyo6zdQsIe8NBEKZytxaiKs3UbX7VH+9rp7mKH/Uww/wCrrN1Owh8v90Pnq/4ZpTmcw+l8+d5vyVlXml/88vMrqv7Lmij86WjS/Dn9s3HkwzeQlYV69LD0vaTO2hQq4mryQOJuNGnl/wBV89U7jQBLH+9s38n/AJ6/8s69li0jwV4djS0jt0urmT/WyS966bRNT02bTf7OudEsntv+eUlrXg/29S+we3/YuJp0ueR8WftAeF/+KPe8sIJH+zy18teJLWaK45hr9Rf2iv2btM+KXw6u38FD7JqKRb4reM/u5K/O3x54D1jRpLmz1mz8u8t5dksdZY3Fe3w3PA9nh+koNqR5LqN1BFcPUNnc+bcIIqh8YedayPiGjw/F/qZpd6PJXj09dz7Lkqn0h+zv5N14fuYYYZK7+40H1hrkv2V7W8l0e50eWz+eOXf5tewfYPn/ANTX1WWn5fnf7vHTPOpdB/561518ZIobX9zF9zyq+gbvRoZZP3UPyV82fHzVPK8SXNnaw/JHL5dZ53W/dHo8Mw9piTyjVP8Aj4fP3KzZLr7/ABVy8uoZZXhl/d1lXsXkyV8zTo+0Pv5zIbiWaX/VV2fgf4aWeqaemsappsE7/wDTX564/wAqb0rufC9/4l0bT4YZYfMT/ll+6r2cu/d++fF5/XqI9I8P+EvAf/CPf2Z4o8K2Lp/1yrE8Yfs++A5bN9Y+H2pfYXji3yxyf6uqd54y1Ly/9THH+6/1XlV5d4o+LXxClvLzR7XUvIhk+T91FXtv958J8jD2vtfcGf8ACW6bFcPDFeJJ5fyebUNv4ys7+4x9s/1dcHqml6lFcedF5m+T/lpXjmqeN/G3/DQk3gPS9SSC2jijfzf/AGnUclWpSNIH17Z+KMxeT51atv4yh8vFeReE7C8+TzbyR3rvND0uaXZ5u+uUumdtp/i2GWtKz8ZebJ+631g6X4Xm81JvJre0vw5ZxR+dLN/11rSnTp1DSfsjVs/F15/yyhkrVs/F3imWRPstn8n/AE0qnp914J0sJ/aniTTYE/6a3UdPk/aM/Zp0eR/t/wAWtK/d/wDPP56uF6fwQM5+/wDAb0GqfEK6t/JivHRJP+Wdfmz/AMFENB1nwt8dNSs9U+/cWvn/ALr5K+/9H/4KCfsuWuoeToM2q65c/cittN0aR/Mr5I/4KuWviTxR4tsPidf+CZ9NhvItnmyf6z/tpSnjKnteSZvQwlW3PA+KvhlL/wAVxZzxfP5l1/y1r9FPhfazf2Bbeb/zyr85fBVrNa+OLY/9PX/LOv0p+E1rD/wi9nMJ5JP9FrwM4tc+myf2pT+Jus/YNP8AJivNjyf8s680/tTzZMSnD10/xkuhLeed53yR/wDLOvJdU8W/YJP3R3v/AMsoq86h/CPWqT/enT6pqkNrH+++/WDql/pt/F5H8dc3rmvf2Xpf9veN/EnkJ/zyjrzTxp+0joOjW7zaD4bnnST/AJa3Mvl13UMLVr/AclfG0sOdt4s0bQbq4/e+RI9cZceDdB+0P5QeOvKNU/aR1LWbx7OXw2iQ/wDXWr+h+PNZuv8ATLSZ40rqngsUqRw/XsLiD0KPwlpsMiTRV23gv/QLhPsteb+H/F01/XbeB9e8rXLaGWby/M+Suep7SnSO6hTpVPgPePB8V5dRpXW6hYXkWnv5tWfg/wCHPt+nwzfY49klei6p8PtSl0/yf3def7c9GGFqzR8i/FDVLy2uH5+SvH/EmszXW+GKaNHr6T/aQ8JWfhLR5tSv4fkk/wBV5dfJHiDxJDFI9e/hKntKXOePi6fs/cKd54Ss7qTzrrUvMq5ofgPw3FcedlP+2tYkmqalf2/n2v3I65XXPHmvaDcPDXdT9riPcPKr16VD4z6E0SLQdLt0s7CzgT/prXYeHte0G1kSz87/AFlfKPhf9oLxVFcJD9jgkSP5P9V/rK9a8D/Frw3rMcOmeKNHexmk/wCXmP8A1claQwXswhivaUj6Bs4rOKPzrXy61dQsIbr4R6xNdWcm/wArZXmPh+6vNLuP7NtZvMtv+WUle6+H7CGX4L6xF9sjf/RZH/651uv8ZhOfs6Z8T+D7nR9G8eWepX9nG9nZ6pG91Fc/88/Mr+vj4JalpmqfB3wrqGjGM2k3hyye28r7vlmCPFfyD+IdGs/tF/ZywvsuP+eVfsf/AMErP+C3Nx8JPAvhr9n39q1t/h6wtbbTtG8ZJH89pFnYguP+ekaYx5texQw1XG0eWHxo87FQc9T7R/4KMf8ABKb4dfth6FfeOfASw+HviBFGXtdTij2Q37jolwO/+/1r8UPi98Ivib8GPHV38M/i74Kn0fXdMk2XNvIf9b/00j/6Z1/S94e8R6F4u0Kz8TeGNVttQ06/tUnsr2ylEkc0b9HRx1GK8R/bv/4J+/Cf9uH4fPpXiayhsfEdjGToXiGOP95bSf3H/wCekZ9P8nCE7e5M5qdanW/d1j+dDVIqrW/nSyYim2P/AM9K9H/af/Z1+I37MPxS1T4T/E3TvJvrCTMMvm+ZHJH/AM9PMrzW3l/ef6n61vbkJr0fZ+6fod+zvaw698GtN1j/AJ6Wsddho9h5SPXGfsdywan8C9KhI8z/AEWvRdKsJvMfH3K4aD9nVMNqXOc3rFrN5bzVyusWE3mfuq9F1Sw+/muV1jS54ZK+gp+yqHDUPPdY0vzd8Eo2PXnvjzQcaXeQ/wDPS1k82vXdYtfKk/dQmuJ8aaN5ul3MMUPz+V/y1ratpSOZbnx/efurx/329PNpkd15UlWfEkvm6pN+52PHL+9rKllPmfuq8uc/3p6Ep+zLkd1mTzoqmjuvNqhH/rP3vSrNtW/8QXtPsGlHLN5f/LOpo5fJi82U1mxy+V1m+Sn/AG+z+2fvauECfaezNizuvK/cmr9v50v+tnrB+3Q+Z/yzq/p+sxVpTb9nyGft+SqaskMP/XR6Hk/5Y+TVa3v/ADbj90Kf5s0W/wDc1c4VaZHtB/m+VL+9q/b3Rhl/e/crHjl8399LV/T8Sy/6VN8lell86tOt7hyVPZHW+HPG+vWGnppthqT7I/8AVf8ATOrlxda9f6h/aV1M8jx/J5v/ADzr7L/4JE/8E3fgj+0baeJfil8YdV1S/n0y/S1sNFSby7eON4/M8z/pp/rK/RPRP+Ce37Inh2xWztfgzpUiAbc3Ikk/m9fX4rinLsubw2PrVpTW8YaL7+Y86nhMdUq89OjA777L5sf72mXlh5cf7qtKKwhtY3n+5+9/1VQ3EX7vzhDX42tz6UxLi1EP/H1DVC8ihl3/ALnzP+mlb1xL5v76Wqd5bfu/OiFXX/ngOEznpPJhj8mKGOsfULX7VcedLDsrpL2186P91WVexS/8tRHJUchZz15FNL/qq8x8WfGmbS/Fb6BoV49rDb/u5f8ArpXrslr+887+Cvhv4ueLZ/DnxY1WH/lt9qk/5a152OnSdLkPf4dof7dc+jfD/iOaW486KfzHk/5a16V4R1C8uY0nu7x9n/PKvmr4L/EWe/t4ftV4n7z/AJZV7lpHjGyjj/d3kaJ/01r4qta/un3kV7fSR7f4Y1iFIsQ/eNfL/wC3z8F7I3X/AAtPQbR4HfjUPK/5af8ATSvXfDfjWHHm2pT/ALaU7x/fad4s8O3mhX8uYbu22VlQr1YUuQ8+hgauGx/PA/Lq4+EHjzx540/4Rvwxo73dzcS/uv8AnnHH/wA9JP8AnnX0X+z/AP8ABKrQtW8AXfi/46/EqewvTJstrbSJo/LiH/XST/WUkvifQPgvJqWm6Dskmkuv9KvZf9ZJXceI/wBoRdK8O6X4dtLvZEYt80ctUq+Nn8KPqsfhJSpU4U6lpjfhv8Apvhzr82nWt5JqP7ry/tPlbPMjrsNR8JalFJ5P2OeNP+uVY0Xxdsr3T4tShvOp58qtuw+MWu/ZM+ek0Mn/AD0rqo5pjsJ9g8TMeE6ePqc8ZlHUNGmsNHubyKzj3xxfuo6+LfjJYa9J4kvJrqGTf5v/ADyr7J8W/EaHWR5M0Gx/+escteUePNG03xRceddQo83/ACyl8quKvmuJxD989PKsgwuWUuT7Z8c3kU3m/vYZN9U5MeZ5Mte0/Ef4QQxf6ZYeZ/01rzS88OTWGoeTdQfPW2Eqe0N8dQtS9wPBdr/bPiSz00w7PMl/55V9D3ng3Tbq3TzbPY//AEzryj4J6KZfiRpsMv7v97X0tqGi+VG/m19HlsP5z8yz+f7w8W8SeCLOK3fyvkSvIvFHhLytcebyfkr6i8QaMJbN8iOvHPFGg/8AE8eGX7lejW9ojxIHkXiHRvKk8mWz+Svjb4kePIfhp+15fz2Hg+61LzLXyIrK2/1nmV+gXiDRoYv3P+rr4b+IlrNL+3xeWfkx/u7WN/3v/LOtMLtM1h/E989Q8L/Fr4w3UcMPhf4DyRv/AM9dWv8Ay66s+I/2qLryfKh8OQeZLs8u2/eeXXVeE9G823SGI+ZXVXGjfZZLOY/8tLrZWEKns37kBHJWfwl+NmvXCTa98ftSgT7/AJem2Ecdatn+yX/akn/FW/FTxjqPmf8ALP7fsj/8h167oeg/vEFdz4b0GG1k87+OtPrRX7w8c8P/ALFHwTl2f2z4Vnvv4JftN/I//tSvUfB/7KHwT0GJLPRvhXo0cMf/AD1sI3kr0LRNB+5NXZ+H/DkMUf8AfrOf1mp8cyjyj46X/hX9nP4L3Pirwv4bsbSaOXyLXy7WOOviH4ofHOH46eD7nTdf0f8AffvP9ZL5nmV97ft4fD7+1P2X9YmNn5n9nyxz1+d3wz+H03iiO5mtf3aW/wDz1r5bMXTp4rngfo/DtClVyOZ8oyaDDpfjSEfvE8u6r9Dvgvpc0vge2mlhk/49Y/3slfJHxw+FU3hzx5DMIU+zSXUaebF/z0r7V+GcUOl/Duw02ab/AJdY6WNqe0UOQ4sLQ+r1eQ8o+KlhNLcTTV5Rqnhya63+VD5j/wDLKvo3xZ4c+1SP5uyTzK56z8G6bFcedLZ1w06/2D0alM+RfGnwq1i/vH1jxH+/Tzf9VVP4keCPCvinwH/Y+l+GkjvLf57Wvp/xh4S026jeGKz/AO/leaa54Dhl38xx/wDXKvfwmY+yR5uIy76wfFsnwq8Sf2p5P9gyJ/01rto/CX9l6Emj2s0kj/8ALWSvadU8BTRb6wdQ8Jeaa7vr31s8uGXUsOzz3wf4D1611CG8sLyPZ/y1ir1Tw/4SmutYtvsH35Jf9VTPC/gy8u7hIYoa9v8AhP8ADSGwvYdSv4P+uVedjp0j2MDQqnvfwf8AC82l6BZwyw/6uKvUY7DzY0m8muV8B/2b/ZSQ+d89dVZ3/wDyx/grx6H7xn1VOn7OkeD/ALanw51LWfhneTWEPmfvY/3UVfnj4s+H00sj/vtlfrX8UNLs9Z8LzWdfHPxY/Z4huvOvNK+/5v8Aq4q+mwnsqdI+Vx1D2lU+S/C9hqWg3jzy/c+55dU/Hnw+m16T+0bCzj3yf8sq9U1D4fzWGqf2bfw+XV+38EQy/uf9XW9Ov7M8qpl1Kp8Z4b4E+Dc1rrCalr0PyR/8u0f/AC0r13wl8FofFGseddQp5P8AyyijrsNH+HNn/rpYfMSvTvhv4cs7CTybWyf/AK6VvPF+0pGdPLqdMxNL+FV5penwwyw+Z+6/deXXtPgPwleWvwz1LTfJ8yaSwk82rnh/QYvsaGWGu/8ACelw2lu8MsP+sikSX91WNH+4Y16HtD86NQ8OQ3/iS5hl/wCfqvXZLXRrDw3Z2cVnHsktf3sdcx8SPCWpaN48vP8AQ/ItpL+Tyv8Av5XSaxFNFbww3U2/91XdgKlVY73JnTnGBpYfLITge1fsjf8ABSP9p/8AYx0Gbwd8LPiPJP4b84SWvhvVo47qC33nL+X5n+rr0vxz/wAF4P25/FWkSWmk/ELT9Hz/AMtNO0iAv/32Y+K+Lrv/AFVZ0kXmyeTX2P8AaLbvOnC/+A+IudB8T/iz8R/jF4rufGvxJ8d6r4i1S8/1l7q1/wCe4rIs7X/lvJ+8SvoH/gml/wAE8dH/AOChnxQ1/wAGar+0bpfhMeGobef/AIR+K2E+p6hbyf6y4jQkDy0/dj/trX6SeHv+Dc39lPTNNli1P4o+Lb25ljwLlGjg2f8AABmrpU8vT5sTW5H/AIJBOpUqVD5Z/wCCe8s1/wDASz83/lnLJ/y1r1rS7XypHh+f/W12Pg7/AIJzeNP2IvDtz4cl8RnxD4ckvgdM1RIwksWf+WckYrJjtYbXWJofIr5/kpLHThD3y5wMTWLXyi/lVzGsjzf+WKV6LrFh5sf+pFcfrFgYpK9mh7I4pw9mee65Yzm48mIVzHiDR4fLfzYZJPMr0XWLX/pjXPapa4k/1O+t60F9WORezPgn4gQ/YPFF/DKP+XqSuYku4f8Al1P/AH8rsPjhYTaX8QNVs5fk/wBKk8quA1SLXorb7Z4c+yvNH/yyua55WpnVOehcklmlkqz++lj8mKsezv8AWLrS0/tSGOO5/wCWvly/u6hjl1KTrrE6f9Mq39mvjMfbc/wG9H+6/wBbNRby2cX76W8Ssq3iml/c3V3I/wD11p8lhpn+u8nzHrGE/sGXJVgbf2/Rov8AW3lX7O602Ufuq5jytN8vNpDV/S/3UnkkbK6qcKVMjr752fhu1s7+8T7XebK63xP4Yh8L28M0U3nw3EW/za8ut5dStbhJsSbPN/5ZV6j/AGp9v8Jw+aPn/wCWUVb86+OZhz1fackDm5Iof9d5Hz1Z0uX/AExJvOqtc0/T5YfM/e/fjrTLZ2xSnAipN/BM/Uj/AIIM/ESCLx74r8ATXZ8y+02K6hjf+PZxn9a/ULBG7Jr8Rf8Agkh8YoPAP7VfhRLv7LHbarJJp0skkv8Aq/M/1dft2CCNw71r4hUFHOoYhL+JCD/Q68on/s8oFPyoZA/m/J/1ypklr5VvViKMHgU2SL/nrXxEF7M7Zz9pTMq4tZv+eMdULi1h8vyv463p48jNZt5bQzDzj/8Au6j+J8ZpQ9mYmoWEMUf73y99crqms6PpcvnXWpRolZv7TnxLh+GvheGztZvMv9Ql/wBV/wA8468Qs/ihqXiK8SH+COvKzKv9XpckD6rJ8qw2L9+se5X/AIt0i/ieHQtHjf8A6aSHZX51/wDBQj4aePPh94pvPippemvd6VcfvLqKKL95b19seE7+aWNJq0vEmjeG/GWhzeG/EdnHd21xF5f2aSvmf7RqQfvn0ywmGw1T9zA/Nn9mf9ofR9Zt4ZtG1hN9v/yyk/1kdfW/hLxvZ6pbw3ksyPXy1+1h/wAE59e+CHjOb45fsyXiSW1x5j6poEkWyP8A7Z1m/CP9pH+1NDhmuvMtbyP5Lqyuf9ZHJWeKhhqvv4Y9Kgvae8fdtl4zs7SPzrWbYn/TSs3xz8c7PQdKm/4nGybypK+YLz45/b7N/N16Tf8A88oq4bxx8aby6t/KtfIg8v8A5a1y+zZ6SgqdMx/jR8X7zVfEs01rqUn/AB9Vck+L81/FbTX83meXF/y1lrw3xB43/t68mvJZo5H83/lnUNvr2pRSJXo4H93V5Jm0/wB58B9XeB/jJNayJZ2t7+5uJf8AVS19V/C/+x7rwnDeX2zybiLf5ctfmt4P8R6lLqEMA/dp5v8Ara+mfBfxkm1WSGz+2SRw28WyLy63x1Fey9w5faVVVPo/UPgnd67G+peBNeR/+nK5ryDxpquveDrh4vFGjzWU3m7P9Jir2b4P/EqC3sklmmeT/ppJXoOq674Q8a6c+j+LdJstQtJItksVxF5gr5aaqU6vvnRHF16dX3Fc+FvFnjyW/wB8Ms+/zK4DXL+C/uX87/v7X0l+0d+xnpGl6G/jv4Mef9nt/wDj/wBFkl3/ALv/AJ6R1823mjTWsnnSwyJ/0yr18L7Kp8AsVX9pSOk+AcVn/wALQs7P7Z+++/5f/LSvqW80uaaOvmz9muL7V8X7CGLy9/lSf8sq+sdQtp5Y6+jwMz8yz/2f1o898QaN5UbmvGdX0aaXXJppf+etfQmuWP7v91XjmuaX/wAVJNN5P/LWuuv+8PGofxTg9b0HzH8mX/yLXwH4otZtU/4KAalDdQ7/APRY082X/pnX6O+LLC88vyfJ8yvz6t9L+3/8FCPEPm73SOL97Rh/4UzSH7yqfUvgfRofsyD/ANF10lxpcMWoWcMsPySS7KZ4P0uH7MldP/ZcP9s6b5s3z/av3Uf/AE0op+yIqHYaNoUMWyGKut0LQfuYhqHR7D/n6hffXZ6Ho33KitCmZwftCbwvo3/LGWGu88PaD53/ACwqn4b0Dyf+WFei+D9Lh/1MsNKZpCFI574qfC+H4jfAPxV4Pls973mjXD2v/XSOOvyR8NibwR4T1KzxJa3/ANqkSX91X7qeHNG03zEhz8knyS1+Q/8AwUB+DGr/AAT+NXibw6LPZGbqS6tPL/1ckcn+rrwcxhTqH33B+LVTnwx8kx+HLzxv8TLPTdUmndLi6/5619UaHaw6Xp8Om/PGlvFsrxz4D2Gj/wDCYTeKpYY5Lm3i8uLzf+WdexyahDL++rgqHuYqn7PElm4sPNjxWVcWEP2f97DU0mqf9Nqp6jfwf89ua4Z+0hVHye0OP8WRQ2sj+XXAaxLDFv8AJh+evRdc/wBKl/v1zeqeHIbqT/U11UJ+zD2HOeXa5LN5nkxQ1Dofgi9164QeT5cP/XKvUbf4fWfmedLs31qx6DDax/6nZWs8dTXwGE8PSmc94f8ABumWEifZYa7zw/YfJWVbxeVJiWD5K6TQ7Wa6k/dQ/JWE6lOoejTpqmjpPC8s1h/ra7zSJYZY/Orj9HtTa/63fXSafLCI/wB1VUPaTqG9CftPjLPizyZdPfyZq8Z8SRzRXD4r2+TRvt9nXmnjy1s9GuX/AHMjvX0+E9l7I8DMfcq+4eP+PPAej6/Zv5v7i5j/ANVJHXkuoeDNS0u484xPX0DcX9nLHmsrVLWzl/1UMcnmVE/3ZyQofujyvQ4ryLZ5tei+C/K8tP3NVtQ8L2YtvOih+ermjSw2uyGIfPXPCuHs/ZnpfhvyfLTza7DT7qGKN/svzvXlel+JPJjSun0fXpvLeaKb5/Kr1cLUscOK/kPJfiR4cs9e1l5oofnj1SR5a4DxZLD/AGg8Pz/u/kir1qztJvs+pSy2cm/zZH82vJfEnnXWqP5sP/fuu/A/vKvPA83Pqns8LCiYlxF+7/130rHu7XypPOM7pXQ3EXlSfuqzbz18mvbnCp7Q+KKXhLxh40+G/wAQtL+Mfwj8XXXh3xfoF152j61Zffjk/wCecn/PWP8A6Z1+6f8AwS7/AOCy/wAPv2x9LsPhR8aoLbwv8TY7cRyWglAtNWfp5kD8bHfr5R59PSvwbvLryam0+TMiXkU08F5b/PYXtlLskt5P+eleyq2BxWGWGxe62ma8n2z+pr49Wdlf/C/Ulvpo0RId5MnTivgC8tYf+EocxQ7/AN7/AMsq8m/4J2/8FCf2n/2gPhVP8F/jR48TXF0CSOOPVpLJPtVxH5f7vzH6SfWvZbzyf+Eg8nya+bq0HhMbyc5tz+0w3IQ6pa+VF5OK5jVLXyt8MsPySV215FDFH/qa5jXLXzd/HyV61ChUpnne0+wcHqlh/OsG8sJhJ+6+/XW6pazfaOlYmsW00v76L5PLrv5KfsjCc+T3D4J/atsIbX4sar5W/wD1v+ql/wCWdeVxxZ/56V7x+2paiw+Llz/y0S4ijk/1VeG+VNLvwa5JnVT1RWktf3n+ukqb+y4fLovIvspQZ/1lPji/4HRyfyCtYhk0uaIYqa3sIftH72r9va/u/P8AO3vRJF+8rOc2c/sXUIbewhFwf9XV+ztYfP8A9T8lULPS5v7Q/wBdW9bxQ+Z5MtbU/afGKZc0uW0i4lhjq5HdTXUnk+d5lU7e1h8z91WlZ6fMJPOro/iLnMBn76WT979ypo5oYv31WfK/dJ5sNEdrDFJWlOv7IJnSeB/FGveF9QsPEnhK8ktdS0u/jurC5i/5ZyRyeZX27Y/8Flf2rbh0sdOvrCZpTsiElhHvzXxL4PtbPz0837lfsT/wSs/ZW/ZxtP2XPD3jU/DvStU8QXkk8mr6rqNr58huPMOf9Z9zgJxX2uHzbL8DlixWbYb6xDaG36nn1qFXF1OShU5Jn2RFER9w1IYwvUUrKFFNmMmMivx+92fS8nJTGTQK4yay9QjENu+bTeifPL5daRkkKYcc965T4xeLrLwR8ONV8UXV5s8q0kSKPOzzJKxn/cCn79Q+HP22PjJqWvePPOiMkCWf7iKL/nnXl3g/4vwxSf8AH589cH8bPHmpa/rFz5p2PJLvlrzePxbNFcebaTV89m/tKlXkPvMt/d0oQPtLw38boYv+Xz9zJ/01rudH+LNnqkieVDa+d5Wz97/yzr4S0f4tXmmRv++rpNP+P15axw/8TL/WV8zUoVYH0VOopn1j448W2cVvMZfnTyq/Pf8Aaw+x+A/iQnirwvpvkW1589/HH/q69yk+O/8Aaln5N1M//odeIftOXWm+PNHeyi/5ZxSebV5ev3pvP+eBx+n+N5r+TzvP+SmeIPEf7vEXzv8A8tY68i+G/i28tbybwfqk0n2mz/1Usn/POuq1DWoZY8+d89et7D2dUxqYj937hxmoeIp/CXiCaaWaTyZJd/8A1zrudHv4bq3TUopo5Eki3+bXE+JPAU3i3fNLqXkJHWD4O8ZTeCNQfQbr9/Yeb+6lredCr8YUMc/ach7xoevfZf8Anm6V6j8M/Efm3EOIZK8N8P38OqWaTRTfJJXW+GvFE+jSJN9sk/65Vyz/AHlM6q8/aH2f8PviDZx2aQ16X4f+JdnF/rbxN8f/AE1r4w8N/FGaK3SYzVt2/wAULyWPybWauSvhTlp1/Z1T7M/4Wh/aG+zOpbE/55+bXgPx10uz/wCEge8tdN/c3Hz+bXmmo/FDUtBjSGwm/fXFeheD/G83i3S4YdUmj877lRhaHs/fO2df2hq/sj+F5r/4ueda2f8Aq7X97X1FqFhNFH5Pk15F+yvoNnafEC/mhm8t5LXZ+7r3XVNLm8uvpsDCp7I/Os/n/txwfiC182zfNeJ6pa+d4gm/1n+t/wCWtfQmuaX/AKO+a8W1Cwh/t+bMzv8Ava0rz5KfJM8mn/FOS8SWv2v9yIfnr86/A9r/AGp/wUE8W/3I/ki/6Z1+lniC18qT/U/7dfmz8A7Ce6/bo8fzS/cjupEiqsuekzdQ+M+0vBdh5saeVDXQ3Gl+V4h0eaWzkk/0qofBdrizQRV1XlTS+INH/c/6utIWpnJ+7O50Ox80JNLDsrs9DtYfMSsfw/Yebs4rtvD+lw+ZXLOeprTpm94bsIfMSu/8L6XD/wAsq5vw/YccV3/h+w/5a1vOFOoZwOk0O1/d/uq+Nv8Agsh8G/sdpofx6i06SSzij/s/WfLi7H/VySV9saX5OE8ql8feAfC/xV8Bah8OfGNqk9hqdqYJx61y1MLSqLkO3LsbVwGKVaB+EPjT4QTeCNQsPGHgjzJ0uPnltq2PtX+h/vYtj/8APKuv/bu+Anxk/Yq8dvpGp2j3fhi8/wCQPrcUX7sR/wDPOvL/AAXr02vaE93dffr5yvgatBn6NWzKljaVOcC/9rMX+umqhcXX7z/Xb/MovP8AWyVm+b5UnNYU6Hs/jNYP+QuRxD/ntT/Kh8zpVOO//eVN9rm9RS/vlqoWPNh/54is7WL+GLimapqn/AK5XxBr37vmo9n7SmdSNjT7+81nUEs4jXqng/wveWtv500NeS/AO6i1TxRc3l/s8m3/AOmtfQmn+KNH+x+TFR7P2ZpTh7QrXMXlR1DHr32Wn674o0yK3/dTfPXGax4j/eP/AKuNK3p1vsF06fsz1Hw/44+/D8n7ysr4geF7PxH/AMeA/fSRfuq8xt/G/wBgvIf33+slr0XR/GVn9nSa6/7+17mCPHxsL1jwHXLrU9G1250fWYdk1vLs/e0+w1T93xNXYftIapoPijyfEelwx/bI/klkj/5aV5vo8s3/AD2qK9T96ChodPJLDdW//POsqSLypP8AXVcjtZpY/wB1TLiKby/3VXCmcNev/IMs7qauw8H/AOlSeTLNsrjNPiHmfvpfLrrfC4hit386avRoU/ae4ePUqFn4kWEPhzw2/wDcuK8H1T97eP5Vdt8VPGV5qsiWcV5JJDb/APLKuGuBNL++xXtYXC/VKfuHz+aYr6xUKximl/c/wVlapa+lbEf/AF2rN1C1+1b69Gn+8PKmcf4glMcieV+8pmnS/wDPWn+IIjFJVOz8mWTyYj89bc6+AIH2Z/wSD1SH/hPPE+m/P/pEUb/va+9tQtR/aCTef89fnj/wSvl/s/46Xhi8v95YbJf+mlfopqkv+mJ+5rzq3+8o5KdR+0mWXtcW/wC9rm9Ytf3j120kX+j/AOuSue1Sw+/NXv04fuji9ocHrFtNFx5NYOoWv7xMw/JXbaxYQ+X50Xl1zd5a+bvrrpr90Z1P5z4k/b00v/i4lteeSkaSWtfP0n72PyYq+ov+CimjfYNQ0HX/ACf+PiLy/Nr5p8ryo/8AU1wzh+75D0aFT90ZWoSw+WkMv36fpZh8zH7z/rnVbVIrz7T50VTWcc3meddVnPSkH8Sqash8r/Yf/nlVaOX94/m0XF1D8nk/co/d1HtqnsvfCf7smt5f9I8mKti3imMaeVs2Vj6eIZZK245YYrf91UXcAh7KoXLeWaL/AFsNX7e7m/541jx3XpNWrYSw/wDLL79dVOvT+A5a9P2fvl/7L5siVZt4v+WPpUP76KNPNi+eT/nrVyOWGP8A1p8x5K7v3VT7Bgbfg/yrXUIZpNmz/prX6/8A/BGfxla6j8BdT8GLeRu+mas0sUcUmcRyc1+OOn38MUn76vf/ANkz9pj4ufs7eJpte+C4ee+1e1j0yLSUtvO+1yPJ+7SNP+elfV4LB/25kk8og7TlZwvtp/wDz61RYPFQrH7wUUUV+Rn1hE8akfWvl3/gpH8T/wDhG/B8Pg+1vI0eSLz5YpP+WlfUNzKI1J9q/O//AIKJfEGfWPitfWV/FGltZQ+XGfN61X7xLmRpgYUqmJ5D4u+IniPR4ria8utS/wC/teV658QdBsLjzv7SjdP+mVdt8RJfDd1cTTXRgkrzHUNP8N/aH8qzjkT/AJ5V81iJ89Tn+2fY4eFKn7kCGT4ywxXj/wBjaPd3af8ATX93XSeE/GX9s/vrqHyH/wCeUlclJYWfmZtYURKfbXX2X/VV4/709xez+E7z/hKL2KR4fPeP/rnUOseI/N0t/wB9vrnrfVIZf9aKZqEvm2eYjXbQoUy/aVYe4eXfFj4c695j+PNB1PZNb/vIooqv+Fr/AP4SjQ4dS/j/AOWtdI8s1/vs5TvT7lYNnp8PhzXHhi/dwyV6M7eyOWhQq1KpsWd1DLbvD9jrm/GPgj+2bZ5rWH5/+mddto9hDL++/wBYklXI9G839zbWf+spwxVKpS5DthhaaqHi3h/xbr3wu1BLPVBJJZyS/wDPX/V16po/iiHVNl5azVm/ET4XQ2tn/afiODyEkl2RW0v+skqbXPhp4q+F/h/TdSsNN8yzuIv3sf8Ay0jrhr+yp/ARBVah2GnazeRW/wDrq1dP8UTRXCTedXE6fdaxdW6TS/JVyzupvM8n+OsJ+zqHJU9rh6p6jb6z/bKIfOrtvBeqTWE6TSzf6v8A5Z1454f1T7L/AMtq6rT/ABHL8kP2yr9jSp0iKdf96fbf7FeqT6940v7z93IkdrX0nqlrNEf9Kh+evlf/AIJr69pv/CUarZ3Xmfabi1j8qWvrq8tfNj616WXTq+yPmc3/AN6OG8U2v+jv5VeIfZfsutzTH/nrX0Jr8UNrbvP53yeVXht5FD/aM3/XWjFe16nm0/4vuHN+KP8ARbOa8iD744pHr80/2S/Ol/bQ+It59jT95fyf6z/rpX6ceJYvKt3mkh3/ALr/AFdfmn+xfaz6p+1L8RdYutmz+2ZPK/7+V14GhTqYacwnU+M+6vB9r5uzza63S4pj4s02EfvEk8ysrwla/u0ii/5ZxV0mhxf8VxpsPk/6uKSuT/l5yGED0jR7X7n7mu28N2v7z/U1g6FF5uw4rrdIim/5aw1pD+KanT6HawnZXYaP/q0/5ZpXK6P+95irrdHu4fs/76GrnD2hnM6TT8eX+6rVguhayfuqwdPl/d/89KsXWtaRpOmz+IPEWrQ6fYW/7yW9vZfLSOo5L7GYnxV+Fvw5+Nvgi58C/FLwta6rpV5FsmhuYt4NfkT+1l+xBrv7F/xXvNC0ASXXhLWP32jXP/PtH/zzr6H/AG3P+Dir9kb9l+3ufCvwhi/4TjXrcyJ+6/d2kcn/AF0r8u9G/wCCsX7RP7fH7R72/wAaNdj/ALPEUj6XpFt+7jt6zxeBxP1bnme3lVSrTq/3D0y8lMdw/pWbeTfvOtTaxfzRyPWV/anm18rOZ9rTqF+38mpo/O8qjT4oZY6v/Yf3VYT/AHh1UzmNYlmrmNUtZrqR/NrttUsPnrKuLWz/AOWtXTnVO7k/dHB3F/r3hfzrzS/uSf8ALKubvP2h/G2g3n72ben/AKLrv/FFrFFZvxXkXiTRtN1C4f8Agr1aFOnU+M4p4v2fuHoXg/8AaVs/Emn/APH5Jvjl/exy10MnxVhlt68BS1s9Lk861q5/wlE2z/XUew/e+5Az+t+z+2er6p8VYrSP91eb/wDplWD4h+P3jC/2aP4ch+eT/tp5deb6pr03+u86uh+GeqQy3n73y4/+etethcL7Ol755U8d+9O28N3+vX9n/wATmZ53/wCeldJo8X7z/XVDp91pstukP7utXT7CHzEmzXm1P4p1wr0qh0mhy/uqv3ml/wCj96h0OLMdavlf6Pjmu7CeyqHm4r92cxJ5MUn72Gn6prUPhvwvc6xLNHHDHF/raZql1CLh4f4K80/a08UXvhf4NzTWuxPtEtezhIfvTxq9T90A1SHWY3vIrxJP+uVMjMMsdfLXww/aM1Lw5rB82fz7aSX97FX0z4H8UaB8QtP+2eHJvn/5a23m19F7Opb3D5mcyzJFDF1qnfxfu/3UNatxYTdoarXlr+7/ANT+tYzh7MLo4DWLXzZH82qGn2H7z91W94oi/wBI/wBT5dUNLtT5nneTSlC4Q9lUPoH/AIJtyw2H7SkMMs3lvJYfva/TK4tfKnh82vy7/Yflh0v9pTQZopvLe48xP9b/AKyv1N1CKaXyZvJ/7ZVGK/d1YGEIWqG9HFDdfuYvuVj6xawxb4a6GzsP9HzF9+s3WLDzd/mw/PXv4SH7r3DyqkzgNUxFJWPeWv7yut1S1hi3iaGsLULX95/sV106dSo7TOGdc+UP+CjGl/8AFL6JqWNiebIn72vkX7BD5fev3B+EX7Af7P8A+1t8INc0n426DNfTyXfl6bqVtfyJcaf+7/1kf/LPzPfy6/Or9vf/AIJa/E79h7Wf7UsUl13wdcSbLLXUi5U+kkY/1clRUoYWdaeHjP34fj6Hs4KdT2XwHx3qFrN5nFEf+r/e9a3tY0byo8eT5lY95YXnyGXy9leH7OrN++dXs6cKnOVnl+y/8esO+mSX83+pis97/f8A3VX/ALLN9n/gos7C9v5PscUO9JKSmiOQx7fWYZf31r89TW/iiHzPOrV/4Rez0u3/ALNtLPYlUJPC80tx50UKR10fuTn5Kg+PxvD/AMsofnqaPx5N5if6+mR+Ev3nnef5dWdH8Lw3U7+befPWdD2ftOSYVvaU6RpW+s3l1smlm8uuz0e1/wBD86WbzHrBtvC5ij8mHzJK6HS/9At0hlr2ac6VPDHFP2pq6fYfao/9Sm+vo39g7U7Pwf8AtI+DNd1Wzg/0TW0f9K+ddHih/wCWUPz16F8NNZ13w5ra6jo928F5H89tcmL/AFckf+rr6Dh2WGrYp0qrtCaOTMP4anA/oXBB6GmlcHOOKjhJA4qUHIzivyux9NGVyvPBhc1+Xv7bElnqnxJ1j7VsRPtUlfqFO/mAAivy0/4KEX/9hfHTxJZSxbP3u+KOKpm+SnzHTl3svrZ8eeONBs/Mf/lonm1xl54chtP30Xn/APXKWuh8W+LdX+0PDa6PJv8A+eklcBruqfELVLjyYtM8jy/+WstfOVPaVD7On7I0r2Wztd/m1g3niOztZP3c0f7yqd54X16/t/8Aic6lPJ5n/POWtXS/h7D8k0vmb64rfV/jPVpw5ytYS3mqDzot9bdnFeWsifapvkq5Haw6XGkP/POmSS+bJ+6ooT9oXP8Ad1OcrSRWX2zzrX93WV4k0GbVP9VeRx/9dZauXkM11J/HsrK1TzvtCQxTVpD2sDoWLLPguLXrCP8A4/PPeP8A5aVvXGqfEKWOb7BeRwfwfu4v3lM8J2s32fziErp9Ptf+W3+rrh9p+9OqcKlT35mP4H8CaldaxD4k8W69PqVz/wAsvM+fy69F8UafDrPh+aztd7vHF+682q2nxD7Gl5Kfkqt/wsbTfDlw93qc3lw2/wA9edicV7SqaYWHPSPMbe6hivHs5fM3x1fi/wCmX6VyusfFrw3r3i25vLWyjgtpJf3XlV2Gj+TqmyaK8j2Sf8ta9OhP2dQ83HL2hNp9r5UnNdPo9hN5STTfcrKjsPK2fvvMrpPD8c3yQy10f8vOc8Pk9metfs5+N5/hp4ws/ElhDJ+7l/e1+kHgvxbo/wARvCdt4q0b7kkX72P/AJ51+X3hOX7LeJ5Xavpz9l/45zeDdYh0fVf+PO4+SL97/q63oV6tCqZ47CfW6XOfS3jCL/iVzf8AXKvE5LWGHUHmihr3Lxb+90J5opv9ZFv/AHVeLR3QlvHh8mu7Et1KZ8tR/jHK+MJYf7Lv5pfuR2Ej+X/2zr8zf+CecU2s/HD4haxL9z+3pP3f/PP95X6cfFCKG18LaleRF/8AjwuP/Rdfmh/wTD0ua68YeObzPzyeI7h5f+mf7yurAz9nhZgofGfoX4SsPKt0mrpPC9hD/wAJpbTS/wDPKsfwnazfZ0zXQ+H4vK+IFnNdQ+Z5drJ5Vcs/cCmel6HFNLcV1ul/uuBXN2f73Z5Rres5YYuJqP8AlyL/AJeHVaXL+7xXSeHvOuu8ccMfzyyy/wDLOvMfiJ8ZPhv8AvAc3xI+L/i+10bR7f8A5ayy/vLj/pnHHX5Ef8FJP+C/Pjz4tR6l8Mf2ff8AiR+G/wB5BLLF/wAfF5XdhcLVxXwETmfpN+3J/wAFn/2Y/wBhnR7/AEeLUoPFXi2OKRLXSLG6/dxyf9NK/EP9uj/gtH+1p+2Pqk0Pif4hT6VoMn+q8P6bL5dvHH/00r5F8afEvXvEeqPrGs6xPd3knzyyyy/8tK4PVPFsxkfzZv8AtrXdDC08J8Hxi5+T4DofGHjya6k86WbfW9+yf8S4fC/x00TUr+adPMutnmRV5FeX81//AK3Zv/56Vf8ABdzeaXrltqUX37e6jes8R7WvR986MJU9nV98/ZLUbr7VZpeeT5aSReZWJF9+qHwb8ZWfi34Z6PqXnb/Mtdkvm1tyWsHmfuq+BdP2dU+7w/7ykaujy1vRyw/Z8n5KwdLl8r9z/OrOqX5is3/fbKxPVofuznvGPjLyj5Nr5aJHXB6p43vIv9VBR40vx9of995lcxJrNn5n72u2hQ/nOWvXqzqGxeX+vazZvDYTfPXN/wDCvtYurj/Spq3rPx54V0Gz/wBPvUgrH1z9oLwrFcJFpc0cjyf89K256tP3CIUfaGV4k8Jf2XZv5Pz1w2ofuriuh8Q/F/8AtSR/Nmjrj9Q8W6bLcfvfL3130PafHMVfCnVeF/CU3iiXyYvneuw0/wCEusaBb/bIof8AWV574X8eTaNIhtbzy67/AEf9qDTLWRLPxH5bp/0zrac8TD4Dl+pezL/2XxJpcb+aPLrV0P4g3lrGkN/+8rKvPjB4P16P/QNSgrBj1mzv7z/RZo5PM/55VE6HtDD+GfQ/gbWYdZ0tLyKatXUL/wAq3evMfg3rN7YedDLefuZP+WVdnrGp+b/y2rTCw9nV9w5a9QzbybzZPOlr54/4KMeKf7L+G+j6OZk/0iWR/L82vfpbqGviH/gpB48E3jWHw1YRb4Y4v9b/AKzy69WnCrOr7h5GIPB9L8W+Vefupq9j+DXxp1LwlqH9saDv+0/88vNr5mjuoba486uq8N699lkQedXt0K9X2h89U/eH7u/8E6f2c/2cP+CrPwY1Cb4a/Fy48H/FbwzF5eveF9QtY5ILw/8ALO8T/lp5f/PTZ5n7yvLP2of2Nvjr+yB8RW+HXxc0KAx3MXn6Xrdlc74LyOvz2/ZX/aC8bfAz4maV8VPhX4wvvDniDT5f3WpabdbJJI/+edfpX+yr8UfhD+3h8b7Ob9uP9prxvZaVcWIjtfs93v8A9I/55ySSeZ5cf/bOva5PbU+WL51/g98z5KcD5z8QeF5pZH/fVlR6NNDJ/qa/cLxH/wAEKP2K/GfghR8OfFHiGynmj32OsRatHdK47Z/d4kSvgf8Aap/4JL/tPfssJNrlx4X/AOEm8ORyn/ifaL85jjBwnmR/8s651gsJiVfD1rT/AJH7gUFV+2fO/wCzXFNYfHTwxeRfJNHf1+qdv/yD4fMmr8r/AIb2n2D4oaJeSw7/ALPqkfm/9M6/U3T/APkX7abP/LLfXkYum6bh7QPY/vDvND8mXS0mxUOqWs3/ACy+5VnwX5Muj/uof+utWdY/1bjya+lwP8E8ep+7qnB6pYfvPJ+SsG9tYfM/e12GoWtnh5hWVcWBlj804r0aZwz9kR+D/wBrzxJ+yHa6j4qHhg+IdCuo41udJiuvInt5P+eiP+8yKyPH/wC1l+1V/wAFQvCmtfAr9n79l3RrXQo5Yf7d1vxJrO/7PnlPLH7v95xXGftKaV5vwr1KGKby3+/Xz/8Asf8A7X/xB/Y3+K0njTw7NPdaPeiODXtEkl/d3Ef/AD0/66R/89K7Mu+oY+pUtRh9a+xzudn8rpfedmHq1cJT5o/AWP2nf+CSv7VPwV8JHxnrngW01LTx/wAfT+HJDdfZB6vGeo96+VLjwRNaxpDLZ+Wkf/TKv6O/gD+0V8JP2n/h1B4s8C65a3ttdw7L2wcjzIJP445EPevzs/4Km/sPfCnRPiBZeNPgC0IutWmkGs+HdJh88QyRj/WiOP8A1deOo4jN8R9Tq0PZ1o3+FWPXozw38Wcz8y7fw5ND+5ih+erkfhya1k/0SH569L8QfD680G8fTb+GSC5/55yxSR1W/sGGwj/ew+Y9eDisFjsBV9lWhyG0KlJ/AcTceEry6j/ej56hj8G/YI/OH7yvRY9L/wBD86KH/WVm3GjTRf62L5K4vbkQPOri1svM/ew1W0vRtHsLz/Ras+PbCa11Dzoh/wB/ax9Pv/8Anj9+t8L7UwxUz0LT4vNjT7Kd9aWl6X9+aX949YnhOKa6s0ml/d11WnxTWv8Ara9GcKpw0506lT3yzp9h+8/1Pz13/gfS4TqEM19F8n/LWuS0q183ZNXf+ELC8lkT7LMm+u7AupTxMDCvM/emXvQpyuagN7DKOCm2uC+JX7T3wS+Et9Z2Xjn4gWNjLef6kSy/fr4irWcD6CKTqHoN1/qxn0r84v8Agpfo0Vh8X76aWFNlxFHP03190eFfj38JfiJK9p4I+I+kalOkW/7NbXiF6+L/APgpZLZan8TEltJo3T7BH5v7395XPHMcNOp7NnVh6FSniec+GNU+xxSv+5ST/plXH6haw+a/m/ckrvPFNhDayPzXH3kM3mfvK8dwpuqfXYT+Gc3Jpmm+Z+9ioki8ntHWrqEUUUfnfx1T+yw3X/LDf/0yrkqTq/AexTqUzKvPJ/5ajzKhs7XzZPP/AIK0pNGhtZP9d5lH2U+prOH8L3A9v7SryGVrEWY6564tYbq4zXT6haw3W+seW18q4zDDRD2vs/jH/wAvDe8FxTRf6o11tna/a7hIfJrK8F2Hm6f/AHK6Szi8q4xFXnV5+zXuHqU6l/cNLUIvK0/yYvuV4b8aLrzZP7MsLyP95/ra9s1S/hisnhlrwrx5D9q115/9ZWGCp1alUudenTXIeY+H7W8sPFH9m38KPDcf6qvY/C+n2el26fZK5j/hF/t8aXhmjjmj+eKun8PzTXUaQ3X+ujr25w9medOaqfGdnZ3X7utXR7+b7Qn/ACzSuYsvOhj/AHtbel38Nrs/uVMzCpCl8ED0Lw9deT0rsPD/AIth0+P/AE//AFMf7z93Xl1nr0P/AD2qb+1NS8R6pYeD9B/eXmsXUdrax/8ATSSuqnT9pSPNqVPZo/UHwfqk3ij4J2GsXW/ZcaXvi82vN7PyfMfpXqmn+F/+EE+Fem+Fbr949npcaS/9dPLrzGSLypH82iE2fLU/4s5nGfGC6hsPA+tzSn/V6XcPF/37r86P+CV8Xm3ni2aX5HuNeuP9v/lpX6F/tCSiL4UeJJpZv9Xo1x/6Lr4D/wCCR8Xm+E9b1K6s43+2a9I8v/fyvcwkP9imZzqfGfoF4PsPKjSEfInlVseH/wDkoH2Pzo/3drvrN8N+d/yy+5V/w/8AvfiI80sMm/7L/rK55+1MIVD07S/9Un1rif2q/wBr74S/sUfDt/G3xL1KCfUriKT+xtE8395cf9NP+udQ/tAftD+A/wBlX4V6l8YPiDeQJbafF/ottJL/AMfFxX4A/tuftzePP2qvipqXjzxHqUjwySyJax+b/q4/+WcddmBwrrvnrfAR7ekdV/wUI/4KRfGH9sPx4+peMtYe10e3l/4lekxS/u4/+2dfJHijxl5sbiKaqHiTxHNf75vOrmLi6+1SfvZt9e3KdJbGf8QmuNemupHm86q32Ca6/fZ8yq37n3o+1TTf6usIVF8BoX7eKzh/1s2xKmt9Vhtdk8U9Ykkv2oeTLTPNhikp1KYH6Kf8E9/i0PFHwv8A7B+2R79Pl/1X/LSvo2PVIZeYq/PT/gnX4ym0v4mXOmxDy0uLX/llX3Pp995v76Gavg81wv8AtR9hlWKq1KXuHSXGoeVJ+6rK8SeLfN3w2tWZJTLb/wDPSuJ8QefFeeTFXm06Z6vtqpx/jjWbyKR/KrxzxR/wnl1qHm2E06V7reaNNdD96aZJ4S02a3/1MddcJ2I/iVPfmfP0fhzxt4jk/wBKvHpmqfCDxhbP51hqVe2XnheztZMGH/V1j6hdzWFxXTz1D1aGFpVKZ4nceHPiFax5lhkf/tlVb7L4wil8m60d0/6aV7HJfweZ50s0dULmLTfM/v12U/74TwvIedafpfiq6/1WmybP+etWbjwlr0v+t/5aV3lvdeV+5irSs9LhupE/c11e09mcNSieV2/gPxh5nlWu/ZJXc+C/CXirw5OkN/8Ac9q9F0PRrOw2eZDWreaNDdR+dFUVv3mx5cIMufD/AFSbT5E82uzOqTXUmPOrg/D/AJ0Vx9kxXVW8tb4SnUp1Dgrz/ejNd1T7BbvN53yR1+cv7THiObxb8SNS1KXZ/wAfUlfb3x08W2dh4ems7a8/fSRf8sq+GPiboP2+8mmtPvyf8tK9mh/cPKxs/ZnmlxLiPyaLO6/6bUy4sLy1keG6qH9zFHnya6v3tM8o7bwh4ovbW4TzZvkr6T/Z/wDjTrPg3VLa80uaR0/55f8APSvkLS7ryutekfD/AMZTWsieVP8APXRhMdVp1TCcD9oP2Of+Cj3x8+B9lZ6v8IviPJPonm/6f4X1GLfB/wB8Sf6r/tnX3RoP/BeXwheeFpY/HHwBuTqMabZLa31mPyJ/oZI6/A34B/HPWNBt3s7W8j864/7aVc8QftS/HLQdQfTL/V4I/wDnlLFax17GNxdDFP8Ae0Ob++tDCh7SjUsfsd8Mf+CaHxM/bp1x/wBsDTJfBPgHRfEl6LvS/C+iS3E8kGyT/lv+78uOTj/lnXvfxM+Cnij4KwweGPEJS6gMX+i3tuMJJX4mfsa/8Fkv2yv2OvEl5N8NfGsFxo9/LvvtA1K1jeB5P+en/TKpvj9/wWO/bt/aJ8XXPiLxf8V5rCCQyfZbHTIfLjt4/wDnnHWea0q08PDlqQnDp/Od1ChSr1JznM/cP4b2E0vh/wA6Xy/9bXK6j8RtStfjxc/De61KCOwk0aOe1jkr8H7L9s39qi6t3hl+PHiPZJ/0/wCyiP4v/FrVNQfXte+J2uXdzJFslllv5KzwtOaXv1jzq+E1P3v1TVPCsVu/2/XbGD/rrdR1m6fdWeqR+doM0F9D/wA9LaXfX4Uf8LG8SS7JdZ8YX08Mf/LKS6keOseX9r74tfDTWH1L4X/E7UtHufN/49rG/kjjkjroo1PaVfYwmc9TA0kvdP3F+NGl2cvgPWNNuoX3yWsj/wCqr8+tY0r94/mw+Qnm/vY/K/1lfVH7B/7V+sftufsf/wDCVeI7NH17S4pLLVJP+WklfNPjy0mtdQuZpZvLTza5MbHFYPFcsiMrn7fngyt4P8Ual4Skm/sa8kg8yLZL5cvl1+0P/BPT4h/Bf4h/s/6M3gDRdM027tbGOHUtPtIgHEkY8ve5H3+nU1+Hpl8qTzvO+evTf2fv2j/HXwB8VL4t8DeKZ9PlP+uBi8yOSvqKeMXEGWLA46tyVF8E+/lMjE4aphqvtqUOc/X79tH9g74bftSeBZvsukW1h4os4nfSNVjjCEvj7kmOqGvya8efAzxJ4N8STeFfFum/Zbmzl2XXlf8ALSv0p/4J6/8ABQGT9p/U9T8IeN9TsotTtY45LSOL5PMTHz/rXtvxy/ZV+Dvx80aa18U+FrWG/k5i1WyhRLhH9d+PmrwsT7bKqjy7Ndf5ZLW3p3idmCrU8RS56UORn4nX/g2ztP8AVQvWJrFhDa7/ADod9fQ37S37OHij9n/xff8Ah3xWXkgt5f8AQLnyv3dxHXhHiiazl3+VDXkY/L8RhknGF6czp9s5+4eXeOfC+m6oHm8nzK4PS4tHtPEE1na3loj28v73/So/3dP/AGlPFt55aaDpesz7P+WsVtXz3H8PtY1XVf7Ytfvyf63zJf8AWVphKdSfxzMK/s6dI+t9L1TTYrdJpdSjjT/ll5Xz+ZW9pd/B/rvtkeyvGfhPYax/Z/8AZt1NJ5Mddtb2vlSfvpvk/wCeUVdfJ7P7ZwqdL4z0vS9UglkSG1mrvPBeqQ2uoJ+5jkrx/wANzQ2uyaWGu28P+N/3iHyUR460pv2fvzOedM/cj4UePdH+IOhprGg6xJdW0nyeZLX4k/8ABbT4leJJf22NY8K+Ddenks9PijS1tov+Wcn/AEzr9OP+CUfjG88efsl2fjyXz4/tl1I/l3P/ALTr8jv23P7S+Jf/AAUM8Vf6YkD/AG/ZFJ5X+rr57LcV9UjXn/JA+kp4X6xnFOiM+E/wW/ao8JeFrP48eDvHklpqvlRzxab5v+sjr6W8F/F/WPj74HTxt4j1KeS/j/cXUV9/rI5I/wDWR1zfgOw+Knhzwnc6b4u1K1keS1kgsIraX/pnXK/s56zqQ0vxDpssD2k1vqknm20tfj+X5/jc2x9SdXkP0zNMuw2ApQ5DpPFFgIt/3JP3v/LSuS1GLyt/8ddb4km83fNLXN3EVn5nnS19bT9pCnzzPHpz9mc9Hpc11JU0mli1jzmtK4u/K/fWsMlZWoX8xt/N86ic/wB0ejD94U5JYYpP+elU9Qv4fn8qH56ZeXXmy8f+RKzZPOlk/wBusIQN6Y+SX93ise7v/KvEhq/ql/8AZbfyv9W9Y9nKLq8eauGE/wB6d9P2Xsjs9L1mG1s0s7D79b1nLN5aTS/frjNDi82487/nnXT28vk23+pq50KRh7f2ZZ1i7mlt/J86uJvNBhupHmlh3vXT3nnTf8tvkpkdr+786WGuqh+7Oedf2lU5K30byo/Ji376s6Xaw/66X929atx/otx9si+Sn3lh/akf2yKb56f8T4xwqezK0d153+tmpl5qn/Pp+lQ3FhNF/raoXGqQ2v7mop4LkZz1sUpmrb67eRfuZf8A0bX1R/wSv+Bl38X/AIuXPxs1SGOTR/B8uy1/6aXFfHlno2s+PPEFh4J8L75NS1i6jtbWP/rp/wAtK/aT9mv4DaR+zJ8A9B+EulzR77e1338scX+suJP9ZXsU6dSmeHmOK/d8h0njS6ml8P395LDv/dfva8cklh/5a/pVP/goR8WvGHwq/Zj8Ya94N1KSC/j0aT7Lcxy/6uvKP2F/Fvjbxl+zHomv/EHXp9Rv7iLfLcyVeKp8lL20DxKBsftSX8Nt+z/4t8688j/iQ3H73/tnXw9/wSDtYIvhPeTSnzPM1ST/AJa19k/tmSzRfs1+NrwTfJ/wjlwlfIX/AASHtZovgGk2I4/Mv5H/AHf/AF0rrw9T/YfgFP8AeH3n4X/dW6Cobzx54V8B6prHiTxveQWOlaXpcd1dXMsv/LP/AJ5/+Q6f4a86WNIf+elfmJ/wXI/bS8rxp/wz38L/ABJss7e1/wCJ9LbS/vJJP+edGEp1MRV5DGZ4b/wVV/4KT6/+198XLyzsLyS08JaPLJBoNj/yz/66V8Q+IPFE11J5MU1VvEms3coeGW8fZWX/AMs69ic/Z+5Az5CWSbzeap/uYZP3tLVK/uvKjxRz+0AfcXQi/cxfvKh+1eVJ+9qtHdVZs9Lmv5/9uj++A+zimurj91DWrb+F7zy3mlieuz8F/DTybf8AtLVPkq54gis7WDyYq05/aUzQ7D9iiwi0H4oWd5LNsmuPkir7h0+Wa1vPJlmr4S+AfiP+xvipoPlfP/pWyWvufXIj5aalF/21ir5HOP3eJPqcmhV9kdPb358v91WbqH72R5pYaoeH9ehm/c1pSRed/wBNErxz2zK82DzPJzRcfuo/J87zKfqFh5X76qHlXnm/6msJ+/VNcKinrEX7vNcrrlh5sfnSmut1C1mlqheaMLqN4fJrrp+zgOftTzfWNLg+fzayreH94kPnb67PXNB8rf5tYlt4cmiuP3UL120Kn85l9bq/AM0vS4YpPOlmrodP/ddam0fwlMIv9TWrb+DdSi/feS+yiczIm0+WaX/Wmr/2+aX91ms37LeRSeT5NXLOwmlkQ1vTqchlUrfu+SBf0/P+urS1jWodL095v45IqrZ+wRfvYfkrg/iZ438rT3htOHk+SKu6n/OeHP2tSqcZ8QL/APtS3vJ5Zv8AllJXzr4kimut/wByP97Xt955Nroc0IHmP5VeG6hdzf2g/mw134SvSpnDjqfIedeMNLxJ/wBc65x3mj6H5a9E8UWEF0XmNnJXDa3YlWzDXbOdX4zx17SoynHLNnzq2PD+qeVIhi31hbZI2xJ0960dIkhEhFFOpUCauuU9a8B+KJrW4h/v16j4gsNZ+I3g/wC2aNNGmpWcX+t/5aSR14J4X/tK6/fWsPlp/wA9K9X+G/jKbS7i2hlmr0of7RS5Dh/hnHyWHjaKR4Rr3lv/AMtf3VXPDf8Abul6h5t/rE86f88pZf8AWV7Z8SPgX/wlunJ4w+H3zvcfPLYy/wDtOvE9RlvNB1CbTb+ze1ubf5JY7mL/AFdcs6NWg/gOqnUpV/gO20/xl9luUm85Nkn+tirS/wCE8+T/AF/yV5db69NFvMs1M/4SMeZ+9m+SuSbq+0N/4Z3muePJvLfypo4/MrzfWPEd5LqHk0ahrPmxv5U0lY9ndTS3HnSnzEjr0sA39ahMwr/wz9lf+DbPVJ/Efwr8f+A7W8jkeOXz4v8Av3JVD44QzaX481LTb7928d/J/wCjKyv+DXDxRCP2hPFvgmaz3/bNG/dRxfJ/20r2n9tD9nObS/jR4n1Kw+TzNUkfypJf9X+8r6XiGFSpjlP+4fM5PX/2qtRPm+4v4Iv9dNVaTxRDa9byuk1T4aTRXHkmH5K57VPhzN5j/uZK+aWnxnv+0wxpfDz9pDUfAHjvTfF3hnxHPZapp8sbxSW0tfqn/wAE7P8Agr14f+M3ia0+Dvxf1qP+07v5NM1byvLS4k/55v71+Plx8FvGEWoeda6P56Sf6qvY/wBnfU/jB8G9cs9Y8JfCu1vrmOWN/KvbXfX2eEzHAZjgPqWY++rfu39uH/APIrUvZVPbYb4j9/8A4m/Cr4ffGHwzJ4Y+Ifhi01OyljPE8Q3of76P1Q/SvxF/bv8AhNN+zp8Z/EPgQaPfSWFvdSJYXPlfu5I/+WdfZ3gj/gq5+1pL4XjXVP2W9MnvI4o0intr6dI5P+AYzXzH+1t8Sf2uf2nfFUviHxt8PdOsQ48uGy062k8uP/tpLXy0sDmOAg4TnDk/xnt0MVh6lLnPhDxZqmm38r+Vo8/7v/plXNx69psX+q0fy6918Wfs8fFqXUHOoabBAkf/AE1rj5PgF4rurx4ZYU/661hThSOWdan9s4C3+Jd5oMjw2Gg+ekn/ACz83y/Lp8fxL8SXUmLXTYIE/wCutdt/wz7rEt48MUyf9+qm0/8AZ91L/UyzRo8daewpzOfn/kOVj+I3jaaNPsvlyPH/AMsvN2Vt+F/Hnja6keGWaOB5P+Wf3/LrqtL/AGc8Rp5msR75P+WXlV2fhP8AZfvLq4Syimk3yf6qLyq7qP1Yzn7X4z9U/wDgll4Xm8Of8E9/B8N/eWsD3GlyP/pMvl/vJI6/HP8AastfHnw+/bV8Vaxf6PfQQ/8ACUSPFcyWsnlyR+Z/yzr9XPDfw08SRf8ABOPRIdLh+yarp/giN4o5JdnlyeX5lfjV8QP23PjldeILzRvFH2HUpreXZ/pMW/8A8iV8blmHq4ijipw9+Ez6hV6VPOOeB9daX8RvN8N2c2s6l8n/ACylrmPhH8S/+Eo+MHjDTbWaBEjl2eVF/rJK+dfC/wDwUE/4Rbw/NZ+I/Dcc7yf6q2+/H/388uvoT/gn94t8B/tD3fiTUtL+FcGlax/Zf2q61eyut/mf9s6/N8Lws8trVKnIfYZhnf1ulyHc6pL5sb+bv31yuqXU3m+T5Ndbd2s376Gb949YmqWsNrJ53k+Y9e9/ARyUv3nvzOeklm/1MtUNQ8m1i/dfJXQ3kvlfvvJrmNZ/1hqNX756ynSMfUNU8391mqaS/wDPL79Pk86W4fzfuVZksPKTzqgJ1LGJ4gl82P8AfQ/PJRZWE1rpdGoWs0t4ma2PsGbdIIjXJP2VM6qc3URDocsNt+6ihkrejl/eJD53/fyqFnYQ2Fx50X/kWtKSL9153kx11U/ZM4ak6q+MmuJpv9TDTPt/7vyZYY6huNUhit/J8n56zbi/5renD96YTrj9Qu5pZPJ8moZb/wCy3H2Ow3/vP+WlQ3Fz9q6UyOLzpK9Jfu6fOR7TnJri/ml/fedXPaxa+bJ53+retKeI2vEuyq15dWcVs838ccVRD+KclSfP8B9P/wDBHv4GWnxC+Ol/8Ttes98Phu12WskkX7uOSv04vJPN3zS186/8Ez/g/D8L/wBmTTby/h/4muuf6bdf9tK+hHl/561205+0qHz+Kr+0qnkX7Vnwb0f40/CfVfBOszTx22oRbJfKl8v93XAfC/4aeG/hB8O9N+G/hyaeS20+12fva9y+JEsMuhzQ+TXkt5L+8f79Y4qpz+4RT/dnj/7dd19l/ZP8bTy7P+QNJ/2zr5g/4JNxTxfs72F3F9yS6kr37/goxfzWv7IfjaY75E+wbJa8K/4JX2s0P7M+iQSw+X/HFXdQn/wm8xHIfVfxc+LWm/BH4F+JPipqk2z+x9Lke1/e/wCsuJP9XX88fx08eax8QfGmsePNZ/4+dUupJ5a/V/8A4LefHOHwR+z/AKP8MLWb/SdYut91HF/zzr8ZPGGqfarj/XPsr1cDT9nhuczMe486WT97TJPJ8uprOWGKPzpoazdYv/N/1R+Sj+IaFa8uqrGWa6j/AHW+nx2E11J0rpPCfg3UtUuPsdrD5j0clT2ZmZXhzwveX9yhw++vYPBHwls7SNLy6h+euw+H/wAOdN0HT0/5aP5X72Xyq6e50uaWPybWo5CJ7nDapazWvJg+SvOvHl/9l/fRH569a8QWs0W/FeRfEyXNx/qdlVD+IbrYufAeK9l8eWGveds+z3W+v0as7qyv9DSaX/lpF/ra/Pr4bRDRre28qH5/+etfefgO7mv/AAnYTeV8n2WOvmc+n+9Pqchqachzes6zN4S1hJpYJNklavh/4jWd0P8ASpfnkpnxI0aG/wBPf9989eSyapeeHP8Alt5lciwVOvS5zrqVPYVT3vT/ABJDfnyfv1pfuZZErxzwf8RvNt0vIrzy/L/5Z13Oh/EHR7/99dTfPXDOn7M66E/aU/jPQrPw5oP2Pz/J+f8A6a1TvNL0zy/3UMcdY/8AwlsIj/0WbfWbJ43s/nEt5sf/AJ51y+zquqdUKi+2HiDQbO6uf+WdYh0aGKT91VDXPFpNw/mTVlR+KfNuEmlmr0YU6pyzqUj0vw/FptpH/pU3z10+nxabdRV5LpfiP7VInmzf6uuhs/iD5Uf7r79bFznS9kdheeEtMl3zS7KwdUtYdLjok+IPlR+TdVw3xA+I0NhbvNLMmz/npXZTPNqVy/408b2el6W/m3kf7uL/AJa145eazN4t1DzpZpJEj/1Xm1j+LPiDeeLdX/s21h3pHL/z1rV0f/QI0/c11e2pWPOpz/ekPiiX7Bo7/c3+VXgMd19q1SaHzvn82vb/ABxfZ0+aaWbZ+6kr540jVftWoTTS7N/m10YGFJnJmMDY1iKbZXDeJLXzT/t13l5LDFb8w+ZXE+JJZopP3sNep/y7PH9p7M5OdZ43MUlWtBcjUEjlfAPSoLo+ZOTj8aWGN4nEr5RfU1KhU9oRzaHs/hO1s5dPSEeXW3b2sNpIn9+vMfh/4s8q98mb50r0iPVIb+NPN+/Xo0qns2c/sz2/4N/EGa109NNupk2V0njjwv8AD34q2b6b4o02CSaSL91feV+8j/7aV4DofiObS5Ez+8SvSND8bwS2aTRTV7H7qojzp3pVTxb4ufCXXvhL4gfTb+ZHhuPnsJf+ekdcTcXXlfuZZtlfTnxkl034g/CO/s7r57mz+e1k/wCWkdfJ0l1DL/x9ffrw8VT/AHh6tOvel75pSXX2qP8AdU/Q5TDeJ++/661jx3XlSeTWlocv+mfvZkowNRfWlAwxX7w/T3/g2x8W/wBl/wDBQ7S9NlmdP7Q0qRPMji/8h1+q37f3wxFl8WtUcab/AMfsPnxXMlfjP/wQd8Ww+F/+Cj3w4mEP+jXl99i8qOX95+8/5aV+/f7ffhWK58VaZenfsu7Eg49q+34ljbE0Jd6Z4GVU1DMa5+c2ueCJorfzvsdZSeEoZbjzofn/AO2VezeKPDnlXk2fuVzen6B/pH/LPZ/1yr4+p+8PYnTMrwl8PodUkhP/ALSr6E+Efwl0f7RDN5P777kXmf6uOuJ8F6PD9pTPyV7l8O7+DS5EMX/kSo5KapkTPafBfwv8K2tm4+x70/7+VzfxU+FXhuW3cWEMaf8ALTy44q2ND8ZfZdP+x/JJ/wA8qh8SeKYbq3T9z/5FrhdF+052GHrez9yZ8r/FD4Xw/PFa6an+trxPxJ8PrOK8f7if9Na+tPiBFZ3++aXzI68Z8X6DZxRv+5j/AHlddAqpNVDwTUPC8MVx/rvn/wCestQ2+jfvPJihff8A89K7zVNFzJ5Pk1Wj0b94kNdM/aHKZWl6DDFIkMUXzyf6391XqngPw55UkMP7uR4/+mVYPh/Rof8AXTQeX5dekeC7CHKQxQv/ANNZK0r1KWHpGMJOoz6Z/ah874N/sGarZyzPBc2/hKOD/VfvI/3dfzZ+M7+a/wDEE011Nvmklkr+jf8A4Kia9pvg39hjxP8AajOn7rZ5sstfzi6p9jv/ABhDMLON4ZJf+WktcGBh9Qyeo6f2z28DU+sY7nL+h/BubxloaTWt55E0kuyLza/SD/giX8G9S8EeLPFWg+LYY50ji+yyy23/AD0kr5O8P/Y9B8P6Po8pjgmuJY3/ANVX6Qf8Et7WHVI/GHjCKH57i/jT/wAh18Ng8wxOLlPDVD7TFUaWEwvOcl8bPh9qPw++IF/oN1B/q5d8Uleb6hjzP3tfWn7dvhzTf7P0fxJFZwJeeb5Ev/TSvlrXLUy/6qF99dOY4elTXOceV1/rFM5LXLryv3Nc3rEUxk58vZXW650/effrmNQtfvzEV51D2fxHv04fzmVp9r+8/wBir9xFDFH/AARvUKRTeX5x/dpT7yKGWP8A2Kz/AHVM2nT5/jMGS1B1Dzq3reKG6kTENZV55MVv537urmh3Rlt/OrhqfvDup2p0uQ2JNL8n99TLj97Hmnxy+bb1T1D/AEW2cedW+H9oeXi/4hlahL5X/Las24uoZY+vz0/WL+Hy3P8ABWJcX/ld69ynTpWOSE0X7aWGU4/8i0Ry3kUn+u+SqEeqTf6mX93TJb//AJ5zVtCHtDCoX7y5/ef7FdD8E/hpefF/4uaD8N9Ls5Lt7y/je6iji/1dv5n7yuJkv+lfbf8AwRf+D82qah4h/aE8R2ciW3m/YtB83/lp5f8ArJKqdOnA4cVX9nSPvbw/o0PhfQ7PQbCHy0s7WOCKpriX92/9+mSXXmyPVOS//wCefyV00/3dLkPHMr4oX83/AAjfk/uK8ovJYYo3mi+5XpHxEv8A7VpHlS/c82vK9Ql8qPn95Xn156+4XA+b/wDgqLrMFj+xf4whlvNnmRRp5X/LSvPf+Caf+i/sz6D5vmf6qt7/AIK0apDF+xv4kMR8ua48tP3Vedfsp/Gn4e/Bb9l/wx/wlupSfabfRo/3X/TSu3D03Uy3/t8z9p+6PnL/AILieMptZ+OFh4blm/5B+lx/uvKr869YuofM/e19Xf8ABTT48Q/Hj42XPjC1s/ItvsscdrFHF/zzr5I1mLzd80U1e/P93ShA5YVChqF1N5fkxVm/vpamkimqazi82TEXl1zQNy/4b0v7VcJ/rK94+FfgOHS7N9Sls/LeSuA+E/hKGXUEvLqHzK+jfA+jTXUaeb+4StoQ5/cmZ051agaPpf2qL/U1ZvLX7LHmunksIYpH8r7lYmoeT89R/D+Af70868aRQxb/ACjXjnjC1hv9chg8n/lr/rK9p8aCGLfXkusY/wCEoSEj56IT9mX/AIzY/wCPC3SGKby/3X+tr7A+AfiOC/8Ah/pvnTSedHa/va+OdYih8v8Ae/zr6f8A2XtVhuvh3bedN++j+Svn84XtKfOe/k9T2dXkPTtYtYdUjebya8x8aeDf3j+VD8lel+b5sv7qmavpdnqlp5M0Pz141Cp7M+gqUKVQ+YNUl17wvqjzf8sa1fC/xGhmP/H5sr0jxh8NLOWN/Nh314/4k+Gk2jXj3kVkkderD2Vc8r97TPRY/iDeeW/2W8+Sq1x4yHl8TV51HrOp6Xb+TLDTLjxb5sf7yby65YU6lwVdw+M7DUPFvmyP+9rKj8Zf6Z5JvK5K81n/AJ5T1m3GqeV++irup0/aHLUrnq9v43miKQyzJVmT4jeVH/rvnryK38RzeX/z04pkniOaX/Wj56j2H70v61+69w9RvPi/5VnxNJXGeKPHmpeLZEs4od/mf8ta57N5dfvv4K2/DejfvPO/dx11T9lT+IwVR16pseE9B+y/vZfneunklH2fyTVCzi+yx4o1C/8A9HrhrQ9od1vZnMfFDVIYtDmhlh8x/KrwrR/J+2PDXqnxc1n/AEN4f+eleV6Pn+0f3te5ltCn7LnPHzB1Gzobv/j3rkvEsU01x+6rsHtfNj/dUReEvKP2yWGPfXVOH8540/ZHE6f4O/ePNfwyb/8AllFVbULCGWR4c122p+T5nkxQ1z15pcN1I83k/PW9Of7oUDE8P2vlXnnRV3Oj6zN5fkyVyX2X7LJ+6rVs5fKj6V2UKdP4zGtXOwjv5hH/AKLWrpevTeX5MU1cfb382MVck1SGwt/tks1ejD+Ecn7qpVO21jxxDo3ha8nurz/WRbIo68Eu9Tia5e7kh5rV8WeOJte32f2Py0jrmJJZvLrypzpe1PWoU6dOkX7e++0HzTWloco+0JiGuet5fStXR7qH7QhlowkKU8VzmdT+GfY3/BLfxh/whf7cXws12OZIPL8Y2af+RK/qK/bn0j7X4A0jUIrLe8M/l+b/AM8+K/kN+AfxC1L4X/FPwx470aHz5dL16zuhFH/y08uSv6DP2n/+Dhf9kDx74NsfC3gPwvr99dwYmuZL20+zxxyeX/q6+04mqRxOEwVTDbwU+f8AA8HLqNSnmNbn+2WfFFh/pD/aof8AWVz1voM0UjzSw18weLP+CtHg/Wd95YfD2Tf/AMsopbquJj/4KbTS2/nX/gm0fzP+WUl/+8jr86r4jG0/sH0lPCUvae/M++fD/wBjl8mbz49ld54f1SK1/wBVs/7+1+a2p/8ABSzxVf3FtD4M8B6VpSRxf8/XmSV2dn/wU28Y6Xpf2PxJ4P0OO5jtf3V7bSyV5s8dmdT34QMfqtL2vJM/SPT/ABHDD/zEoI/+ev72rkd/Nr2nzXlrNHPDH/y1ilr8l7j/AIKlQ2GsQ+G9U0eO+m1i/jg8q2l/1fmf8869d/ag+IOsfs52bzWHiS606/8Asuy1iil/d/8AbSvRVPE1KfPW+2cNelSoYnkhM+2/FGJZHhlmj3x/885a868Sf2bLE5+2f6uvhj9kf48fEKW41i817x7dX15qnmP5t9/q4/8ArnVDWP21/FfgK41XTdUvI9Rv/tUiWtzFFsjjjrtrKphKXJzl06ftKp9gapLo91G4tZo5PL/1tU/K02LZ5v7t/wDppXwfeft1/FS6k8nS9SktP+evlxVpeG/+CinxI0HUPJ8W+D01Wz8qPzfL/d+Z/wBNI6xg6oTwX2z7t0vVNBtrJ9e1S8kgs4/n83yv3clfP3xY/bs8VS6peaP4I1KDTbCP5LW5iiry79on9rWH4l+G7bTfC/8AaMEPlf6VY/8APOvmbx548vLD9yLOSPzIv9XJFIlfOZ3i8d8EIH6nwLkOTU6f1nGe+f0Uf8FDP2ZPiF+1z+zHrfwk+H3kJqVx5b2sdzL5cdfkXrn/AAQz/bS0a4hvItB02d7eL97LbXX7yOv3a+1anazp/Zd55Dx+Ynm1c+yzXciTXX7x/wDnr5Ve/gc4x2Bw3seSDgfk3J7P34H899n/AME+/wBq7wv4ws9S+IPgO+ks7OX97JH5j1+jv/BN+xm8EeA9Y0fXoEtL+41T91bf8tPLr7q1DRtN1SSaG702C6SSL97FLFXKyfAz4e2t4mvaX4bjtJvN3y/Zv3clE50sXV55UeQ64ZlUeG9jM+Of+ConjfxJ4S0v4e6lpejzyWH9veRqkkf+rjjk/wCeleOeIIof9da+XIkle6/8FfPBGsa94T8MaboV5PBD/bMfm23/AD0r571TS/7Hs4YZZvn8qvKzidL6tDkPfyCfOcxrlrN9o/0WsG9/db/NPz1q6hrMP2h/KrB1S/hlj/dbN9fM051D6opyRReX50oqtcSiWN+KJLqGKPzpaZHL50f7qupeyqGc6/2DK1L/AFVWfD8v7vyf9XTLy1mp9nazRXH701w16ftDroOl1NWOWa1kqtql15snkyny6fJdQ+WnPz1j6pdTTXFaU6fszlr/AMQrapafvP8AU/J/z1rE1D/RZeP3lbFxf/6P5NYOqSzZ8mvRp1zza+5m3GqfapPO8nZUMd/5snnS0+4tZqypPOmkrT97U+A57851Xwz+HPjD48fFDQfhX4Dh8+81i/jgl8v/AJZ2/wDy0kr9m/gv8L/BH7N3wv0f4MeHLzSrW20e12S+VdR/vJP+Wklfzo/ET9qXxt4I8af8Wl8YX2hvZxSQS3Om3XlyXFc9eftm/HPXo5odZ+IWs3b/APPSTVJK9GhgsTX5Pf5Dzq9enXP6dry/zsmP/LT/AJ5f8tKoSX3lSedivmn/AIJZ/EvXvG/7EfgzUvEd5PdzR2Hkfabm68zzPLr6BvLqaK387HyVH/L2Zymb8SLo/wBnp9+vLry682Oa8mmjgSOLfLLL/q461f2lPjd4D+EHgtNe+IPiTyEt/wB5FbRS/vJP+2dfmn+05/wUJ8VfGTUbzw34S36V4e83Z/o0vlyXFR9Xq1/gM/bHc/8ABQT9pvwH4y0N/hXoNml9Zxy+ZdXMn/LSSOvh74ifFXU9Ut3s5b35I/kiirkvjB+0Fp3hy4fTLCaSe5/59q8l1D4g+MNZje9uoY4Hk/8AIdfRUKFLD0rROXn5/gL/AMWNZm1SRJpf+WfyV5XrEU0UjzRQ12F7rN5qlv51/wDvHrnriLMlde5KMeSwF1H53kulaXh/w3PdXKSxQ+Wlei+D/Aeg+KNHhmih+f8A5511Vv8ADSz0b/VGOuWFOl8ZrOZW+G/hyCKNPKh/1le9+FtGh/s9Jq8x8F2EMN+kMs2xK9g0u1n+xp5X3PKrCc/5zSHsqYzUJoYo3h8muS1iUyxv/wAs0re1uWaLiWGuV1y//wCWMVRAvnOP8Yf6qvLtQi8rxJ9s86vVPEkX2q3evLtQihi13zpav2ZoWfEEv+j+dXvH7Ies2d/4Tms5f+XeX/llXgmuSmaz86u8/ZH8R/8AE01XTZZo43/5Zfvf3klebmNP2mFO7Lp/vT6rs5cSYrSs5vN/7Z1yun358v8AdTVsaXf+V/y2kr5VU/Zn2lOftEaWoaNDdW+K4bxh4Shl/wCWPyV3n2/93WbrkX2q386LZW1OdT2hyzp0oHhXiDwbD9of9yn/AGzrntQ8Bw586X5K9d8QaXD/AMDrm9Q0qGWu/D1/afGcnsKZ51J4Dsqp3ng2zi/1UNd5caWQP3VZV5FMf3Oa6/jqnLUp0jjJNB021i/e/c/6ZVWk0uz/AOWUPz10moRZk/1NUJLD7LJ50tX/AADk5ChZ2E0MuPJretLT/ljmq1n53/LKFNlatvEYhWdT94b0PZ/YH+bPF/y2qhqEvm1cuLr/AJZGuS8Wa1Da27mKaopwu+QK9f2ZxnjzVJrq8mh+d0jrjNHlm/tStvWLqa686aWqHgPRptU1H7bLDIiRy17lBfV0eBXnf34Hc+H9G+1S+d+82VNqlrDD1GxK2I4vKs/Jh+5WJrEvm9q39oeb/jOY1CLzZHx8iVTuNLhis/3uzZWlqEXnScCsrWLmzit/Ji+/W/7upSNKcP3RiSf6x4YvnSn6fdeT/raoRy/vH58upLu/NjAJbmU5rtoaHJXoe0NF9TjskF1cSlIj0Aq/4clh8RedBLZyOlx/qpPN/wBXXHXOpnXJBDJG/wAg/dYq74fv/wCwbxJpZq09p9iAfVLLnK3iDQJ9L1ebTZYZ45Y5f9XJVYaDqVz/AKrTZ/8Av1X0V4Xi0HxHImpXWmwTzeVs+0yRb5I67DTvDl5ayQ2dr/Z37v8A56xR1y1If3C6eNqHyLH4X1jPnS6bP/36qSO0mtbhorq0dHj/AOWUkVfZf2Ca1/cXNnBP/B/qo6ZqnhLwr4jj8m/8N2m//npHaxxyVvQhTp/YMfrfOfMfhOWWKSEGb5K63XNUmiuP3upT7/K/e/va7zxR+zxo8uofbPDl5JYzf885P9XXnXxM8G+KfDFx52qaZJ5Plf8AHzF88db1KlWp8BndTZZt9Zh8v/j8f/v7RHrOmxSedLN89cHHqk3X55Eot9Z82486WGPZXj1v4vvnoqt+6PQtP8R2VrcJeWsz7/8Anp5tb158X9YlkfN5Gn/TOvJf7amijebzqfb6zNJ+5l+d/wDnpWcIVPah7TkO/wBP8ealF4gttYtdjzW91G8Vex/Fz4/fE7xneQ/8JR4wur6GP5/KvbrfXzT4fv8A/TE82aTfXsF5oMPi3R7a80a8j+0xxfvY5K7qkP3Ryc69qavhf43fELw5vh0vxhPBD/zzpknxQ8VX+oPeXWsee8n+tkkrzfUL+a1keGaH546Zb+I/J/365P3U/jOjnqHqkfxBxJ53nfP/AM9K3tL+KF5FcJ/pkEfl/P8AvYvMrxP+3j5fnRVcs9U86P8Ae5RKdOn7UL8nxn1X4f8A2pdB0zR8S+G7F7nytn2n7B/rK8W+LHxB17xvJNNL5cif8soov+WdelfsI/sEftQf8FBfHb+C/gN4SA0yzONU1y/m8uO3j/56V+vv7O3/AAa3/sz+FfBEcv7QfjTU9X1f7M4umtpY/Kj/APIddjyPJ6D58fU5CsJnFehU/wBlPu7T7rzdk3ySf9cqv29/NDI/76ue0u6mig/ewR76ufb/ACo/O/jr5rAw/dchzThSNWS6mik80ny6rfaofNeYzfJVD+3jdf6qmXk0+en+srr/AOXJy+wp1Kp88f8ABRi/mi8P+G5rCzkkeTWdktz/ANM6+QvihdfYNQ/e+W6V9w/tUaNZeI/D9mb+GTybO63xebXxP8ZNLhluJv4K8bNKlO3uQPscin9Xp8kzxzXNa828m/1cdYMmqTb6v+MLC8sNQ+x+d/rPnrnv33mZlmr5+nD2h91L2XsjYF1DdR/upqhuJfsv7nzqs6fYfu8Rffpl5peP3tz+8r0qeF9meDOvS9r7hTjuv3lXPN/d/bKZ9gh/5ZUy4lh8vyaKlP8Ad+4EK/tBn2/781UNQvzLJ5P+sq5bxQ/8tJqytUi8qXNrNJWCp1fal86IdQ/ex/8APOsyrscU0Mf+lTeZVaX/AKZfrXXTp/ynJU/ic5lahFNL/qvMryv48fEK98B+E5vss/kXl58kX/PSvWtU86Kzfyv3n/XP/lpXYfFT/ggX/wAFIPj74D0r45fDmHwlqNtqmlx3UXhv+2fLu44/+ef7z/lpXq0Fgofxp8h5eOn7M/MTUL/zZH82bzH/AOWslU7PWfK1DycV1vx0+Bnxs/Zz+IFz8K/j78MdV8K69b+Z5ttqUXlxyf8AXOT/AJaVzHgPwbr3i3xpDpug6PJdPJL+9/55x/8AbSvbp0KVudTPKp1/3R+7v/BJv4v+Cfhr/wAEv9E8eeI7yR7bS4rj93/1zkk8uvm/4wf8FLPjN4o8UXOpWvjCexsPtUj2FlbS/u44/wDlnXhUn7Q/jz4cfsf6V+yja3kFpDp91JdX9zY3X/HxJJJJ+7rwe88eaxLH5MMySP8A9NanC4GnTc5z+2c9SpU9p7h618aP2gvHnxk8STaz488YXV88n+qjllryv4ofFqz+H3hf/RAn2+8/cWsX/LSuM8Q/Ea88OSfvYf8ASZP9VHXAahql54j8Uf2xr148j/8ALKL/AJ512TSXxQI53/OaXhvQbzVZLnxJ4jmee8k+fzJav6x/otp+6p8d1DFp9cx4g8ZQ2vmQ+dXNz+098un/AHxkl/5Ujw1W/wCm0UFYlxrv2q488TfJWrZ6hD5aSxT1cKhvT9w7/wCB+vQ6XrH9j3U2xLj/AFXm167cWs0sf72GvnXT5fLuEvYvvx1738M/FGm+KPD8JtdnnR/JLFXJP+IOc/Zl/Q9L83VE4+SvS9P86KzTzfuVxlvYGK48/wC5XW2eqf6HWk4C/iEOqed8/m1x/iC15/2K6rVdU82NLM+XXMeKLW8+x+dD9ysTTkOG1yWGK4e086vOtcHlax+6rsNcv4ftH73/AJZ1yWueTLqCTRfPRzgMvYvNs6f8E9Zm0H4iQ+bsjT7nm0zVJT9j/wBuuVs9UvLXxBDeRfvPLlrKvD90b0P3dU+29H16GL/W10lndfarfzopq8Z+Hfi37fZw/vv+WX/LSvQtP1n7LH/rvkr5aoud2PsMPXqVKR1smqTRRp5s9Tf2zDNbvDLXMR6pDdH/AF1M+3/ZpM/wVn7PkHU9z4DY1C1+1RvNFDXJa5azGSuqs7+GWz6PWPrHk/67+Ct6f7szOVktZjG82a57Vbryt+a3tc1SGKN4ZfuVxmsap5td1P8Aee+YVyneX/mycQ1Tklml70ySUyyed51M+1e9bwhSqHFzlmziq/HdeVHVC3/rU0k3mx/vaw+P3BKdIfql/wD6P50U1eb+NNYhurj7H/HXSeIL8W1u5rz2e/mv7zzpf3ldWEofvffMMVXQy4866j+x2v35P+etdb4T0GHS7PyfOjkesfS7XR9LH2zVP/ItUNd+JcMSeTo3/fyvZU/sHiTn+9Oz1jWbLRo3+0zeXXH6p4t83/VTVzGoa/Nqknn3/wC8eq1xffZdk0pq/Z0/aGc5mlqEt5fn97N8lZV7dZ/cxVWvNevJf+W1UI78xF5paftvZ1SP3hfnvYraDzZB1rEvr+6vmBuJidgwlJd381w+Wkz71XIK9DSxWK9ouWBpRpuC94v6PN5UnnD79dPZ2tnqlv5M3/f2OuT0+Ty5K6bw5dS+Z5Mg+T/np6U8LNqmc9e/tDv/AIdy6/4OuP3sEk9nJ/0y3yV6RpfjLw3df8f95JB/0ykirg9D8UfYLNIfP3p/z1q//b1nNJ+9Ecleqq/tKRw+z5KvOekaX4802X/ValG6R/8ALXza6HS9Uh8zzvk2V4PqGi6DdXCajYQvBN/0zp+l+OPFXhe8+xXR8+z/AOev/LStv4dT3CJ0z6HuJbPVLPzop/MeuV1CW8sN/mwxyJ/y1jkrmPB/xV03WY/JtbyN3/8AIldb5sOqWf7qatfaUjknD9775xPjT4N+CfHG+88Of8Sq/ki3+V5X+jySV454w8EeJPAeofY9e02SDzP9VL/yzkr6B8n7LccVqyWGj+J9D/4RXxFpsc9nJ/z0/wBZHXJUwt/fgdVPFcnuHyRJ/rTRH53mc/JXp3xl/Zun8JD+3fDk0l3pp/55/wDLOvK5PJ8z91N/q/krzZ0KtOrznfTtUpGrp9/NFeJMa918J/FD+xfC8Nn51jPDHa7PKltf3n/fyvn7S5f9I6V0l7/x5p++TfXVP95hjO1OnVL/AIg1SC/1V5oryPZJ/wA8qrR+T8n77/V1lXH+rTyv+2tTWcQi/wBUfkry/Z/vTeubdvdQ+Z+6+5XW/D/Rv+Ej1i202Kb57yXyf9V5kn/bOuJ0uLzZEvM/J/01r77/AOCGf/BOqX9vb9p+LVLzXZLHw94D8vUNUkH/AC8SeZ/q46+lyWjhqVf29b4DhxeK9jguY/eX/gjN+xf4N/Y4/Y+0LRdItJv7U1u1j1DXbm5i2SSSyDNcR/wUu/4KM2fga9HwO+E+vWskjj/ifX0EvmH/AK909693/ax+Ouhfs3/Aw+HtNv4/7RvLMWVnGesaeX5fmfyr8ZfjhdaBdeMLnWNGvJHmuJd915svmVz0sP8A2njamJr/AAG+X18NluCg5/GfrpZ3XlR+T53+rrS/tQf6mvhK3/4LDfBO1/ff8Irqs7+bs/1v/kSvqL4D/G7wr8bvA9t428I3kmy8i3+VL/rI6+Nw8MT7LnrQ5Drr0KXQ9FuL+GKP97NJHXPeOPiP4b8D2/2zXtegtYf+mstTeLPEcGg+D7zV7+F5Ps8Uj/6rzK/G3/goZ+2FefEHxx/wh/hL4kXUetyX/wBll022/wBXb+Z/7Urtw1HE4ufLAWHoU/a++fp98TPihoHjfwml54c1iO7huP8AVS20tfOvijRvt7zfa4fMSr/wH8JXngj4L6D4b1m8knuY7COSX97U3iTyYY3/AH3l18hVrP204QmfT06fsz57+ImjGLUH8rZJ5f8A5DriY7WHzPO8n/V16X8Q4bP+1JoYv+WlcTd2vlSeTNVUH/cO76wUPKmlk86GGpvss3mf6VVyO6hijSGL56fqEUMNv/rv9ZXb7ekcPs/ZvnM2S1m8t5qzZIYYt80vl76s/bppZPJlmqteRTXW85rWFP7Zp7Qhk8mWPzoh8lZt4fO/fRCprj91+4iNU7j93vrP2f70upUIZIvN5zVa88mL/lr5dPkuvJ/c1WvPJ8vzoq35/Z+4cvtPaUze+E+gab4o+JnhvR9U1KOC2uNZt/tUkn/LOPzK/WX4kfCX4hfFXwvbeMPhV8SI9D8N+H9Lk/su+tvM+13n7v8A55/9s6/Iv4R+LbPRvi34e0GWHz5tUutlrHF+8kkr9v8A4IaF4k0X4fpp3iP/AIlVn9ljupbm9l2QW8ccf7z95XDiZ8taEpnDi50/Ze4fm/8A8FBP2ftO+Kn7Nlzo/wC1T8Q59fuY7DztB1bX4o3u9PuP+Wflyf6yvzHjuvDfw50f+x/C8MEaRxbJbmKL/WV9b/8ABY39uvR/jn8YLz4Y/C/UoH8MaHLJBLfRS/u7yTzP9ZHXwN4g177d+5im/wC/dfeYHC+wwP748Dn/AJCHxh4ymurh/sv3K5uz1kSyczVDrF35v+q8usqW6+yf79ZznUqF8jLPijyZR538dcr+5ik87NXNQ1ma6/c+dWbJN5snSj2n85U/fNLWNQm+xpDF/wA8q4bWP9Y586ukvPOlj61z+r6eSn72ao5Kk6fuGNOfI/fMmO6rV0PVPssnJ2VhXGY5Bj5KdZyzeZ+6qUd0IX1O/s9Uhl/366Twf431Lwlcedpc2z/nr/00rzfT9U8qTyfO+etW3upvk/e05++afwz6o8J/EbR/GVn/AKLeJ50cX+rrb0vXofL8maavlTTvEc2jXCXmn3kiPH8/mRV6R4P+L8OvRww6oPLm/wCWstYznVpiPZri/wDNkzVO5lmlt3m/d7KxNG8Ri6j/ANdT9Uvv++KjnNP+XJxnjiw82T/RYa4nVJfssiYr0jVJbP8A5ZQfPXH+OPDk1/b/AGyw/eP/AM86v91UMzEvJfNj6Vx+sS/ZbjzsbK6qSLyo/wB7vjrnvEFqZY/OlmqDoPRfhH4382NLPzv9XXtOh+I/Nt08794lfKPhPWTa6gkMX7tP+mVe5eC/FEN1bpD/AKyvBxdCr7X3D2MDXPTv7Z8r/U0+XWPueYKxNPuoLqPMs3z1Zkihl7VyfvPaHq+0Rqx+KfsH7nzqp6p4ohl6TR7KwdYm8qTNYN5dTS/ua6eQiGKLninWYZelYNzLNd/7lEkXmyVWvB+7/deZ/wBc62p0zhr1/aEdN+1eb2plwZv+e/l0y3ireEP3Ryc/tPcL9nL/AM9YahvL/wArf5pqG5uTF1rnvEGqTRRPN53yVFOnqHP7MzfGGqTSyeT5/wAlcxJfw6N++8nzEp/iDVIZbb97N5aVx+qapqV/J5PnfJXq06Z51epTNLX/ABbqOqf8e0Plp/zz82qFnLNLJ513UMdr5X+to+1eVzHXo0IUvZc5wTnUJry/hi/1UOyq0l/NKP3tQ3mqTS1Xe4hIz5IFYVKhaTYj3WTUbyvIeajMhd8mkckEEVhOfPTNVCw2iinR965Sya3iEprodHlmijxLWDZxfvK2NP8A3Uderh/aVKZy1zpLe/8AK71fsL+8urj/AF3yVzdnLDLH5Im8z/rpWxpf2zy/Oi8tEruUDn/dnZ6Xdfu/3UNaR8m6KGWFN9clp91NF/y2ffWrHrMw/wBbNUe09p7hhX/dlnUPBFnF/pmg/wCg3kfz/u/9XJW34P8AiLqWjXCaDrMMaf8ATSs2z1nze1WbyLTdQs3hv4fM/wCeUv8Azzrf2lKHuHFUud5qF9DLGl5FDUNnrP2W486KLfXH6X4j1jS7f7HfzefbR/8ATKrNv4y0bzEh87Y9bTq6chfsPaUzv4NZ8q3f7XN/o0n+tiryL44fAf8AsszeKvCWnfarC4/fyxxxfvI67DS/EcMsqf6Yn7yuktvEc1rH5P8ABJRUhekQr4Q+VNPh8q4Tyv3aV3Nno02vaX/xK7NJHjr2/VPgj8JfiNG95F/xLbzyv9XbRf6yq3g/9mm88JahN9g8SfarOT/llJXF7P7MJm31r7Z4J4o8JalYW/n38Plp/wA8qoaXF5P7m1/eJXrX7QHhfUtF0T/SofLT7nl+VXkGgSmT/Q5pv9XWCVSDS5DenXWI+M93/Y7/AGWvG37Wnxw8N/A3wjZuj6xdbLq5/wCedv8A8tJK/p9/Yf8A2KPgz/wTu+AVp4U+GGgwQajdw51nVvK/eXHl1+Mf/Br3c+Cpf219VbxaE/tG30Hfp8dfsT8f/wBpYC4ufDUkz+d5uyWKOL/j3jrt4ixs8uo08NH3LnkKDx+O5PsQPlr/AIKcftLQ698QHhurz/RtLi2Rfvf3dfBnxI/am8N3Vu9mdNjkmj/8iVD/AMFBfjTqWs/FvUtH0u8j+zW8sj+bL/rK+TvEHiOa6kSbyfLqMJU9pS9iehjafs6nIer+D7//AEdIf3mz7/mV+lP/AARb+LXiS/k1L4YXUyXVhbxb7X/np+8kr8vvCd/DFbwiLzI3/wCmkv8ArK+uv+CefjzWPBHjC81LT9Te0m+yyPFFbS/vJK+VrV6tTAz/AJz6CjB+0Ptj/gqx/wAFCfCv7KvgP/hTPhe8Sfxn4gi2S+V/y5x//HK/KD4J+AofiP8AHywvLqafUby81T7VdebFWr/wUx+HPxm1T4ov8ctU1KfXEklkn82WX95bx13P/BOTwbD4u+Llt488md7a3ta2r4qngci/cT9/7ZGXYSr9a56x+h2j2v2DS4dNx/q4o0qh4ktPstnNNLDJ/qv9ZW2bUxR+dFBWV41v4f7Dea7h+f8A5ZV8DgqlR0/fPpqy9pUPnvxx/wAhB/K/eVxmsXUNr/y2rvPHnnDfNFXAahawSyefLD89e/T/AIRhU/dkNn5MX+mfx/8APOodY1mH7PT/ADYfWqFxF5snky1pChS9pzzMOeo6RQkl82RB5NTXF/8AuqL2KG1GayriXzZPJrqhMJezgPuJftcn7qobi1/d/uqmt4fKk86mXE00XMQrGe/uCMq9tf8AnlVDVL+HS7N7y6m2JHFv83yqs6xqnlR/vYPnrxz9qD403ngPwM+j2H/H/qFrstYq6sP/ALR7g26VP3zlfD/7aXir4Q/t0eD/AIqfD7wTp3ieHwnf7ItE1v8A497zzP8AWf6uvp/9tf8A4K7/ALUX7Telzab4o1L/AIRXTbiLZFoGiX/7iOOvz0+C/wAPtSuvECeNtZ1KREs/3/8A10uK63xx4om1mTybq8r2PqWB+sQrcnvwPDqY2pU9wwfFni2H54YtiVgnWZZf9VLHWJ4gv/8ATHhqnZyyxSfupq7p16tf3jDn/kNW8usyeSaoahdTeX5MVQ3Ek3mfvRTPK/5b+dUciM6n9wrSfuo3xWbeXX7v91NVnUJZvn82sH7fDDI9E6PtKvvjow9mbwl82z86L7/lViagfNj/AHtXLe//AHfkxTVWvIv+2laexDk/enPX33/xo0+WWKSptT8nzOP0qn5h9q5OTk987SzeedFced53z1Z0vWThzdS/NVOT97HjFV2XvUTn7OoNK519ndQ9POqzHdTRcxTf9+q5aw1OaL9zWjHdf88qv+IKcDv/AAn8ULzQY/sd/NI6ebXpGn+N7PXrNPKvP/ItfP0d1j/W1c0vXptLuPOtZpI3qJ+yIge9xywy75parXB82OuJ8L/EuG6jSG6+Saukj1T7VH+9rDnEYniCw/0jzq5LWPbGyvRbyKG6jeGKauM1TS5tPkeGX9//ANNK0gdEJmDp58v99FF/5FrsPAHjKa11DyZfk8yuY0+KGK4eGKbZ/wBdKLn7ZYXiXkUNclf94d1Cfsz3vS/EflR10Ol+I4vL/wCuleUeF/Ef2rT4Zv8AV1pR695Mn72b564J0PZnd7Q9LuDDfo/9+sq40b/ltWJZ/EH/AJYmD/trV+48UWd1H/rqxhP+c35ytcWHz1QvIqm1DXofL5m+SsTUdZhij/11XR/kOSY/zYfM8mWbzKfHLDFH5EX/AC0rE+1ebL+6qaO6/efva6+T90Zk2oX8MUbwy1x/iHVIR+4m+5W34guYfL/v1514k1SbzHh/eVvQoX+A5a/uFDxBfwzSeT59ZsZ/5bCGi4/ffvpareb7iu6nOr8B538SqWbi6/5bSj8ap3FzD/yyonkymPWqjyZOBzW86lNDgroe8hPWo5JTJTqjrjnP2hsFSVHRWIBToupptS2/9a3oa1ALNpD+8/eVq+V5sf8ArnSqFv5sWzzYauRyeVxXXyOn7hxVPaXL+jxQxRpEfv1vWf2z/nt8lc3pd1N5j+VWlp9/NFI/m10Ubw9w56kzet7qaL/ljH/21qz5oPEX7z/plWPHqn/PX93Vm3uof9dW3IZz/eG3HKY/30XyPVzT5prvf++rHjuoZams5fJk4NFOhSInP7B0/wDrY/3s3+rrNvNLh+0ed51Ps7+Yf6350q/H5MtXOFP7AFbT4rOOTFb1vfzRR/6L5myOsfy4fMz5NPkv5rDZ++8uinUqBOf7r3ze0fVLzWbzyTNPAkf/ADz/ANZXovhPxR/wi9ukNrqTyJ/0815p4fv4bXfNLv8A3lPvNehikea1HzyV3TrL2XIedOh7c9d1Dxv4b8Uae/hvxHpsE8N58n73/lpXi/j34D+ENBv/AO19BM8lnJ/yy/551S/4S2b+0E8ry4/LrvPC+vf29pf2O6h8zzItn+trOpCnT+AFRq0yh8D/AIoeN/gP47tviP8ACrxVfaBrdnFsivbaX/WR/wDPOSvq7R/+CwPxgurP+2PFtnaX2sXHz3Xlf6u4kr5C1zQZtG1D9788P/TKofKhl/1VeVjv+FKnyVvfPRoQ9h8B6X8XPjnN8WvElz4r1mGCB7iXfL5f/LOuG1CX7VH50Ur7P+WVU5LSb/Umjy/N2Z8z93WND/Z6XuHVXtU+M9g8L2ol/czTV9A/sf3Vno3xQtodU8+NLiKRPN/6aV4V4L1jR/Edul5pfmSJ/wBcq91/Zvi8rxRDLLN++k/1XmRV41ehV+rcnIddDFUvaneftYfCX4qeKbi2/wCFSw/bodUikgl8z/V2/wD10r3L9hf9lXTf2ePh1bWV/rEmo6rcfPdS+V5cdcrJf69fyP4blheNLj/VSx19RfDvwxNoPhuwhv8A5Hjtf9XXzOKhVoYb6vP3D3KHsqnv84/WD5Nv/wA864fx4JorN5v4K7XxZdeVb+TF+7ryv4g3955iTf8APP8A55S15qhVOqHtYHmniT/T5Hhlm8uuM1y18qTyf9ZXVax5MUb4+5XPXEsMtexh9iKlT2hj29qZdnm0zVLWGJHx5j1Zv7r7L/x61QuLq88tLz/0XXXzmH7qnSM2TMu+Gobj/V/6n/V1f8r95/BUOqedLGg/grQz9oZvleb/ALlY+oXX36v6jLP5b+XDXJeINZNhG/7n56U1VNIVLfGZXizWbOws5r2/mkjto/nlr4/1y18a/G74gXOvX+mz6do8cu+1+0/8s46+h/FnjzQYdU/s3WdStf8AW/8AHtLLXJfETxHZ3VxiIpsr0suXs6nuHm45/bgee6xrP9l26aPYQvBbW/8Aqov+elcN4l1Tzbyt7xZczS3jw2s3/bWuM1S6MV4/m17PJ7P4zx+f2lUx/El1N5if+jahtr+GWKn+IIobq3/dCsTT9Q/eeTLDseOjk/kOuH8M6H/lnUMcs3z+bVP+1P8Alh/HVn/rrjpRzumZwn7Qp65dQS6c+BXKxmHH7zf+NbHiSKGXv88dYschJxIKzhU9pVNFf7Zbt5fK/wBVU0v/AB7Gq0f/AF2p8l1D6/JWnJV9ryCh79UzbsTZfMX41Vq7efu+ItmyqLS5rOvDk+2bwHrKdnlEU1up+tOgz5mT+FE+fM4rGUakoXKW42pbS/ltR5RPymq1FZqdijat7qHy/OlmqbzYZY/OrFS5mCYBqa0vTDJkirnMizNSPzvL86uh8P8AjzUtLkTyv3if88q5KO682rNv/Wrpwv7gQ/dnq/h/xbZ6pHiKaPfJ/wAs6frEP2refOry6z1O90uT/RZ/+2ldDpfjeaKRBJ9yidP2dUXt6Y8+da6h5FaV5pf2qz/db6oeLMS28OpWEyV0Pg+6/tTR0m+R/wDln5VctY66E/aGV4bv5rW8+xyzV08l15sef9Y9c94ksPsF59sih+SrNnqn2qP+5/0yrCZ18nsy5JfzWsf72amSeI721/5fKyru/wDNkeGqclz9/wDcfSs/Z/yBCodDceKJrr/ltJRcX811HzXMRapNxV/T5ZpZP3UP+so9mL+IbdmPufvvnqaS6miP+uqG3imi/wBbBUOsXUFhbvmainCrUCpojK8Sap+7/wBuuSvLqKWR5qm1zWfN31gy3xld4vO617OE/dnnVKntB93fQzR4hGz/AK6VT84+9E8kR4AzVc/uzwKudSpBmcB1xN5lRUrct1oYAHg1xznedzQSipKa/UClyfu+YBtFSUUQAjqaD7/502pIO9XQ3InsWYJpc/vBvFTfvpd/77zHquknlHinQSzSydN/1r0ac+f3zBov2cU0J86SCtKz8mH/AFtZ3meVGIcipY5fueVDHJ/10lrec6ns/fOVrnLn2sfaP4Ks2d3N5n+ufZWV5vm8Sw/PVm3v5jb+T5MdH71mZ09nLDN/rauWY8r9953mJXPW8vlRJN5P+s/551cs5bvy348vzKdOnyGf8Q6G3v5q0re/EUeJZq5uO/8AK/5b086p5X76WH/WUuSr9gw5/wB6bcl/5v8AqpZI6rS380tx/f8ALrEk1maWTyIpvLSr9nKfLTyv3n/TSnToVftm9T+c1bfVLy16/PTLzXppv+mdULy//eeSN+yq37mKT/XeZXbCH7o4ef8AkN7w3pcOqXiebvjf/pnXp3hvRry10/8A54f+OVwHheayiuIZpbySNK7/AEfWbOa4f7UP9Z/y0p/u4Gc6lWZN4otftVnDDFd+Ykf/AC0krlZPOikfyppK9C0iKz1TfZ3UMk/7r/llXK6hpdna6hNDLD5f/TOSvJxWF/e853YGvTr0/fM0381rH50u/wD661DHLN5jzed8lTSS+ZJ+9hSNKhki/d+d/wCQqwhCr7M3n/CP1Q0f9g/4e6Xp8MOl+MI4/wB7+98qw/eR11Xh/wDY28NxahbXmjfFuO0ms4t/m/YP9ZJXrVvqngOwt4ZrrTfLf/lr5f7yvj//AIKEf8FE9Y+C3iDStB+COj2kcNx9o+321zF+8k8v/Vyf9c6/Pcrz/M87zL2NE9yfDv1P45n1p4Q/ZkhtdU03Xrr4tfbnt5fPlto7WP8AeV7NHLZ6fb/7FfKP/BL/AOIXxa+NPwqh+MHxamsYLnUPM+yxW1h/yzr6c1SXyo/3VYZvicdDFclb3+Q9LA4WlTOY8capnfN/q68o8WX/AJW/yj/rP+eVdV448RzX94/2WaN0j/6a15v4g1SaGSurD0+Re+dVSp7MxNYzdRv5sNYlx9ji/wBVAlXNU1D7VH5P7xErHkix/qoa9KnRpUzl50VtQi4SH/npWbeeTax/uhVy4usSeTjfVC8/e/62s/8Al8X7OkQyXUP/AAOqF5LNU1xEIjVO8/57y10U6ZzmVrks32R64y40vXvFGuQ+G/C+jyX2pXEUn2W2irb8Wa99ljfyqv8AwX+OfhX4Iwar8TrrR7TVdYuLWS10aOX/AJd/M/5aV3U6dWDJxc/3Rx/jj/gnZpsvgS5+LXxa1KDwx4hj/wBK/siO/wDPjuP+un/POvmnxZdWcV4/lfvP+eUdeo/Gv9pHxJ4ouJrzXdYkuprj/Wxeb+7r5j+Injy8i1CabyXj/wC2tfRYfCVKfuVT5z2ntNzobiGGXfDdXnz1x/iyKG0uK5gfEu8lkxJ9yrJ8ZRXX+u+etK0Kk/jCc/YfAFzL5tu4lm2VyuqS+VqHnedsroby6s8p/q9lc34gjhlL+befPWE6dWn75vTn7Qv6PdwmTMvzvVye/rj7O/ntZ/8AXVsSSmWNKFP2nvhOh7P4A1iX7VH/ALFZcaAPtFW9Ul/0fzoZqy0cyPzVzhSp/AaKFS3vlv8A5a/uqfJFD5f+uqCnTyGNPJxWPIJK7Ibsc/63NQP1/Cp5N1wnuKrk4GaVSCpm8B0JHn4kFEhiP+qNNpfK/d1y84xknam1JUdQWSVHRRWYEtvL5UnNXI74y7zis6npmM8nrW9OeoGjHmWP/Yqb/ln+6qvBcxRfusVYjl839zXVCF6hnOmh4v8AUoo/Jl+5XefCPVIfs81ndQ764C8PmyeSNlbHge/m0bUEnm/eJWGLp1alLkgaUJ+zqnqnijS4brT/APU+X/zyrj7e1mtZOkm+u/0u/s9U0tP30lY+qaNDDL52a8qE6vs+Q9X/AJec5iHS/Nj86WqEkP7z91XQxWvmR/vRRHo0Mr/7dOE/ZhM5i30qbzfOl8ySuh0fS5pY/JENaUeiw/Jx+tX5Jv7Ls/tkvyeXWc6/tKvJAw5PZmbcRfYLd/N2bI64PxJ4j+37/K+5R8QPiDPqG+yhm8v/AK51yUt/Pcn92K9LD0PZ+/MwnU9oMvLrzf8AltVKleQnsaSuqc6f2DkGv2p1R1JXL/ENCOipKYq7u9ElyOwD6joqSj4wI6kpvl+9No+ACSiJyqjFN8v3qeA8CX0q4EyaRLJL5px9z/rpTI/Opjx/J8lPjiymY63V5mXQs28v7t8zdqfH+5/1s1RQ3HmR+TKXNSx+SB+9hrq/eW98zehNZyxC4XzZvkq5bywxXH7394lZjgj/AFYqW1i86PzQPkSpnUf2IGTVveOj+3+TbpNF9z/pnU1vdTeXmWasG3usR/7FWre9j8zzvOTf/wBNK6VOp9s55o6D7VDFs4/1lQ3HkzR/635Kyv7Um8xP7lQ3mqReX5MvmedJW86nJ7kDP2ftDY/1uoJ5f3I/+eVaVvdTRXGZZq5vSLn7Jc/bDKXmkrVj1nF55MUO9/8Alr5tRD2tQzn/AHC/qF1iPzrr5/8ArlUOj/6VcfxolU9RlvJbjyftn+srV8NyzeZ/p+yNI/8AnlRODp1TH+H7509ndQ2Gz7L8/wD11rpNPv4bXZqUt4kb/wDouuMk1SE3CRRfvKmk1S8iuE82H/tlW/PUgbfuqlLnge2eD7+aa4SaKHy08qn+PPDkMsf9sWsMkj/8tZK4z4V6/DLrMP2q88uvVLe6s5beaG6m2eZF/rKvFUfaYb3Dy1+7xJ45qEtn5ieVNJv/AOWsXlUzTx5uzzg8fmf89a1fiRoupeHNY/0q8j2Sf6ry/wDlpXK/2pNL+5lvE/6ZRV4laFX2nuHv+0pexP/Z\n"},"metadata":{}}]},{"cell_type":"code","source":["# Definition of the parameters\n","max_cosine_distance = 0.4\n","nn_budget = None\n","nms_max_overlap = 1.0\n","\n","# initialize deep sort\n","model_filename = 'model_data/mars-small128.pb'\n","encoder = gdet.create_box_encoder(model_filename, batch_size=1)\n","# calculate cosine distance metric\n","metric = nn_matching.NearestNeighborDistanceMetric(\"cosine\", max_cosine_distance, nn_budget)\n","# initialize tracker\n","tracker = Tracker(metric)\n","\n","# load configuration for object detector\n","config = ConfigProto()\n","config.gpu_options.allow_growth = True\n","session = InteractiveSession(config=config)\n","STRIDES = np.array(cfg.YOLO.STRIDES)\n","ANCHORS = utils.get_anchors(cfg.YOLO.ANCHORS, False)\n","XYSCALE = cfg.YOLO.XYSCALE\n","NUM_CLASS = len(utils.read_class_names(cfg.YOLO.CLASSES))\n","input_size = 416\n","\n","# load standard tensorflow saved model\n","saved_model_loaded = tf.saved_model.load('./checkpoints/yolov4-416', tags=[tag_constants.SERVING])\n","infer = saved_model_loaded.signatures['serving_default']"],"metadata":{"id":"PESarIBVCO9W","executionInfo":{"status":"ok","timestamp":1652340300873,"user_tz":-120,"elapsed":20368,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"58f5d197-bb54-43ab-fc59-03c564cfb203"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/client/session.py:1751: UserWarning: An interactive session is already active. This can cause out-of-memory errors in some cases. You must explicitly call `InteractiveSession.close()` to release resources held by the other session(s).\n","  warnings.warn('An interactive session is already active. This can '\n"]}]},{"cell_type":"code","source":["# start streaming video from webcam\n","video_stream()\n","# label for video\n","label_html = 'Capturing...'\n","# initialze bounding box to empty\n","bbox = ''\n","count = 0\n","\n","person_to_track = 0\n","correct_symbol = False\n","\n","with mp_hands.Hands(min_detection_confidence = 0.5, min_tracking_confidence = 0.5) as hands:\n","    while True:\n","        js_reply = video_frame(label_html, bbox)\n","        if not js_reply:\n","            break\n","\n","        # convert JS response to OpenCV Image\n","        img = js_to_image(js_reply[\"img\"])\n","\n","        # img = cv2.flip(img, 1)\n","\n","        # create transparent overlay for bounding box\n","        bbox_array = np.zeros([480,640,4], dtype=np.uint8)\n","\n","        frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","        image = PIL.Image.fromarray(frame)\n","        \n","        frame_size = frame.shape[:2]\n","        image_data = cv2.resize(frame, (input_size, input_size))\n","        image_data = image_data / 255.\n","        image_data = image_data[np.newaxis, ...].astype(np.float32)\n","        start_time = time.time()\n","\n","        batch_data = tf.constant(image_data)\n","        pred_bbox = infer(batch_data)\n","        for key, value in pred_bbox.items():\n","            boxes = value[:, :, 0:4]\n","            pred_conf = value[:, :, 4:]\n","\n","        boxes, scores, classes, valid_detections = tf.image.combined_non_max_suppression(\n","            boxes=tf.reshape(boxes, (tf.shape(boxes)[0], -1, 1, 4)),\n","            scores=tf.reshape(\n","                pred_conf, (tf.shape(pred_conf)[0], -1, tf.shape(pred_conf)[-1])),\n","            max_output_size_per_class=50,\n","            max_total_size=50,\n","            iou_threshold=0.45,\n","            score_threshold=0.5\n","        )\n","\n","        # convert data to numpy arrays and slice out unused elements\n","        num_objects = valid_detections.numpy()[0]\n","        bboxes = boxes.numpy()[0]\n","        bboxes = bboxes[0:int(num_objects)]\n","        scores = scores.numpy()[0]\n","        scores = scores[0:int(num_objects)]\n","        classes = classes.numpy()[0]\n","        classes = classes[0:int(num_objects)]\n","\n","        # format bounding boxes from normalized ymin, xmin, ymax, xmax ---> xmin, ymin, width, height\n","        original_h, original_w, _ = frame.shape\n","        bboxes = utils.format_boxes(bboxes, original_h, original_w)\n","\n","        # store all predictions in one parameter for simplicity when calling functions\n","        pred_bbox = [bboxes, scores, classes, num_objects]\n","        \n","        # read in all class names from config\n","        class_names = utils.read_class_names(cfg.YOLO.CLASSES)\n","        \n","        # custom allowed classes \n","        allowed_classes = ['person']\n","\n","        # loop through objects and use class index to get class name, allow only classes in allowed_classes list\n","        names = []\n","        deleted_indx = []\n","        for i in range(num_objects):\n","\n","            left, top, right, bottom = int(bboxes[i,0]), int(bboxes[i,1]), int(bboxes[i,2]), int(bboxes[i,3])\n","\n","            class_indx = int(classes[i])\n","            class_name = class_names[class_indx]\n","            if class_name not in allowed_classes:\n","                deleted_indx.append(i)\n","            else:\n","                names.append(class_name)\n","\n","        names = np.array(names)\n","        count = len(names)\n","        # delete detections that are not in allowed_classes\n","        bboxes = np.delete(bboxes, deleted_indx, axis=0)\n","        scores = np.delete(scores, deleted_indx, axis=0)\n","\n","        # encode yolo detections and feed to tracker\n","        features = encoder(frame, bboxes)\n","        detections = [Detection(bbox, score, class_name, feature) for bbox, score, class_name, feature in zip(bboxes, scores, names, features)]\n","\n","        #initialize color map\n","        cmap = plt.get_cmap('tab20b')\n","        colors = [cmap(i)[:3] for i in np.linspace(0, 1, 20)]\n","\n","        # run non-maxima supression\n","        boxs = np.array([d.tlwh for d in detections])\n","        scores = np.array([d.confidence for d in detections])\n","        classes = np.array([d.class_name for d in detections])\n","        indices = preprocessing.non_max_suppression(boxs, classes, nms_max_overlap, scores)\n","        detections = [detections[i] for i in indices]       \n","\n","        # Call the tracker\n","        tracker.predict()\n","        tracker.update(detections)\n","\n","        ref_frame = frame\n","\n","        # update tracks\n","        for track in tracker.tracks:\n","            if not track.is_confirmed() or track.time_since_update > 1:\n","                continue \n","            bbox = track.to_tlbr()\n","            class_name = track.get_class()\n","\n","            left, top, right, bottom = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3])\n","            \n","            frame = ref_frame\n","            frame[:, 0:left, :] = 0\n","            frame[: ,right: 640, :] = 0\n","            frame[0: top, :, :] = 0\n","            frame[bottom: 480,:, :] = 0\n","            fingers_statuses = process_img(frame, left, top, right, bottom, hands, model_statuses)\n","            correct_symbol = check_symbol(fingers_statuses, model_statuses)\n","            # track the first person that shows the sign\n","            if correct_symbol and person_to_track == 0:\n","                bbox_array = cv2.circle(bbox_array, (round(left+(right-left)/2), round(top+(bottom-top)/2)), 5, (0, 255, 0), 5)\n","                person_to_track = track.track_id\n","            \n","            # draw bbox on screen\n","            color = colors[int(track.track_id) % len(colors)]\n","            color = [i * 255 for i in color]\n","            bbox_array = cv2.rectangle(bbox_array, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), color, 2)\n","            bbox_array = cv2.rectangle(bbox_array, (int(bbox[0]), int(bbox[1]-30)), (int(bbox[0])+(len(class_name)+len(str(track.track_id)))*17, int(bbox[1])), color, -1)\n","            if track.track_id == person_to_track:\n","                bbox_array = cv2.rectangle(bbox_array, (int(bbox[0]), int(bbox[1]-30)), (int(bbox[0])+(len(\"interestperson\")+len(str(track.track_id)))*17, int(bbox[1])), color, -1)\n","                cv2.putText(bbox_array, \"person of interest-\" + str(track.track_id),(int(bbox[0]), int(bbox[1]-10)),0, 0.75, (255,255,255),2)\n","            else:\n","                bbox_array = cv2.rectangle(bbox_array, (int(bbox[0]), int(bbox[1]-30)), (int(bbox[0])+(len(class_name)+len(str(track.track_id)))*17, int(bbox[1])), color, -1)\n","                cv2.putText(bbox_array, class_name + \"-\" + str(track.track_id),(int(bbox[0]), int(bbox[1]-10)),0, 0.75, (255,255,255),2)\n","\n","            correct_symbol = False\n","\n","        frame = ref_frame\n","\n","        bbox_array[:,:,3] = (bbox_array.max(axis = 2) > 0 ).astype(int) * 255\n","        # convert overlay of bbox into bytes\n","        bbox_bytes = bbox_to_bytes(bbox_array)\n","        # update bbox so next frame gets new overlay\n","        bbox = bbox_bytes\n","\n","        # Image back to BGR for rendering\n","        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)\n","  "],"metadata":{"id":"vb2RlpUyW2c2","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1652340774302,"user_tz":-120,"elapsed":473504,"user":{"displayName":"Luca Rezzonico","userId":"13659644689464206961"}},"outputId":"ac870c1b-5cc8-4a09-d092-3559ef5ba588"},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    var video;\n","    var div = null;\n","    var stream;\n","    var captureCanvas;\n","    var imgElement;\n","    var labelElement;\n","    \n","    var pendingResolve = null;\n","    var shutdown = false;\n","    \n","    function removeDom() {\n","       stream.getVideoTracks()[0].stop();\n","       video.remove();\n","       div.remove();\n","       video = null;\n","       div = null;\n","       stream = null;\n","       imgElement = null;\n","       captureCanvas = null;\n","       labelElement = null;\n","    }\n","    \n","    function onAnimationFrame() {\n","      if (!shutdown) {\n","        window.requestAnimationFrame(onAnimationFrame);\n","      }\n","      if (pendingResolve) {\n","        var result = \"\";\n","        if (!shutdown) {\n","          captureCanvas.getContext('2d').drawImage(video, 0, 0, 640, 480);\n","          result = captureCanvas.toDataURL('image/jpeg', 0.8)\n","        }\n","        var lp = pendingResolve;\n","        pendingResolve = null;\n","        lp(result);\n","      }\n","    }\n","    \n","    async function createDom() {\n","      if (div !== null) {\n","        return stream;\n","      }\n","\n","      div = document.createElement('div');\n","      div.style.border = '2px solid black';\n","      div.style.padding = '3px';\n","      div.style.width = '100%';\n","      div.style.maxWidth = '600px';\n","      document.body.appendChild(div);\n","      \n","      const modelOut = document.createElement('div');\n","      modelOut.innerHTML = \"<span>Status:</span>\";\n","      labelElement = document.createElement('span');\n","      labelElement.innerText = 'No data';\n","      labelElement.style.fontWeight = 'bold';\n","      modelOut.appendChild(labelElement);\n","      div.appendChild(modelOut);\n","           \n","      video = document.createElement('video');\n","      video.style.display = 'block';\n","      video.width = div.clientWidth - 6;\n","      video.setAttribute('playsinline', '');\n","      video.onclick = () => { shutdown = true; };\n","      stream = await navigator.mediaDevices.getUserMedia(\n","          {video: { facingMode: \"environment\"}});\n","      div.appendChild(video);\n","\n","      imgElement = document.createElement('img');\n","      imgElement.style.position = 'absolute';\n","      imgElement.style.zIndex = 1;\n","      imgElement.onclick = () => { shutdown = true; };\n","      div.appendChild(imgElement);\n","      \n","      const instruction = document.createElement('div');\n","      instruction.innerHTML = \n","          '<span style=\"color: red; font-weight: bold;\">' +\n","          'When finished, click here or on the video to stop this demo</span>';\n","      div.appendChild(instruction);\n","      instruction.onclick = () => { shutdown = true; };\n","      \n","      video.srcObject = stream;\n","      await video.play();\n","\n","      captureCanvas = document.createElement('canvas');\n","      captureCanvas.width = 640; //video.videoWidth;\n","      captureCanvas.height = 480; //video.videoHeight;\n","      window.requestAnimationFrame(onAnimationFrame);\n","      \n","      return stream;\n","    }\n","    async function stream_frame(label, imgData) {\n","      if (shutdown) {\n","        removeDom();\n","        shutdown = false;\n","        return '';\n","      }\n","\n","      var preCreate = Date.now();\n","      stream = await createDom();\n","      \n","      var preShow = Date.now();\n","      if (label != \"\") {\n","        labelElement.innerHTML = label;\n","      }\n","            \n","      if (imgData != \"\") {\n","        var videoRect = video.getClientRects()[0];\n","        imgElement.style.top = videoRect.top + \"px\";\n","        imgElement.style.left = videoRect.left + \"px\";\n","        imgElement.style.width = videoRect.width + \"px\";\n","        imgElement.style.height = videoRect.height + \"px\";\n","        imgElement.src = imgData;\n","      }\n","      \n","      var preCapture = Date.now();\n","      var result = await new Promise(function(resolve, reject) {\n","        pendingResolve = resolve;\n","      });\n","      shutdown = false;\n","      \n","      return {'create': preShow - preCreate, \n","              'show': preCapture - preShow, \n","              'capture': Date.now() - preCapture,\n","              'img': result};\n","    }\n","    "]},"metadata":{}}]}]}